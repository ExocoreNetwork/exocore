// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/restaking_assets_manage/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValueField struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=Amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"Amount"`
}

func (m *ValueField) Reset()         { *m = ValueField{} }
func (m *ValueField) String() string { return proto.CompactTextString(m) }
func (*ValueField) ProtoMessage()    {}
func (*ValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{0}
}
func (m *ValueField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueField.Merge(m, src)
}
func (m *ValueField) XXX_Size() int {
	return m.Size()
}
func (m *ValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueField.DiscardUnknown(m)
}

var xxx_messageInfo_ValueField proto.InternalMessageInfo

type ClientChainInfo struct {
	ChainName              string `protobuf:"bytes,1,opt,name=ChainName,proto3" json:"ChainName,omitempty"`
	ChainMetaInfo          string `protobuf:"bytes,2,opt,name=ChainMetaInfo,proto3" json:"ChainMetaInfo,omitempty"`
	OriginChainId          uint64 `protobuf:"varint,3,opt,name=OriginChainId,proto3" json:"OriginChainId,omitempty"`
	ExoCoreChainIndex      uint64 `protobuf:"varint,4,opt,name=ExoCoreChainIndex,proto3" json:"ExoCoreChainIndex,omitempty"`
	FinalityNeedBlockDelay uint64 `protobuf:"varint,5,opt,name=FinalityNeedBlockDelay,proto3" json:"FinalityNeedBlockDelay,omitempty"`
	LayerZeroChainID       uint64 `protobuf:"varint,6,opt,name=LayerZeroChainID,proto3" json:"LayerZeroChainID,omitempty"`
	SignatureType          string `protobuf:"bytes,7,opt,name=SignatureType,proto3" json:"SignatureType,omitempty"`
	AddressLength          uint32 `protobuf:"varint,8,opt,name=AddressLength,proto3" json:"AddressLength,omitempty"`
}

func (m *ClientChainInfo) Reset()         { *m = ClientChainInfo{} }
func (m *ClientChainInfo) String() string { return proto.CompactTextString(m) }
func (*ClientChainInfo) ProtoMessage()    {}
func (*ClientChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{1}
}
func (m *ClientChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainInfo.Merge(m, src)
}
func (m *ClientChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainInfo proto.InternalMessageInfo

func (m *ClientChainInfo) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *ClientChainInfo) GetChainMetaInfo() string {
	if m != nil {
		return m.ChainMetaInfo
	}
	return ""
}

func (m *ClientChainInfo) GetOriginChainId() uint64 {
	if m != nil {
		return m.OriginChainId
	}
	return 0
}

func (m *ClientChainInfo) GetExoCoreChainIndex() uint64 {
	if m != nil {
		return m.ExoCoreChainIndex
	}
	return 0
}

func (m *ClientChainInfo) GetFinalityNeedBlockDelay() uint64 {
	if m != nil {
		return m.FinalityNeedBlockDelay
	}
	return 0
}

func (m *ClientChainInfo) GetLayerZeroChainID() uint64 {
	if m != nil {
		return m.LayerZeroChainID
	}
	return 0
}

func (m *ClientChainInfo) GetSignatureType() string {
	if m != nil {
		return m.SignatureType
	}
	return ""
}

func (m *ClientChainInfo) GetAddressLength() uint32 {
	if m != nil {
		return m.AddressLength
	}
	return 0
}

// AppChainInfo is used to store information related to the subscriber app chains we validate.
// The information stored within this module consists only of the chain's identifiers.
// The validation-related information is stored in the coordinator module.
type AppChainInfo struct {
	// the chain name, for example "ethereum"
	ChainName string `protobuf:"bytes,1,opt,name=ChainName,proto3" json:"ChainName,omitempty"`
	// any other meta info that is at Exocore's discretion to deter,ome
	ChainMetaInfo string `protobuf:"bytes,2,opt,name=ChainMetaInfo,proto3" json:"ChainMetaInfo,omitempty"`
	// the chain id which is used as the primary key
	ChainId string `protobuf:"bytes,3,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
	// the index of the chain in exocore, so far unused
	ExocoreChainIndex uint64 `protobuf:"varint,4,opt,name=ExocoreChainIndex,proto3" json:"ExocoreChainIndex,omitempty"`
}

func (m *AppChainInfo) Reset()         { *m = AppChainInfo{} }
func (m *AppChainInfo) String() string { return proto.CompactTextString(m) }
func (*AppChainInfo) ProtoMessage()    {}
func (*AppChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{2}
}
func (m *AppChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppChainInfo.Merge(m, src)
}
func (m *AppChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppChainInfo proto.InternalMessageInfo

func (m *AppChainInfo) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *AppChainInfo) GetChainMetaInfo() string {
	if m != nil {
		return m.ChainMetaInfo
	}
	return ""
}

func (m *AppChainInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *AppChainInfo) GetExocoreChainIndex() uint64 {
	if m != nil {
		return m.ExocoreChainIndex
	}
	return 0
}

type ClientChainTokenInfo struct {
	Name              string                                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Symbol            string                                 `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Address           string                                 `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	Decimals          uint32                                 `protobuf:"varint,4,opt,name=Decimals,proto3" json:"Decimals,omitempty"`
	TotalSupply       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=TotalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"TotalSupply"`
	LayerZeroChainID  uint64                                 `protobuf:"varint,6,opt,name=LayerZeroChainID,proto3" json:"LayerZeroChainID,omitempty"`
	ExoCoreChainIndex uint64                                 `protobuf:"varint,7,opt,name=ExoCoreChainIndex,proto3" json:"ExoCoreChainIndex,omitempty"`
	AssetMetaInfo     string                                 `protobuf:"bytes,8,opt,name=AssetMetaInfo,proto3" json:"AssetMetaInfo,omitempty"`
}

func (m *ClientChainTokenInfo) Reset()         { *m = ClientChainTokenInfo{} }
func (m *ClientChainTokenInfo) String() string { return proto.CompactTextString(m) }
func (*ClientChainTokenInfo) ProtoMessage()    {}
func (*ClientChainTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{3}
}
func (m *ClientChainTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainTokenInfo.Merge(m, src)
}
func (m *ClientChainTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainTokenInfo proto.InternalMessageInfo

func (m *ClientChainTokenInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientChainTokenInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ClientChainTokenInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ClientChainTokenInfo) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *ClientChainTokenInfo) GetLayerZeroChainID() uint64 {
	if m != nil {
		return m.LayerZeroChainID
	}
	return 0
}

func (m *ClientChainTokenInfo) GetExoCoreChainIndex() uint64 {
	if m != nil {
		return m.ExoCoreChainIndex
	}
	return 0
}

func (m *ClientChainTokenInfo) GetAssetMetaInfo() string {
	if m != nil {
		return m.AssetMetaInfo
	}
	return ""
}

type StakingAssetInfo struct {
	AssetBasicInfo     *ClientChainTokenInfo                  `protobuf:"bytes,1,opt,name=AssetBasicInfo,proto3" json:"AssetBasicInfo,omitempty"`
	StakingTotalAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=StakingTotalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"StakingTotalAmount"`
}

func (m *StakingAssetInfo) Reset()         { *m = StakingAssetInfo{} }
func (m *StakingAssetInfo) String() string { return proto.CompactTextString(m) }
func (*StakingAssetInfo) ProtoMessage()    {}
func (*StakingAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{4}
}
func (m *StakingAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingAssetInfo.Merge(m, src)
}
func (m *StakingAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakingAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakingAssetInfo proto.InternalMessageInfo

func (m *StakingAssetInfo) GetAssetBasicInfo() *ClientChainTokenInfo {
	if m != nil {
		return m.AssetBasicInfo
	}
	return nil
}

type StakerSingleAssetOrChangeInfo struct {
	TotalDepositAmountOrWantChangeValue  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=TotalDepositAmountOrWantChangeValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"TotalDepositAmountOrWantChangeValue"`
	CanWithdrawAmountOrWantChangeValue   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=CanWithdrawAmountOrWantChangeValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"CanWithdrawAmountOrWantChangeValue"`
	WaitUnbondingAmountOrWantChangeValue github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=WaitUnbondingAmountOrWantChangeValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"WaitUnbondingAmountOrWantChangeValue"`
}

func (m *StakerSingleAssetOrChangeInfo) Reset()         { *m = StakerSingleAssetOrChangeInfo{} }
func (m *StakerSingleAssetOrChangeInfo) String() string { return proto.CompactTextString(m) }
func (*StakerSingleAssetOrChangeInfo) ProtoMessage()    {}
func (*StakerSingleAssetOrChangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{5}
}
func (m *StakerSingleAssetOrChangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerSingleAssetOrChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerSingleAssetOrChangeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerSingleAssetOrChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerSingleAssetOrChangeInfo.Merge(m, src)
}
func (m *StakerSingleAssetOrChangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerSingleAssetOrChangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerSingleAssetOrChangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerSingleAssetOrChangeInfo proto.InternalMessageInfo

type StakerAllAssetsInfo struct {
	AllAssetsState map[string]*StakerSingleAssetOrChangeInfo `protobuf:"bytes,1,rep,name=allAssetsState,proto3" json:"allAssetsState,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StakerAllAssetsInfo) Reset()         { *m = StakerAllAssetsInfo{} }
func (m *StakerAllAssetsInfo) String() string { return proto.CompactTextString(m) }
func (*StakerAllAssetsInfo) ProtoMessage()    {}
func (*StakerAllAssetsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{6}
}
func (m *StakerAllAssetsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerAllAssetsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerAllAssetsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerAllAssetsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerAllAssetsInfo.Merge(m, src)
}
func (m *StakerAllAssetsInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerAllAssetsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerAllAssetsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerAllAssetsInfo proto.InternalMessageInfo

func (m *StakerAllAssetsInfo) GetAllAssetsState() map[string]*StakerSingleAssetOrChangeInfo {
	if m != nil {
		return m.AllAssetsState
	}
	return nil
}

type OperatorSingleAssetOrChangeInfo struct {
	TotalAmountOrWantChangeValue github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=TotalAmountOrWantChangeValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"TotalAmountOrWantChangeValue"`
	// todo: the field is used to mark operator's own assets and is not temporarily used now
	OperatorOwnAmountOrWantChangeValue   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=OperatorOwnAmountOrWantChangeValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"OperatorOwnAmountOrWantChangeValue"`
	WaitUnbondingAmountOrWantChangeValue github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=WaitUnbondingAmountOrWantChangeValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"WaitUnbondingAmountOrWantChangeValue"`
	OperatorOwnWaitUnbondingAmount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=OperatorOwnWaitUnbondingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"OperatorOwnWaitUnbondingAmount"`
	OperatorUnbondableAmountAfterSlash   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=OperatorUnbondableAmountAfterSlash,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"OperatorUnbondableAmountAfterSlash"`
}

func (m *OperatorSingleAssetOrChangeInfo) Reset()         { *m = OperatorSingleAssetOrChangeInfo{} }
func (m *OperatorSingleAssetOrChangeInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorSingleAssetOrChangeInfo) ProtoMessage()    {}
func (*OperatorSingleAssetOrChangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{7}
}
func (m *OperatorSingleAssetOrChangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorSingleAssetOrChangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorSingleAssetOrChangeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorSingleAssetOrChangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorSingleAssetOrChangeInfo.Merge(m, src)
}
func (m *OperatorSingleAssetOrChangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorSingleAssetOrChangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorSingleAssetOrChangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorSingleAssetOrChangeInfo proto.InternalMessageInfo

type OperatorAllAssetsInfo struct {
	AllAssetsState map[string]*OperatorSingleAssetOrChangeInfo `protobuf:"bytes,1,rep,name=allAssetsState,proto3" json:"allAssetsState,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OperatorAllAssetsInfo) Reset()         { *m = OperatorAllAssetsInfo{} }
func (m *OperatorAllAssetsInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorAllAssetsInfo) ProtoMessage()    {}
func (*OperatorAllAssetsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{8}
}
func (m *OperatorAllAssetsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorAllAssetsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorAllAssetsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorAllAssetsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorAllAssetsInfo.Merge(m, src)
}
func (m *OperatorAllAssetsInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorAllAssetsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorAllAssetsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorAllAssetsInfo proto.InternalMessageInfo

func (m *OperatorAllAssetsInfo) GetAllAssetsState() map[string]*OperatorSingleAssetOrChangeInfo {
	if m != nil {
		return m.AllAssetsState
	}
	return nil
}

type MsgSetExoCoreAddr struct {
	FromAddress                string `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	SetAddress                 string `protobuf:"bytes,2,opt,name=setAddress,proto3" json:"setAddress,omitempty"`
	ClientChainAddr            string `protobuf:"bytes,3,opt,name=clientChainAddr,proto3" json:"clientChainAddr,omitempty"`
	ClientChainIndex           uint64 `protobuf:"varint,4,opt,name=clientChainIndex,proto3" json:"clientChainIndex,omitempty"`
	StakerClientChainSignature string `protobuf:"bytes,5,opt,name=StakerClientChainSignature,proto3" json:"StakerClientChainSignature,omitempty"`
}

func (m *MsgSetExoCoreAddr) Reset()         { *m = MsgSetExoCoreAddr{} }
func (m *MsgSetExoCoreAddr) String() string { return proto.CompactTextString(m) }
func (*MsgSetExoCoreAddr) ProtoMessage()    {}
func (*MsgSetExoCoreAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{9}
}
func (m *MsgSetExoCoreAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetExoCoreAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetExoCoreAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetExoCoreAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetExoCoreAddr.Merge(m, src)
}
func (m *MsgSetExoCoreAddr) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetExoCoreAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetExoCoreAddr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetExoCoreAddr proto.InternalMessageInfo

type MsgSetExoCoreAddrResponse struct {
}

func (m *MsgSetExoCoreAddrResponse) Reset()         { *m = MsgSetExoCoreAddrResponse{} }
func (m *MsgSetExoCoreAddrResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetExoCoreAddrResponse) ProtoMessage()    {}
func (*MsgSetExoCoreAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b24e66e530cc30d1, []int{10}
}
func (m *MsgSetExoCoreAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetExoCoreAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetExoCoreAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetExoCoreAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetExoCoreAddrResponse.Merge(m, src)
}
func (m *MsgSetExoCoreAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetExoCoreAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetExoCoreAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetExoCoreAddrResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValueField)(nil), "exocore.restaking_assets_manage.v1.ValueField")
	proto.RegisterType((*ClientChainInfo)(nil), "exocore.restaking_assets_manage.v1.ClientChainInfo")
	proto.RegisterType((*AppChainInfo)(nil), "exocore.restaking_assets_manage.v1.AppChainInfo")
	proto.RegisterType((*ClientChainTokenInfo)(nil), "exocore.restaking_assets_manage.v1.ClientChainTokenInfo")
	proto.RegisterType((*StakingAssetInfo)(nil), "exocore.restaking_assets_manage.v1.StakingAssetInfo")
	proto.RegisterType((*StakerSingleAssetOrChangeInfo)(nil), "exocore.restaking_assets_manage.v1.StakerSingleAssetOrChangeInfo")
	proto.RegisterType((*StakerAllAssetsInfo)(nil), "exocore.restaking_assets_manage.v1.StakerAllAssetsInfo")
	proto.RegisterMapType((map[string]*StakerSingleAssetOrChangeInfo)(nil), "exocore.restaking_assets_manage.v1.StakerAllAssetsInfo.AllAssetsStateEntry")
	proto.RegisterType((*OperatorSingleAssetOrChangeInfo)(nil), "exocore.restaking_assets_manage.v1.OperatorSingleAssetOrChangeInfo")
	proto.RegisterType((*OperatorAllAssetsInfo)(nil), "exocore.restaking_assets_manage.v1.OperatorAllAssetsInfo")
	proto.RegisterMapType((map[string]*OperatorSingleAssetOrChangeInfo)(nil), "exocore.restaking_assets_manage.v1.OperatorAllAssetsInfo.AllAssetsStateEntry")
	proto.RegisterType((*MsgSetExoCoreAddr)(nil), "exocore.restaking_assets_manage.v1.MsgSetExoCoreAddr")
	proto.RegisterType((*MsgSetExoCoreAddrResponse)(nil), "exocore.restaking_assets_manage.v1.MsgSetExoCoreAddrResponse")
}

func init() {
	proto.RegisterFile("exocore/restaking_assets_manage/v1/tx.proto", fileDescriptor_b24e66e530cc30d1)
}

var fileDescriptor_b24e66e530cc30d1 = []byte{
	// 1096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0xda, 0xcd, 0xd7, 0x1b, 0xd2, 0x26, 0xd3, 0x50, 0x1c, 0x53, 0x9c, 0x68, 0xa9, 0x50,
	0x14, 0x88, 0xad, 0x06, 0x51, 0x45, 0x11, 0x20, 0x39, 0x4e, 0x2b, 0x45, 0x34, 0x89, 0xb4, 0x0e,
	0x44, 0x14, 0x89, 0x30, 0xb6, 0x27, 0xeb, 0x95, 0x77, 0x67, 0xac, 0x9d, 0x71, 0x12, 0xdf, 0x2a,
	0x54, 0x21, 0x84, 0x10, 0x2a, 0x27, 0x24, 0xb8, 0xf4, 0x27, 0xe4, 0xd0, 0x1f, 0xd1, 0x63, 0x95,
	0x0b, 0x05, 0xa1, 0x0a, 0x25, 0x87, 0xf0, 0x33, 0xd0, 0xce, 0x8c, 0x93, 0xdd, 0xd8, 0x6e, 0xb6,
	0xd4, 0x95, 0xb8, 0x24, 0x3b, 0xcf, 0xfb, 0xf5, 0xec, 0xfb, 0x31, 0x7e, 0x17, 0xde, 0x27, 0xfb,
	0xac, 0xc2, 0x7c, 0x92, 0xf7, 0x09, 0x17, 0xb8, 0xee, 0x50, 0x7b, 0x1b, 0x73, 0x4e, 0x04, 0xdf,
	0xf6, 0x30, 0xc5, 0x36, 0xc9, 0xef, 0xde, 0xcc, 0x8b, 0xfd, 0x5c, 0xc3, 0x67, 0x82, 0x21, 0x53,
	0x2b, 0xe7, 0x7a, 0x28, 0xe7, 0x76, 0x6f, 0x66, 0xde, 0xaa, 0x30, 0xee, 0x31, 0x9e, 0xf7, 0xb8,
	0x1d, 0xd8, 0x7a, 0xdc, 0x56, 0xc6, 0x99, 0x29, 0x25, 0xd8, 0x96, 0xa7, 0xbc, 0x3a, 0x68, 0xd1,
	0xa4, 0xcd, 0x6c, 0xa6, 0xf0, 0xe0, 0x49, 0xa3, 0x13, 0xd8, 0x73, 0x28, 0xcb, 0xcb, 0xbf, 0x0a,
	0x32, 0xcb, 0x00, 0x5f, 0x60, 0xb7, 0x49, 0xee, 0x38, 0xc4, 0xad, 0xa2, 0x4d, 0x18, 0x2c, 0x78,
	0xac, 0x49, 0x45, 0xda, 0x98, 0x31, 0x66, 0x47, 0x96, 0x3f, 0x7e, 0xf2, 0x7c, 0x3a, 0xf1, 0xe7,
	0xf3, 0xe9, 0xf7, 0x6c, 0x47, 0xd4, 0x9a, 0xe5, 0x5c, 0x85, 0x79, 0x3a, 0x8e, 0xfe, 0x37, 0xcf,
	0xab, 0xf5, 0xbc, 0x68, 0x35, 0x08, 0xcf, 0xad, 0x52, 0x71, 0xf8, 0x78, 0x1e, 0x34, 0x8d, 0x55,
	0x2a, 0x2c, 0xed, 0xcb, 0xfc, 0x23, 0x09, 0x57, 0x8a, 0xae, 0x43, 0xa8, 0x28, 0xd6, 0xb0, 0x43,
	0x57, 0xe9, 0x0e, 0x43, 0xd7, 0x61, 0x44, 0x1e, 0xd6, 0xb1, 0x47, 0x54, 0x30, 0xeb, 0x0c, 0x40,
	0x37, 0x60, 0x4c, 0x1e, 0xd6, 0x88, 0xc0, 0x81, 0x7a, 0x3a, 0x29, 0x35, 0xa2, 0x60, 0xa0, 0xb5,
	0xe1, 0x3b, 0xb6, 0x43, 0x95, 0xdb, 0x6a, 0x3a, 0x35, 0x63, 0xcc, 0x5e, 0xb2, 0xa2, 0x20, 0xfa,
	0x00, 0x26, 0x6e, 0xef, 0xb3, 0x22, 0xf3, 0x89, 0x8e, 0x5e, 0x25, 0xfb, 0xe9, 0x4b, 0x52, 0xb3,
	0x53, 0x80, 0x6e, 0xc1, 0xb5, 0x3b, 0x0e, 0xc5, 0xae, 0x23, 0x5a, 0xeb, 0x84, 0x54, 0x97, 0x5d,
	0x56, 0xa9, 0xaf, 0x10, 0x17, 0xb7, 0xd2, 0x03, 0xd2, 0xa4, 0x87, 0x14, 0xcd, 0xc1, 0xf8, 0x5d,
	0xdc, 0x22, 0xfe, 0x3d, 0xe2, 0x33, 0xe5, 0x6e, 0x25, 0x3d, 0x28, 0x2d, 0x3a, 0xf0, 0x80, 0x77,
	0xc9, 0xb1, 0x29, 0x16, 0x4d, 0x9f, 0x6c, 0xb6, 0x1a, 0x24, 0x3d, 0xa4, 0xde, 0x2e, 0x02, 0x06,
	0x5a, 0x85, 0x6a, 0xd5, 0x27, 0x9c, 0xdf, 0x25, 0xd4, 0x16, 0xb5, 0xf4, 0xf0, 0x8c, 0x31, 0x3b,
	0x66, 0x45, 0x41, 0xf3, 0x57, 0x03, 0xde, 0x28, 0x34, 0x1a, 0xfd, 0x4d, 0x6c, 0x1a, 0x86, 0xc2,
	0x29, 0x1d, 0xb1, 0x86, 0xa2, 0xc9, 0xac, 0xf4, 0x4a, 0x66, 0x54, 0x60, 0x3e, 0x4b, 0xc2, 0x64,
	0xa8, 0xf0, 0x9b, 0xac, 0x4e, 0x14, 0x49, 0x04, 0x97, 0x42, 0xfc, 0xe4, 0x33, 0xba, 0x06, 0x83,
	0xa5, 0x96, 0x57, 0x66, 0xae, 0xe6, 0xa4, 0x4f, 0x01, 0x19, 0xfd, 0xca, 0x6d, 0x32, 0xfa, 0x88,
	0x32, 0x30, 0xbc, 0x42, 0x2a, 0x8e, 0x87, 0x5d, 0x2e, 0x39, 0x8c, 0x59, 0xa7, 0x67, 0xf4, 0x35,
	0x8c, 0x6e, 0x32, 0x81, 0xdd, 0x52, 0xb3, 0xd1, 0x70, 0x55, 0xf1, 0x5e, 0xb5, 0x9d, 0xc3, 0x0e,
	0x5f, 0xaa, 0xde, 0x5d, 0x3b, 0x70, 0xa8, 0x57, 0x07, 0x06, 0x75, 0x0f, 0xae, 0x80, 0xd3, 0x12,
	0x0d, 0xab, 0x12, 0x45, 0x40, 0xf3, 0xc8, 0x80, 0xf1, 0x92, 0xba, 0x31, 0xa4, 0x40, 0xa6, 0xf5,
	0x1b, 0xb8, 0x2c, 0x0f, 0xcb, 0x98, 0x3b, 0x15, 0x69, 0x1b, 0x24, 0x78, 0x74, 0x61, 0x31, 0x77,
	0xf1, 0x35, 0x93, 0xeb, 0x56, 0x28, 0xeb, 0x9c, 0x3f, 0xe4, 0x02, 0xd2, 0x51, 0x65, 0x32, 0xf4,
	0x65, 0x91, 0xec, 0x43, 0x76, 0xbb, 0xf8, 0x35, 0x0f, 0x53, 0xf0, 0x4e, 0x00, 0x13, 0xbf, 0xe4,
	0x50, 0xdb, 0x25, 0x92, 0xcc, 0x86, 0x5f, 0xac, 0x61, 0x6a, 0x13, 0xc9, 0xe7, 0x27, 0x03, 0xde,
	0x95, 0x16, 0x2b, 0xa4, 0xc1, 0xb8, 0x23, 0x94, 0xe1, 0x86, 0xbf, 0x85, 0xe5, 0xab, 0x50, 0x9b,
	0xc8, 0xdb, 0xad, 0x2f, 0xd7, 0x59, 0x9c, 0x40, 0xe8, 0x47, 0x03, 0xcc, 0x22, 0xa6, 0x5b, 0x8e,
	0xa8, 0x55, 0x7d, 0xbc, 0xd7, 0x8b, 0x4f, 0x3f, 0x32, 0x16, 0x23, 0x0e, 0x7a, 0x68, 0xc0, 0x8d,
	0x2d, 0xec, 0x88, 0xcf, 0x69, 0x99, 0xd1, 0x6a, 0xd0, 0x2c, 0x3d, 0x08, 0xa5, 0xfa, 0x40, 0x28,
	0x56, 0x24, 0xf3, 0xe7, 0x24, 0x5c, 0x55, 0x45, 0x2d, 0xb8, 0xae, 0xac, 0x28, 0x97, 0xa5, 0xe4,
	0x70, 0x19, 0xb7, 0x81, 0x92, 0xc0, 0x22, 0x28, 0x5a, 0x6a, 0x76, 0x74, 0xe1, 0xb3, 0x38, 0xcd,
	0xdb, 0xc5, 0x61, 0xae, 0x10, 0xf1, 0x76, 0x9b, 0x0a, 0xbf, 0x65, 0x9d, 0x0b, 0x91, 0x79, 0x60,
	0xc0, 0xd5, 0x2e, 0x7a, 0x68, 0x1c, 0x52, 0x75, 0xd2, 0xd2, 0xf7, 0x53, 0xf0, 0x88, 0xb6, 0x60,
	0x60, 0xf7, 0xb4, 0x74, 0xa3, 0x0b, 0x85, 0xf8, 0xac, 0x7a, 0xf4, 0xae, 0xa5, 0xfc, 0x2d, 0x25,
	0x17, 0x0d, 0xf3, 0xaf, 0x01, 0x98, 0xde, 0x68, 0x10, 0x1f, 0x0b, 0xd6, 0xb3, 0xd5, 0xef, 0x1b,
	0x70, 0x3d, 0x34, 0x1c, 0xaf, 0xa7, 0xc7, 0x5f, 0x18, 0x41, 0x36, 0x77, 0x9b, 0xe6, 0xc6, 0x1e,
	0x7d, 0xad, 0xcd, 0x7d, 0x71, 0x9c, 0xff, 0x61, 0x73, 0xa3, 0x07, 0x06, 0x64, 0x43, 0xcc, 0xbb,
	0xd8, 0xc8, 0x5f, 0xaa, 0x57, 0x25, 0x73, 0x41, 0x8c, 0x48, 0xa1, 0x94, 0x0c, 0x97, 0x5d, 0xa2,
	0x84, 0x85, 0x1d, 0x41, 0xfc, 0x92, 0x8b, 0x79, 0xad, 0x2f, 0xbf, 0x8a, 0x31, 0xe2, 0x98, 0xbf,
	0x24, 0xe1, 0xcd, 0xb6, 0x5a, 0x74, 0xe8, 0x9b, 0x3d, 0x86, 0x7e, 0x2d, 0xce, 0x78, 0x75, 0x75,
	0x19, 0x6b, 0xec, 0xbf, 0x8b, 0x3d, 0xf6, 0x5f, 0x46, 0xc7, 0xbe, 0xf8, 0x32, 0xbc, 0x62, 0x0c,
	0xfe, 0xef, 0x49, 0x98, 0x58, 0xe3, 0x76, 0x89, 0x08, 0xbd, 0x08, 0x04, 0xbb, 0x0d, 0x5a, 0x82,
	0xd1, 0x1d, 0x9f, 0x79, 0xed, 0xb5, 0x47, 0x0d, 0x76, 0xfa, 0xf0, 0xf1, 0xfc, 0xa4, 0x4e, 0xbc,
	0x96, 0x94, 0x84, 0xef, 0x50, 0xdb, 0x0a, 0x2b, 0xa3, 0x45, 0x00, 0x4e, 0x44, 0xdb, 0x34, 0x79,
	0x81, 0x69, 0x48, 0x17, 0xcd, 0xc2, 0x95, 0xca, 0xd9, 0x0e, 0x10, 0xa0, 0x7a, 0xe1, 0x3a, 0x0f,
	0x07, 0xcb, 0x4f, 0x25, 0xbc, 0xcf, 0x9f, 0x2d, 0x81, 0x1d, 0x38, 0xfa, 0x14, 0x32, 0xea, 0x1a,
	0x0c, 0xed, 0x17, 0xa7, 0x8b, 0xae, 0xea, 0x40, 0xeb, 0x05, 0x1a, 0x4b, 0xb7, 0xbe, 0x7f, 0x34,
	0x9d, 0xf8, 0xe7, 0xd1, 0x74, 0xe2, 0xdb, 0x93, 0x83, 0xb9, 0xf0, 0x9b, 0xfe, 0x70, 0x72, 0x30,
	0x37, 0xd5, 0xfe, 0xd6, 0xea, 0xc8, 0xa1, 0xf9, 0x36, 0x4c, 0x75, 0x80, 0x16, 0xe1, 0x0d, 0x46,
	0x39, 0x59, 0xf8, 0xcd, 0x80, 0xd4, 0x1a, 0xb7, 0x83, 0x39, 0x99, 0x2c, 0x11, 0xa1, 0xc2, 0x87,
	0x2b, 0xf0, 0x51, 0x9c, 0x3a, 0x77, 0xf8, 0xcf, 0x7c, 0xf2, 0x9f, 0xcc, 0xda, 0xb4, 0x32, 0x03,
	0xf7, 0x4f, 0x0e, 0xe6, 0x8c, 0xe5, 0xaf, 0x9e, 0x1c, 0x65, 0x8d, 0xa7, 0x47, 0x59, 0xe3, 0xef,
	0xa3, 0xac, 0xf1, 0xf0, 0x38, 0x9b, 0x78, 0x7a, 0x9c, 0x4d, 0x3c, 0x3b, 0xce, 0x26, 0xee, 0x15,
	0x42, 0x23, 0xaa, 0xd7, 0xed, 0x75, 0x22, 0xf6, 0x98, 0x5f, 0xcf, 0xb7, 0x33, 0xb1, 0xdf, 0xf3,
	0xbb, 0x53, 0x4e, 0x70, 0x79, 0x50, 0x7e, 0xf7, 0x7d, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe6, 0x8e, 0xd0, 0xcb, 0xa7, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SetStakerExoCoreAddr(ctx context.Context, in *MsgSetExoCoreAddr, opts ...grpc.CallOption) (*MsgSetExoCoreAddrResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetStakerExoCoreAddr(ctx context.Context, in *MsgSetExoCoreAddr, opts ...grpc.CallOption) (*MsgSetExoCoreAddrResponse, error) {
	out := new(MsgSetExoCoreAddrResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Msg/SetStakerExoCoreAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SetStakerExoCoreAddr(context.Context, *MsgSetExoCoreAddr) (*MsgSetExoCoreAddrResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetStakerExoCoreAddr(ctx context.Context, req *MsgSetExoCoreAddr) (*MsgSetExoCoreAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStakerExoCoreAddr not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetStakerExoCoreAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetExoCoreAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetStakerExoCoreAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Msg/SetStakerExoCoreAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetStakerExoCoreAddr(ctx, req.(*MsgSetExoCoreAddr))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.restaking_assets_manage.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStakerExoCoreAddr",
			Handler:    _Msg_SetStakerExoCoreAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/restaking_assets_manage/v1/tx.proto",
}

func (m *ValueField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressLength != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AddressLength))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SignatureType) > 0 {
		i -= len(m.SignatureType)
		copy(dAtA[i:], m.SignatureType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignatureType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LayerZeroChainID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LayerZeroChainID))
		i--
		dAtA[i] = 0x30
	}
	if m.FinalityNeedBlockDelay != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinalityNeedBlockDelay))
		i--
		dAtA[i] = 0x28
	}
	if m.ExoCoreChainIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExoCoreChainIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.OriginChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OriginChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainMetaInfo) > 0 {
		i -= len(m.ChainMetaInfo)
		copy(dAtA[i:], m.ChainMetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainMetaInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExocoreChainIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExocoreChainIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainMetaInfo) > 0 {
		i -= len(m.ChainMetaInfo)
		copy(dAtA[i:], m.ChainMetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainMetaInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientChainTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetMetaInfo) > 0 {
		i -= len(m.AssetMetaInfo)
		copy(dAtA[i:], m.AssetMetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetMetaInfo)))
		i--
		dAtA[i] = 0x42
	}
	if m.ExoCoreChainIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExoCoreChainIndex))
		i--
		dAtA[i] = 0x38
	}
	if m.LayerZeroChainID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LayerZeroChainID))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.TotalSupply.Size()
		i -= size
		if _, err := m.TotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Decimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.StakingTotalAmount.Size()
		i -= size
		if _, err := m.StakingTotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetBasicInfo != nil {
		{
			size, err := m.AssetBasicInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerSingleAssetOrChangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerSingleAssetOrChangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerSingleAssetOrChangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WaitUnbondingAmountOrWantChangeValue.Size()
		i -= size
		if _, err := m.WaitUnbondingAmountOrWantChangeValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CanWithdrawAmountOrWantChangeValue.Size()
		i -= size
		if _, err := m.CanWithdrawAmountOrWantChangeValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalDepositAmountOrWantChangeValue.Size()
		i -= size
		if _, err := m.TotalDepositAmountOrWantChangeValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StakerAllAssetsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerAllAssetsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerAllAssetsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllAssetsState) > 0 {
		for k := range m.AllAssetsState {
			v := m.AllAssetsState[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTx(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorSingleAssetOrChangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorSingleAssetOrChangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorSingleAssetOrChangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OperatorUnbondableAmountAfterSlash.Size()
		i -= size
		if _, err := m.OperatorUnbondableAmountAfterSlash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.OperatorOwnWaitUnbondingAmount.Size()
		i -= size
		if _, err := m.OperatorOwnWaitUnbondingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.WaitUnbondingAmountOrWantChangeValue.Size()
		i -= size
		if _, err := m.WaitUnbondingAmountOrWantChangeValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.OperatorOwnAmountOrWantChangeValue.Size()
		i -= size
		if _, err := m.OperatorOwnAmountOrWantChangeValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalAmountOrWantChangeValue.Size()
		i -= size
		if _, err := m.TotalAmountOrWantChangeValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperatorAllAssetsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorAllAssetsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorAllAssetsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllAssetsState) > 0 {
		for k := range m.AllAssetsState {
			v := m.AllAssetsState[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTx(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetExoCoreAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetExoCoreAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetExoCoreAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerClientChainSignature) > 0 {
		i -= len(m.StakerClientChainSignature)
		copy(dAtA[i:], m.StakerClientChainSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakerClientChainSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ClientChainIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClientChainIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClientChainAddr) > 0 {
		i -= len(m.ClientChainAddr)
		copy(dAtA[i:], m.ClientChainAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientChainAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SetAddress) > 0 {
		i -= len(m.SetAddress)
		copy(dAtA[i:], m.SetAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SetAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetExoCoreAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetExoCoreAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetExoCoreAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *ClientChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainMetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OriginChainId != 0 {
		n += 1 + sovTx(uint64(m.OriginChainId))
	}
	if m.ExoCoreChainIndex != 0 {
		n += 1 + sovTx(uint64(m.ExoCoreChainIndex))
	}
	if m.FinalityNeedBlockDelay != 0 {
		n += 1 + sovTx(uint64(m.FinalityNeedBlockDelay))
	}
	if m.LayerZeroChainID != 0 {
		n += 1 + sovTx(uint64(m.LayerZeroChainID))
	}
	l = len(m.SignatureType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AddressLength != 0 {
		n += 1 + sovTx(uint64(m.AddressLength))
	}
	return n
}

func (m *AppChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainMetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExocoreChainIndex != 0 {
		n += 1 + sovTx(uint64(m.ExocoreChainIndex))
	}
	return n
}

func (m *ClientChainTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovTx(uint64(m.Decimals))
	}
	l = m.TotalSupply.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.LayerZeroChainID != 0 {
		n += 1 + sovTx(uint64(m.LayerZeroChainID))
	}
	if m.ExoCoreChainIndex != 0 {
		n += 1 + sovTx(uint64(m.ExoCoreChainIndex))
	}
	l = len(m.AssetMetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *StakingAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetBasicInfo != nil {
		l = m.AssetBasicInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.StakingTotalAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *StakerSingleAssetOrChangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalDepositAmountOrWantChangeValue.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.CanWithdrawAmountOrWantChangeValue.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.WaitUnbondingAmountOrWantChangeValue.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *StakerAllAssetsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllAssetsState) > 0 {
		for k, v := range m.AllAssetsState {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTx(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OperatorSingleAssetOrChangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalAmountOrWantChangeValue.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.OperatorOwnAmountOrWantChangeValue.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.WaitUnbondingAmountOrWantChangeValue.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.OperatorOwnWaitUnbondingAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.OperatorUnbondableAmountAfterSlash.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *OperatorAllAssetsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllAssetsState) > 0 {
		for k, v := range m.AllAssetsState {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTx(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgSetExoCoreAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SetAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientChainAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClientChainIndex != 0 {
		n += 1 + sovTx(uint64(m.ClientChainIndex))
	}
	l = len(m.StakerClientChainSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetExoCoreAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValueField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainMetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainMetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChainId", wireType)
			}
			m.OriginChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExoCoreChainIndex", wireType)
			}
			m.ExoCoreChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExoCoreChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalityNeedBlockDelay", wireType)
			}
			m.FinalityNeedBlockDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalityNeedBlockDelay |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerZeroChainID", wireType)
			}
			m.LayerZeroChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LayerZeroChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLength", wireType)
			}
			m.AddressLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainMetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainMetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExocoreChainIndex", wireType)
			}
			m.ExocoreChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExocoreChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientChainTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientChainTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerZeroChainID", wireType)
			}
			m.LayerZeroChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LayerZeroChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExoCoreChainIndex", wireType)
			}
			m.ExoCoreChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExoCoreChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetMetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetMetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetBasicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetBasicInfo == nil {
				m.AssetBasicInfo = &ClientChainTokenInfo{}
			}
			if err := m.AssetBasicInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingTotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerSingleAssetOrChangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerSingleAssetOrChangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerSingleAssetOrChangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDepositAmountOrWantChangeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDepositAmountOrWantChangeValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanWithdrawAmountOrWantChangeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CanWithdrawAmountOrWantChangeValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitUnbondingAmountOrWantChangeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitUnbondingAmountOrWantChangeValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerAllAssetsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerAllAssetsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerAllAssetsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAssetsState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllAssetsState == nil {
				m.AllAssetsState = make(map[string]*StakerSingleAssetOrChangeInfo)
			}
			var mapkey string
			var mapvalue *StakerSingleAssetOrChangeInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StakerSingleAssetOrChangeInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllAssetsState[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorSingleAssetOrChangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorSingleAssetOrChangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorSingleAssetOrChangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmountOrWantChangeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmountOrWantChangeValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorOwnAmountOrWantChangeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorOwnAmountOrWantChangeValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitUnbondingAmountOrWantChangeValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitUnbondingAmountOrWantChangeValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorOwnWaitUnbondingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorOwnWaitUnbondingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorUnbondableAmountAfterSlash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorUnbondableAmountAfterSlash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorAllAssetsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorAllAssetsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorAllAssetsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAssetsState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllAssetsState == nil {
				m.AllAssetsState = make(map[string]*OperatorSingleAssetOrChangeInfo)
			}
			var mapkey string
			var mapvalue *OperatorSingleAssetOrChangeInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OperatorSingleAssetOrChangeInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllAssetsState[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetExoCoreAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetExoCoreAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetExoCoreAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChainAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainIndex", wireType)
			}
			m.ClientChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerClientChainSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerClientChainSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetExoCoreAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetExoCoreAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetExoCoreAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
