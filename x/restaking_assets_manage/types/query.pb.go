// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/restaking_assets_manage/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryClientChainInfo struct {
	ChainIndex uint64 `protobuf:"varint,1,opt,name=chainIndex,proto3" json:"chainIndex,omitempty"`
}

func (m *QueryClientChainInfo) Reset()         { *m = QueryClientChainInfo{} }
func (m *QueryClientChainInfo) String() string { return proto.CompactTextString(m) }
func (*QueryClientChainInfo) ProtoMessage()    {}
func (*QueryClientChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{0}
}
func (m *QueryClientChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientChainInfo.Merge(m, src)
}
func (m *QueryClientChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientChainInfo proto.InternalMessageInfo

func (m *QueryClientChainInfo) GetChainIndex() uint64 {
	if m != nil {
		return m.ChainIndex
	}
	return 0
}

type QueryAllClientChainInfo struct {
}

func (m *QueryAllClientChainInfo) Reset()         { *m = QueryAllClientChainInfo{} }
func (m *QueryAllClientChainInfo) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientChainInfo) ProtoMessage()    {}
func (*QueryAllClientChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{1}
}
func (m *QueryAllClientChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientChainInfo.Merge(m, src)
}
func (m *QueryAllClientChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientChainInfo proto.InternalMessageInfo

type QueryAllClientChainInfoResponse struct {
	AllClientChainInfos map[uint64]*ClientChainInfo `protobuf:"bytes,1,rep,name=allClientChainInfos,proto3" json:"allClientChainInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryAllClientChainInfoResponse) Reset()         { *m = QueryAllClientChainInfoResponse{} }
func (m *QueryAllClientChainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientChainInfoResponse) ProtoMessage()    {}
func (*QueryAllClientChainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{2}
}
func (m *QueryAllClientChainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientChainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientChainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientChainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientChainInfoResponse.Merge(m, src)
}
func (m *QueryAllClientChainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientChainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientChainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientChainInfoResponse proto.InternalMessageInfo

func (m *QueryAllClientChainInfoResponse) GetAllClientChainInfos() map[uint64]*ClientChainInfo {
	if m != nil {
		return m.AllClientChainInfos
	}
	return nil
}

type QueryStakingAssetInfo struct {
	AssetId string `protobuf:"bytes,1,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (m *QueryStakingAssetInfo) Reset()         { *m = QueryStakingAssetInfo{} }
func (m *QueryStakingAssetInfo) String() string { return proto.CompactTextString(m) }
func (*QueryStakingAssetInfo) ProtoMessage()    {}
func (*QueryStakingAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{3}
}
func (m *QueryStakingAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingAssetInfo.Merge(m, src)
}
func (m *QueryStakingAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingAssetInfo proto.InternalMessageInfo

func (m *QueryStakingAssetInfo) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

type QueryAllStakingAssetsInfo struct {
}

func (m *QueryAllStakingAssetsInfo) Reset()         { *m = QueryAllStakingAssetsInfo{} }
func (m *QueryAllStakingAssetsInfo) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingAssetsInfo) ProtoMessage()    {}
func (*QueryAllStakingAssetsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{4}
}
func (m *QueryAllStakingAssetsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingAssetsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingAssetsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingAssetsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingAssetsInfo.Merge(m, src)
}
func (m *QueryAllStakingAssetsInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingAssetsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingAssetsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingAssetsInfo proto.InternalMessageInfo

type QueryAllStakingAssetsInfoResponse struct {
	AllStakingAssetsInfo map[string]*StakingAssetInfo `protobuf:"bytes,1,rep,name=allStakingAssetsInfo,proto3" json:"allStakingAssetsInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryAllStakingAssetsInfoResponse) Reset()         { *m = QueryAllStakingAssetsInfoResponse{} }
func (m *QueryAllStakingAssetsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingAssetsInfoResponse) ProtoMessage()    {}
func (*QueryAllStakingAssetsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{5}
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingAssetsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingAssetsInfoResponse.Merge(m, src)
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingAssetsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingAssetsInfoResponse proto.InternalMessageInfo

func (m *QueryAllStakingAssetsInfoResponse) GetAllStakingAssetsInfo() map[string]*StakingAssetInfo {
	if m != nil {
		return m.AllStakingAssetsInfo
	}
	return nil
}

type QueryStakerAssetInfo struct {
	StakerId string `protobuf:"bytes,1,opt,name=stakerId,proto3" json:"stakerId,omitempty"`
}

func (m *QueryStakerAssetInfo) Reset()         { *m = QueryStakerAssetInfo{} }
func (m *QueryStakerAssetInfo) String() string { return proto.CompactTextString(m) }
func (*QueryStakerAssetInfo) ProtoMessage()    {}
func (*QueryStakerAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{6}
}
func (m *QueryStakerAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerAssetInfo.Merge(m, src)
}
func (m *QueryStakerAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerAssetInfo proto.InternalMessageInfo

func (m *QueryStakerAssetInfo) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

type QueryAssetInfoResponse struct {
	AssetAmounts map[string]*QueryAssetInfoResponse_ValueField `protobuf:"bytes,1,rep,name=assetAmounts,proto3" json:"assetAmounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryAssetInfoResponse) Reset()         { *m = QueryAssetInfoResponse{} }
func (m *QueryAssetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetInfoResponse) ProtoMessage()    {}
func (*QueryAssetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{7}
}
func (m *QueryAssetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetInfoResponse.Merge(m, src)
}
func (m *QueryAssetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetInfoResponse proto.InternalMessageInfo

func (m *QueryAssetInfoResponse) GetAssetAmounts() map[string]*QueryAssetInfoResponse_ValueField {
	if m != nil {
		return m.AssetAmounts
	}
	return nil
}

type QueryAssetInfoResponse_ValueField struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=Amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"Amount"`
}

func (m *QueryAssetInfoResponse_ValueField) Reset()         { *m = QueryAssetInfoResponse_ValueField{} }
func (m *QueryAssetInfoResponse_ValueField) String() string { return proto.CompactTextString(m) }
func (*QueryAssetInfoResponse_ValueField) ProtoMessage()    {}
func (*QueryAssetInfoResponse_ValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{7, 0}
}
func (m *QueryAssetInfoResponse_ValueField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetInfoResponse_ValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetInfoResponse_ValueField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetInfoResponse_ValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetInfoResponse_ValueField.Merge(m, src)
}
func (m *QueryAssetInfoResponse_ValueField) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetInfoResponse_ValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetInfoResponse_ValueField.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetInfoResponse_ValueField proto.InternalMessageInfo

type QuerySpecifiedAssetAmountReq struct {
	StakerId string `protobuf:"bytes,1,opt,name=stakerId,proto3" json:"stakerId,omitempty"`
	AssetId  string `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (m *QuerySpecifiedAssetAmountReq) Reset()         { *m = QuerySpecifiedAssetAmountReq{} }
func (m *QuerySpecifiedAssetAmountReq) String() string { return proto.CompactTextString(m) }
func (*QuerySpecifiedAssetAmountReq) ProtoMessage()    {}
func (*QuerySpecifiedAssetAmountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{8}
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecifiedAssetAmountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecifiedAssetAmountReq.Merge(m, src)
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecifiedAssetAmountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecifiedAssetAmountReq.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecifiedAssetAmountReq proto.InternalMessageInfo

func (m *QuerySpecifiedAssetAmountReq) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

func (m *QuerySpecifiedAssetAmountReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

type QuerySpecifiedAssetAmountReqResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=Amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"Amount"`
}

func (m *QuerySpecifiedAssetAmountReqResponse) Reset()         { *m = QuerySpecifiedAssetAmountReqResponse{} }
func (m *QuerySpecifiedAssetAmountReqResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpecifiedAssetAmountReqResponse) ProtoMessage()    {}
func (*QuerySpecifiedAssetAmountReqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{9}
}
func (m *QuerySpecifiedAssetAmountReqResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecifiedAssetAmountReqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecifiedAssetAmountReqResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecifiedAssetAmountReqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecifiedAssetAmountReqResponse.Merge(m, src)
}
func (m *QuerySpecifiedAssetAmountReqResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecifiedAssetAmountReqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecifiedAssetAmountReqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecifiedAssetAmountReqResponse proto.InternalMessageInfo

type QueryOperatorAssetInfos struct {
	OperatorAddr string `protobuf:"bytes,1,opt,name=operatorAddr,proto3" json:"operatorAddr,omitempty"`
}

func (m *QueryOperatorAssetInfos) Reset()         { *m = QueryOperatorAssetInfos{} }
func (m *QueryOperatorAssetInfos) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorAssetInfos) ProtoMessage()    {}
func (*QueryOperatorAssetInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{10}
}
func (m *QueryOperatorAssetInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorAssetInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorAssetInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorAssetInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorAssetInfos.Merge(m, src)
}
func (m *QueryOperatorAssetInfos) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorAssetInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorAssetInfos.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorAssetInfos proto.InternalMessageInfo

func (m *QueryOperatorAssetInfos) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

type QueryOperatorSpecifiedAssetAmountReq struct {
	OperatorAddr string `protobuf:"bytes,1,opt,name=operatorAddr,proto3" json:"operatorAddr,omitempty"`
	AssetId      string `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
}

func (m *QueryOperatorSpecifiedAssetAmountReq) Reset()         { *m = QueryOperatorSpecifiedAssetAmountReq{} }
func (m *QueryOperatorSpecifiedAssetAmountReq) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorSpecifiedAssetAmountReq) ProtoMessage()    {}
func (*QueryOperatorSpecifiedAssetAmountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{11}
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq.Merge(m, src)
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq proto.InternalMessageInfo

func (m *QueryOperatorSpecifiedAssetAmountReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *QueryOperatorSpecifiedAssetAmountReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

type QueryStakerExCoreAddr struct {
	StakerId string `protobuf:"bytes,1,opt,name=StakerId,proto3" json:"StakerId,omitempty"`
}

func (m *QueryStakerExCoreAddr) Reset()         { *m = QueryStakerExCoreAddr{} }
func (m *QueryStakerExCoreAddr) String() string { return proto.CompactTextString(m) }
func (*QueryStakerExCoreAddr) ProtoMessage()    {}
func (*QueryStakerExCoreAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{12}
}
func (m *QueryStakerExCoreAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerExCoreAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerExCoreAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerExCoreAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerExCoreAddr.Merge(m, src)
}
func (m *QueryStakerExCoreAddr) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerExCoreAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerExCoreAddr.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerExCoreAddr proto.InternalMessageInfo

func (m *QueryStakerExCoreAddr) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

type QueryStakerExCoreAddrResponse struct {
	ExCoreAddr string `protobuf:"bytes,1,opt,name=ExCoreAddr,proto3" json:"ExCoreAddr,omitempty"`
}

func (m *QueryStakerExCoreAddrResponse) Reset()         { *m = QueryStakerExCoreAddrResponse{} }
func (m *QueryStakerExCoreAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerExCoreAddrResponse) ProtoMessage()    {}
func (*QueryStakerExCoreAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d13900d4f268106, []int{13}
}
func (m *QueryStakerExCoreAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerExCoreAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerExCoreAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerExCoreAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerExCoreAddrResponse.Merge(m, src)
}
func (m *QueryStakerExCoreAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerExCoreAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerExCoreAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerExCoreAddrResponse proto.InternalMessageInfo

func (m *QueryStakerExCoreAddrResponse) GetExCoreAddr() string {
	if m != nil {
		return m.ExCoreAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryClientChainInfo)(nil), "exocore.restaking_assets_manage.v1.QueryClientChainInfo")
	proto.RegisterType((*QueryAllClientChainInfo)(nil), "exocore.restaking_assets_manage.v1.QueryAllClientChainInfo")
	proto.RegisterType((*QueryAllClientChainInfoResponse)(nil), "exocore.restaking_assets_manage.v1.QueryAllClientChainInfoResponse")
	proto.RegisterMapType((map[uint64]*ClientChainInfo)(nil), "exocore.restaking_assets_manage.v1.QueryAllClientChainInfoResponse.AllClientChainInfosEntry")
	proto.RegisterType((*QueryStakingAssetInfo)(nil), "exocore.restaking_assets_manage.v1.QueryStakingAssetInfo")
	proto.RegisterType((*QueryAllStakingAssetsInfo)(nil), "exocore.restaking_assets_manage.v1.QueryAllStakingAssetsInfo")
	proto.RegisterType((*QueryAllStakingAssetsInfoResponse)(nil), "exocore.restaking_assets_manage.v1.QueryAllStakingAssetsInfoResponse")
	proto.RegisterMapType((map[string]*StakingAssetInfo)(nil), "exocore.restaking_assets_manage.v1.QueryAllStakingAssetsInfoResponse.AllStakingAssetsInfoEntry")
	proto.RegisterType((*QueryStakerAssetInfo)(nil), "exocore.restaking_assets_manage.v1.QueryStakerAssetInfo")
	proto.RegisterType((*QueryAssetInfoResponse)(nil), "exocore.restaking_assets_manage.v1.QueryAssetInfoResponse")
	proto.RegisterMapType((map[string]*QueryAssetInfoResponse_ValueField)(nil), "exocore.restaking_assets_manage.v1.QueryAssetInfoResponse.AssetAmountsEntry")
	proto.RegisterType((*QueryAssetInfoResponse_ValueField)(nil), "exocore.restaking_assets_manage.v1.QueryAssetInfoResponse.ValueField")
	proto.RegisterType((*QuerySpecifiedAssetAmountReq)(nil), "exocore.restaking_assets_manage.v1.QuerySpecifiedAssetAmountReq")
	proto.RegisterType((*QuerySpecifiedAssetAmountReqResponse)(nil), "exocore.restaking_assets_manage.v1.QuerySpecifiedAssetAmountReqResponse")
	proto.RegisterType((*QueryOperatorAssetInfos)(nil), "exocore.restaking_assets_manage.v1.QueryOperatorAssetInfos")
	proto.RegisterType((*QueryOperatorSpecifiedAssetAmountReq)(nil), "exocore.restaking_assets_manage.v1.QueryOperatorSpecifiedAssetAmountReq")
	proto.RegisterType((*QueryStakerExCoreAddr)(nil), "exocore.restaking_assets_manage.v1.QueryStakerExCoreAddr")
	proto.RegisterType((*QueryStakerExCoreAddrResponse)(nil), "exocore.restaking_assets_manage.v1.QueryStakerExCoreAddrResponse")
}

func init() {
	proto.RegisterFile("exocore/restaking_assets_manage/v1/query.proto", fileDescriptor_6d13900d4f268106)
}

var fileDescriptor_6d13900d4f268106 = []byte{
	// 989 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0xb8, 0xb4, 0xb4, 0x6f, 0x7b, 0x28, 0xd3, 0x00, 0xce, 0xb4, 0x38, 0x61, 0x85, 0x50,
	0x04, 0xca, 0xae, 0xe2, 0xa0, 0xca, 0x0d, 0x01, 0xd5, 0x36, 0x86, 0x1a, 0x15, 0x55, 0x75, 0x2a,
	0x10, 0x1f, 0x92, 0xb5, 0xb1, 0xa7, 0xdb, 0x55, 0xec, 0x1d, 0x77, 0x67, 0x1d, 0xd9, 0x2a, 0xe5,
	0x80, 0x10, 0xe2, 0x84, 0x90, 0xca, 0xff, 0x80, 0x43, 0x0f, 0xfc, 0x84, 0x4a, 0x5c, 0xa2, 0x22,
	0x04, 0xe2, 0x50, 0x55, 0x09, 0x08, 0xfe, 0x01, 0x12, 0x27, 0xe4, 0x99, 0xfd, 0xf2, 0x7e, 0x38,
	0x6b, 0xbb, 0x1c, 0x38, 0xd9, 0x33, 0xef, 0xbc, 0x1f, 0xcf, 0xfb, 0xec, 0xbc, 0xcf, 0x2e, 0xa8,
	0x74, 0xc0, 0x5a, 0xcc, 0xa6, 0x9a, 0x4d, 0xb9, 0xa3, 0xef, 0x9a, 0x96, 0xd1, 0xd4, 0x39, 0xa7,
	0x0e, 0x6f, 0x76, 0x75, 0x4b, 0x37, 0xa8, 0xb6, 0xb7, 0xae, 0xdd, 0xee, 0x53, 0x7b, 0xa8, 0xf6,
	0x6c, 0xe6, 0x30, 0xac, 0xb8, 0xe7, 0xd5, 0x94, 0xf3, 0xea, 0xde, 0x3a, 0x59, 0x34, 0x98, 0xc1,
	0xc4, 0x71, 0x6d, 0xf4, 0x4f, 0x7a, 0x92, 0x0b, 0x06, 0x63, 0x46, 0x87, 0x6a, 0x7a, 0xcf, 0xd4,
	0x74, 0xcb, 0x62, 0x8e, 0xee, 0x98, 0xcc, 0xe2, 0xae, 0xf5, 0x7c, 0x8b, 0xf1, 0x2e, 0xe3, 0x32,
	0x57, 0x24, 0x29, 0x59, 0x92, 0xc6, 0xa6, 0x8c, 0x29, 0x17, 0xae, 0xe9, 0xd5, 0x0c, 0xf5, 0x3b,
	0x03, 0x79, 0x58, 0xb9, 0x08, 0x8b, 0xd7, 0x47, 0x61, 0xab, 0x1d, 0x93, 0x5a, 0x4e, 0xf5, 0x96,
	0x6e, 0x5a, 0x75, 0xeb, 0x26, 0xc3, 0x05, 0x80, 0x96, 0x5c, 0xb4, 0xe9, 0x20, 0x8f, 0x56, 0xd0,
	0xea, 0x53, 0x8d, 0xd0, 0x8e, 0xb2, 0x04, 0xcf, 0x0b, 0xbf, 0x72, 0xa7, 0x13, 0x71, 0x55, 0xbe,
	0xcb, 0xc1, 0x72, 0x8a, 0xad, 0x41, 0x79, 0x8f, 0x59, 0x9c, 0xe2, 0xaf, 0x11, 0x9c, 0xd3, 0x63,
	0x66, 0x9e, 0x47, 0x2b, 0xc7, 0x56, 0x4f, 0x17, 0x3f, 0x51, 0x8f, 0x6e, 0xa9, 0x7a, 0x44, 0x0a,
	0x35, 0x6e, 0xe2, 0x35, 0xcb, 0xb1, 0x87, 0x8d, 0xa4, 0xc4, 0xe4, 0x0e, 0xe4, 0xd3, 0x1c, 0xf0,
	0x59, 0x38, 0xb6, 0x4b, 0x87, 0x6e, 0x13, 0x46, 0x7f, 0x71, 0x1d, 0x8e, 0xef, 0xe9, 0x9d, 0x3e,
	0xcd, 0xe7, 0x56, 0xd0, 0xea, 0xe9, 0xe2, 0x46, 0x96, 0x7a, 0xa3, 0x75, 0xca, 0x08, 0x9b, 0xb9,
	0x12, 0x52, 0xd6, 0xe1, 0x59, 0x81, 0x66, 0x5b, 0xfa, 0x96, 0x47, 0xae, 0x82, 0x85, 0x3c, 0x3c,
	0x2d, 0xe2, 0xd4, 0xdb, 0x22, 0xfb, 0xa9, 0x86, 0xb7, 0x54, 0xce, 0xc3, 0x92, 0xd7, 0x80, 0xb0,
	0x17, 0x17, 0x0c, 0xfc, 0x90, 0x83, 0x17, 0x53, 0xad, 0x3e, 0x07, 0xf7, 0x10, 0x2c, 0xea, 0x09,
	0x07, 0x5c, 0x12, 0x9a, 0xd3, 0x90, 0x90, 0x9a, 0x45, 0x4d, 0x32, 0x4a, 0x1e, 0x12, 0x93, 0x93,
	0xbb, 0xb0, 0x94, 0xea, 0x12, 0x66, 0xe2, 0x94, 0x64, 0xe2, 0xdd, 0x71, 0x26, 0x5e, 0xcb, 0x52,
	0x74, 0xb4, 0xcd, 0x61, 0x2a, 0x8a, 0xee, 0x7d, 0x18, 0x9d, 0xa1, 0x76, 0xc0, 0x04, 0x81, 0x93,
	0x5c, 0x6c, 0xf9, 0x54, 0xf8, 0x6b, 0xe5, 0xef, 0x1c, 0x3c, 0x27, 0x1b, 0xe1, 0x47, 0xf4, 0x7a,
	0xdc, 0x83, 0x33, 0x22, 0x7d, 0xb9, 0xcb, 0xfa, 0x96, 0xe3, 0x3d, 0xdf, 0x57, 0xb3, 0xb7, 0x36,
	0x1a, 0x51, 0x2d, 0x87, 0xc2, 0xc9, 0x3e, 0x8e, 0x65, 0x20, 0x3b, 0x00, 0xef, 0x8f, 0xd0, 0xbc,
	0x6d, 0xd2, 0x4e, 0x1b, 0xdf, 0x80, 0x13, 0xd2, 0x20, 0x8b, 0xae, 0x6c, 0x3d, 0x78, 0xb4, 0xbc,
	0xf0, 0xdb, 0xa3, 0xe5, 0x97, 0x0d, 0xd3, 0xb9, 0xd5, 0xdf, 0x51, 0x5b, 0xac, 0xeb, 0x0e, 0x0f,
	0xf7, 0x67, 0x8d, 0xb7, 0x77, 0x35, 0x67, 0xd8, 0xa3, 0x5c, 0xad, 0x5b, 0xce, 0xc3, 0xfb, 0x6b,
	0xe0, 0xce, 0x96, 0xba, 0xe5, 0x34, 0xdc, 0x58, 0xe4, 0x4b, 0x04, 0xcf, 0xc4, 0xea, 0x48, 0x20,
	0xe7, 0xe3, 0x71, 0x72, 0x6a, 0x73, 0xc0, 0x0e, 0x30, 0x85, 0xd9, 0xba, 0x01, 0x17, 0x24, 0x5b,
	0x3d, 0xda, 0x32, 0x6f, 0x9a, 0xb4, 0x1d, 0xaa, 0xaa, 0x41, 0x6f, 0x4f, 0x62, 0x2d, 0x7c, 0xb7,
	0x72, 0xe3, 0x77, 0xeb, 0x53, 0x78, 0x69, 0x52, 0x54, 0x9f, 0xdc, 0xff, 0xa4, 0xb9, 0xca, 0x07,
	0xee, 0x64, 0xbd, 0xd6, 0xa3, 0xb6, 0xee, 0xb0, 0xe0, 0x19, 0xe4, 0x78, 0x0b, 0xce, 0x30, 0x6f,
	0xb7, 0xdd, 0xb6, 0xdd, 0xb4, 0xf9, 0x87, 0xf7, 0xd7, 0x16, 0xdd, 0x40, 0xa3, 0x6d, 0xca, 0xf9,
	0xb6, 0x63, 0x9b, 0x96, 0xd1, 0x18, 0x3b, 0xad, 0x7c, 0xe6, 0xc2, 0xf2, 0x02, 0xa7, 0x35, 0x6d,
	0xae, 0x2c, 0x13, 0xda, 0xba, 0x11, 0x9a, 0x72, 0xd4, 0xae, 0x0d, 0xaa, 0xcc, 0xa6, 0xc2, 0x85,
	0xc0, 0xc9, 0xed, 0x08, 0x4b, 0xde, 0x5a, 0xf9, 0x10, 0x5e, 0x48, 0x74, 0xf2, 0x49, 0x28, 0x01,
	0x04, 0xbb, 0x47, 0xd6, 0x1a, 0x3a, 0x5b, 0xfc, 0xf6, 0x2c, 0x1c, 0x17, 0xb1, 0xf1, 0xcf, 0x48,
	0x4c, 0xd3, 0xc8, 0x84, 0xae, 0x0c, 0x85, 0xd4, 0xe1, 0x52, 0xe6, 0xc7, 0x36, 0x12, 0x80, 0xcc,
	0xa2, 0x0b, 0x4a, 0xfd, 0xab, 0x3f, 0xbf, 0x7f, 0x05, 0x7d, 0xfe, 0xd3, 0xef, 0xf7, 0x72, 0x6f,
	0xe2, 0x2d, 0xef, 0x01, 0x9a, 0xa0, 0xe5, 0xe9, 0x95, 0x3f, 0x46, 0xa2, 0xe5, 0x71, 0x61, 0xc3,
	0xaf, 0xcf, 0xa1, 0xb0, 0xa4, 0xfa, 0x04, 0xe4, 0x59, 0xa9, 0x05, 0x30, 0x37, 0x71, 0x29, 0x1b,
	0xcc, 0x04, 0x20, 0x3f, 0x22, 0x38, 0x77, 0xbd, 0x4f, 0x63, 0xca, 0x79, 0x29, 0x73, 0x8d, 0x51,
	0x57, 0x32, 0x93, 0x86, 0x28, 0xd5, 0x00, 0x4f, 0x09, 0x5f, 0xcc, 0x86, 0x27, 0x56, 0xf5, 0x5f,
	0x48, 0x5c, 0xfe, 0x24, 0x01, 0xc4, 0x6f, 0xcc, 0xa5, 0xc7, 0xa4, 0xf6, 0x44, 0xe4, 0x5c, 0x79,
	0x27, 0x80, 0xb9, 0x85, 0x37, 0x33, 0xd3, 0x16, 0x87, 0xb3, 0x1f, 0x10, 0x47, 0xc3, 0x33, 0xae,
	0x34, 0x15, 0x71, 0x21, 0x57, 0xb2, 0x39, 0xbb, 0xbc, 0xcc, 0xcc, 0xde, 0x58, 0xe9, 0xff, 0x20,
	0x31, 0xac, 0xe4, 0x7e, 0xd2, 0x74, 0xc5, 0x97, 0xb3, 0x83, 0x4b, 0x1e, 0xce, 0xe4, 0xca, 0xbc,
	0x11, 0x7c, 0xc8, 0xef, 0x05, 0x90, 0x2b, 0xf8, 0xf2, 0x34, 0x90, 0x13, 0xa1, 0xfd, 0x22, 0x67,
	0x4d, 0x82, 0x6a, 0x65, 0x9f, 0x35, 0x71, 0xe7, 0xb9, 0x48, 0x9d, 0x65, 0xc4, 0x24, 0xd4, 0xff,
	0x85, 0xfc, 0x9e, 0x99, 0x24, 0x9b, 0xf8, 0xca, 0xd4, 0x18, 0xff, 0x77, 0x04, 0xff, 0x81, 0xc4,
	0xab, 0xb1, 0x27, 0xc4, 0xcc, 0x97, 0xef, 0x4b, 0x53, 0xde, 0xd8, 0x40, 0x82, 0x49, 0x79, 0x66,
	0x57, 0x1f, 0xe5, 0xb5, 0x00, 0xe5, 0x5b, 0xb8, 0x32, 0x0d, 0xca, 0x10, 0x06, 0xed, 0x8e, 0xf7,
	0xc2, 0x71, 0xb7, 0x72, 0xf5, 0xc1, 0x41, 0x01, 0xed, 0x1f, 0x14, 0xd0, 0xe3, 0x83, 0x02, 0xfa,
	0xe6, 0xb0, 0xb0, 0xb0, 0x7f, 0x58, 0x58, 0xf8, 0xf5, 0xb0, 0xb0, 0xf0, 0x51, 0x31, 0xf4, 0x5e,
	0xe7, 0x7d, 0x63, 0x0f, 0x52, 0x53, 0x89, 0xf7, 0xbc, 0x9d, 0x13, 0xe2, 0x33, 0x7b, 0xe3, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x17, 0xe5, 0xa4, 0x55, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Balance queries the balance of a single coin for a single account.
	QueClientChainInfoByIndex(ctx context.Context, in *QueryClientChainInfo, opts ...grpc.CallOption) (*ClientChainInfo, error)
	QueAllClientChainInfo(ctx context.Context, in *QueryAllClientChainInfo, opts ...grpc.CallOption) (*QueryAllClientChainInfoResponse, error)
	QueStakingAssetInfo(ctx context.Context, in *QueryStakingAssetInfo, opts ...grpc.CallOption) (*StakingAssetInfo, error)
	QueAllStakingAssetsInfo(ctx context.Context, in *QueryAllStakingAssetsInfo, opts ...grpc.CallOption) (*QueryAllStakingAssetsInfoResponse, error)
	QueStakerAssetInfos(ctx context.Context, in *QueryStakerAssetInfo, opts ...grpc.CallOption) (*QueryAssetInfoResponse, error)
	QueStakerSpecifiedAssetAmount(ctx context.Context, in *QuerySpecifiedAssetAmountReq, opts ...grpc.CallOption) (*QuerySpecifiedAssetAmountReqResponse, error)
	QueOperatorAssetInfos(ctx context.Context, in *QueryOperatorAssetInfos, opts ...grpc.CallOption) (*QueryAssetInfoResponse, error)
	QueOperatorSpecifiedAssetAmount(ctx context.Context, in *QueryOperatorSpecifiedAssetAmountReq, opts ...grpc.CallOption) (*QuerySpecifiedAssetAmountReqResponse, error)
	QueStakerExoCoreAddr(ctx context.Context, in *QueryStakerExCoreAddr, opts ...grpc.CallOption) (*QueryStakerExCoreAddrResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueClientChainInfoByIndex(ctx context.Context, in *QueryClientChainInfo, opts ...grpc.CallOption) (*ClientChainInfo, error) {
	out := new(ClientChainInfo)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueClientChainInfoByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueAllClientChainInfo(ctx context.Context, in *QueryAllClientChainInfo, opts ...grpc.CallOption) (*QueryAllClientChainInfoResponse, error) {
	out := new(QueryAllClientChainInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueAllClientChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueStakingAssetInfo(ctx context.Context, in *QueryStakingAssetInfo, opts ...grpc.CallOption) (*StakingAssetInfo, error) {
	out := new(StakingAssetInfo)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueStakingAssetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueAllStakingAssetsInfo(ctx context.Context, in *QueryAllStakingAssetsInfo, opts ...grpc.CallOption) (*QueryAllStakingAssetsInfoResponse, error) {
	out := new(QueryAllStakingAssetsInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueAllStakingAssetsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueStakerAssetInfos(ctx context.Context, in *QueryStakerAssetInfo, opts ...grpc.CallOption) (*QueryAssetInfoResponse, error) {
	out := new(QueryAssetInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueStakerAssetInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueStakerSpecifiedAssetAmount(ctx context.Context, in *QuerySpecifiedAssetAmountReq, opts ...grpc.CallOption) (*QuerySpecifiedAssetAmountReqResponse, error) {
	out := new(QuerySpecifiedAssetAmountReqResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueStakerSpecifiedAssetAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueOperatorAssetInfos(ctx context.Context, in *QueryOperatorAssetInfos, opts ...grpc.CallOption) (*QueryAssetInfoResponse, error) {
	out := new(QueryAssetInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueOperatorAssetInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueOperatorSpecifiedAssetAmount(ctx context.Context, in *QueryOperatorSpecifiedAssetAmountReq, opts ...grpc.CallOption) (*QuerySpecifiedAssetAmountReqResponse, error) {
	out := new(QuerySpecifiedAssetAmountReqResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueOperatorSpecifiedAssetAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueStakerExoCoreAddr(ctx context.Context, in *QueryStakerExCoreAddr, opts ...grpc.CallOption) (*QueryStakerExCoreAddrResponse, error) {
	out := new(QueryStakerExCoreAddrResponse)
	err := c.cc.Invoke(ctx, "/exocore.restaking_assets_manage.v1.Query/QueStakerExoCoreAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Balance queries the balance of a single coin for a single account.
	QueClientChainInfoByIndex(context.Context, *QueryClientChainInfo) (*ClientChainInfo, error)
	QueAllClientChainInfo(context.Context, *QueryAllClientChainInfo) (*QueryAllClientChainInfoResponse, error)
	QueStakingAssetInfo(context.Context, *QueryStakingAssetInfo) (*StakingAssetInfo, error)
	QueAllStakingAssetsInfo(context.Context, *QueryAllStakingAssetsInfo) (*QueryAllStakingAssetsInfoResponse, error)
	QueStakerAssetInfos(context.Context, *QueryStakerAssetInfo) (*QueryAssetInfoResponse, error)
	QueStakerSpecifiedAssetAmount(context.Context, *QuerySpecifiedAssetAmountReq) (*QuerySpecifiedAssetAmountReqResponse, error)
	QueOperatorAssetInfos(context.Context, *QueryOperatorAssetInfos) (*QueryAssetInfoResponse, error)
	QueOperatorSpecifiedAssetAmount(context.Context, *QueryOperatorSpecifiedAssetAmountReq) (*QuerySpecifiedAssetAmountReqResponse, error)
	QueStakerExoCoreAddr(context.Context, *QueryStakerExCoreAddr) (*QueryStakerExCoreAddrResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueClientChainInfoByIndex(ctx context.Context, req *QueryClientChainInfo) (*ClientChainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueClientChainInfoByIndex not implemented")
}
func (*UnimplementedQueryServer) QueAllClientChainInfo(ctx context.Context, req *QueryAllClientChainInfo) (*QueryAllClientChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueAllClientChainInfo not implemented")
}
func (*UnimplementedQueryServer) QueStakingAssetInfo(ctx context.Context, req *QueryStakingAssetInfo) (*StakingAssetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueStakingAssetInfo not implemented")
}
func (*UnimplementedQueryServer) QueAllStakingAssetsInfo(ctx context.Context, req *QueryAllStakingAssetsInfo) (*QueryAllStakingAssetsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueAllStakingAssetsInfo not implemented")
}
func (*UnimplementedQueryServer) QueStakerAssetInfos(ctx context.Context, req *QueryStakerAssetInfo) (*QueryAssetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueStakerAssetInfos not implemented")
}
func (*UnimplementedQueryServer) QueStakerSpecifiedAssetAmount(ctx context.Context, req *QuerySpecifiedAssetAmountReq) (*QuerySpecifiedAssetAmountReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueStakerSpecifiedAssetAmount not implemented")
}
func (*UnimplementedQueryServer) QueOperatorAssetInfos(ctx context.Context, req *QueryOperatorAssetInfos) (*QueryAssetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueOperatorAssetInfos not implemented")
}
func (*UnimplementedQueryServer) QueOperatorSpecifiedAssetAmount(ctx context.Context, req *QueryOperatorSpecifiedAssetAmountReq) (*QuerySpecifiedAssetAmountReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueOperatorSpecifiedAssetAmount not implemented")
}
func (*UnimplementedQueryServer) QueStakerExoCoreAddr(ctx context.Context, req *QueryStakerExCoreAddr) (*QueryStakerExCoreAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueStakerExoCoreAddr not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueClientChainInfoByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueClientChainInfoByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueClientChainInfoByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueClientChainInfoByIndex(ctx, req.(*QueryClientChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueAllClientChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClientChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueAllClientChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueAllClientChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueAllClientChainInfo(ctx, req.(*QueryAllClientChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueStakingAssetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakingAssetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueStakingAssetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueStakingAssetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueStakingAssetInfo(ctx, req.(*QueryStakingAssetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueAllStakingAssetsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakingAssetsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueAllStakingAssetsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueAllStakingAssetsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueAllStakingAssetsInfo(ctx, req.(*QueryAllStakingAssetsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueStakerAssetInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerAssetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueStakerAssetInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueStakerAssetInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueStakerAssetInfos(ctx, req.(*QueryStakerAssetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueStakerSpecifiedAssetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpecifiedAssetAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueStakerSpecifiedAssetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueStakerSpecifiedAssetAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueStakerSpecifiedAssetAmount(ctx, req.(*QuerySpecifiedAssetAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueOperatorAssetInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorAssetInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueOperatorAssetInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueOperatorAssetInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueOperatorAssetInfos(ctx, req.(*QueryOperatorAssetInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueOperatorSpecifiedAssetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorSpecifiedAssetAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueOperatorSpecifiedAssetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueOperatorSpecifiedAssetAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueOperatorSpecifiedAssetAmount(ctx, req.(*QueryOperatorSpecifiedAssetAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueStakerExoCoreAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerExCoreAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueStakerExoCoreAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.restaking_assets_manage.v1.Query/QueStakerExoCoreAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueStakerExoCoreAddr(ctx, req.(*QueryStakerExCoreAddr))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.restaking_assets_manage.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueClientChainInfoByIndex",
			Handler:    _Query_QueClientChainInfoByIndex_Handler,
		},
		{
			MethodName: "QueAllClientChainInfo",
			Handler:    _Query_QueAllClientChainInfo_Handler,
		},
		{
			MethodName: "QueStakingAssetInfo",
			Handler:    _Query_QueStakingAssetInfo_Handler,
		},
		{
			MethodName: "QueAllStakingAssetsInfo",
			Handler:    _Query_QueAllStakingAssetsInfo_Handler,
		},
		{
			MethodName: "QueStakerAssetInfos",
			Handler:    _Query_QueStakerAssetInfos_Handler,
		},
		{
			MethodName: "QueStakerSpecifiedAssetAmount",
			Handler:    _Query_QueStakerSpecifiedAssetAmount_Handler,
		},
		{
			MethodName: "QueOperatorAssetInfos",
			Handler:    _Query_QueOperatorAssetInfos_Handler,
		},
		{
			MethodName: "QueOperatorSpecifiedAssetAmount",
			Handler:    _Query_QueOperatorSpecifiedAssetAmount_Handler,
		},
		{
			MethodName: "QueStakerExoCoreAddr",
			Handler:    _Query_QueStakerExoCoreAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/restaking_assets_manage/v1/query.proto",
}

func (m *QueryClientChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClientChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllClientChainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientChainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientChainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllClientChainInfos) > 0 {
		for k := range m.AllClientChainInfos {
			v := m.AllClientChainInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakingAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingAssetsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingAssetsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingAssetsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingAssetsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingAssetsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingAssetsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllStakingAssetsInfo) > 0 {
		for k := range m.AllStakingAssetsInfo {
			v := m.AllStakingAssetsInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetAmounts) > 0 {
		for k := range m.AssetAmounts {
			v := m.AssetAmounts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetInfoResponse_ValueField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetInfoResponse_ValueField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetInfoResponse_ValueField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySpecifiedAssetAmountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecifiedAssetAmountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecifiedAssetAmountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpecifiedAssetAmountReqResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecifiedAssetAmountReqResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecifiedAssetAmountReqResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorAssetInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorAssetInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorAssetInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorSpecifiedAssetAmountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorSpecifiedAssetAmountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorSpecifiedAssetAmountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerExCoreAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerExCoreAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerExCoreAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerExCoreAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerExCoreAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerExCoreAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExCoreAddr) > 0 {
		i -= len(m.ExCoreAddr)
		copy(dAtA[i:], m.ExCoreAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExCoreAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClientChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainIndex != 0 {
		n += 1 + sovQuery(uint64(m.ChainIndex))
	}
	return n
}

func (m *QueryAllClientChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllClientChainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllClientChainInfos) > 0 {
		for k, v := range m.AllClientChainInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + sovQuery(uint64(k)) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryStakingAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakingAssetsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllStakingAssetsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllStakingAssetsInfo) > 0 {
		for k, v := range m.AllStakingAssetsInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryStakerAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetAmounts) > 0 {
		for k, v := range m.AssetAmounts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryAssetInfoResponse_ValueField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySpecifiedAssetAmountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpecifiedAssetAmountReqResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorAssetInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorSpecifiedAssetAmountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerExCoreAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerExCoreAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExCoreAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClientChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIndex", wireType)
			}
			m.ChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientChainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientChainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientChainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllClientChainInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllClientChainInfos == nil {
				m.AllClientChainInfos = make(map[uint64]*ClientChainInfo)
			}
			var mapkey uint64
			var mapvalue *ClientChainInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ClientChainInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllClientChainInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingAssetsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingAssetsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllStakingAssetsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllStakingAssetsInfo == nil {
				m.AllStakingAssetsInfo = make(map[string]*StakingAssetInfo)
			}
			var mapkey string
			var mapvalue *StakingAssetInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StakingAssetInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllStakingAssetsInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetAmounts == nil {
				m.AssetAmounts = make(map[string]*QueryAssetInfoResponse_ValueField)
			}
			var mapkey string
			var mapvalue *QueryAssetInfoResponse_ValueField
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QueryAssetInfoResponse_ValueField{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AssetAmounts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetInfoResponse_ValueField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecifiedAssetAmountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecifiedAssetAmountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecifiedAssetAmountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecifiedAssetAmountReqResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecifiedAssetAmountReqResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecifiedAssetAmountReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorAssetInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorAssetInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorAssetInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorSpecifiedAssetAmountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorSpecifiedAssetAmountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorSpecifiedAssetAmountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerExCoreAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerExCoreAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerExCoreAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerExCoreAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerExCoreAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerExCoreAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExCoreAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExCoreAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
