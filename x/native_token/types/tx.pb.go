// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/native_token/v1/tx.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorInfo_ValidatorStatus int32

const (
	ValidatorInfo_ACTIVE    ValidatorInfo_ValidatorStatus = 0
	ValidatorInfo_INACTIVE  ValidatorInfo_ValidatorStatus = 1
	ValidatorInfo_WITHDRAWN ValidatorInfo_ValidatorStatus = 2
)

var ValidatorInfo_ValidatorStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
	2: "WITHDRAWN",
}

var ValidatorInfo_ValidatorStatus_value = map[string]int32{
	"ACTIVE":    0,
	"INACTIVE":  1,
	"WITHDRAWN": 2,
}

func (x ValidatorInfo_ValidatorStatus) String() string {
	return proto.EnumName(ValidatorInfo_ValidatorStatus_name, int32(x))
}

func (ValidatorInfo_ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_769c53c072051eb9, []int{0, 0}
}

type ValidatorInfo struct {
	Status                             ValidatorInfo_ValidatorStatus          `protobuf:"varint,1,opt,name=Status,proto3,enum=exocore.native_token.v1.ValidatorInfo_ValidatorStatus" json:"Status,omitempty"`
	ValidatorIndex                     uint64                                 `protobuf:"varint,2,opt,name=ValidatorIndex,proto3" json:"ValidatorIndex,omitempty"`
	StakedBalanceGwei                  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=StakedBalanceGwei,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"StakedBalanceGwei"`
	MostRecentBalanceUpdateBlockNumber uint64                                 `protobuf:"varint,4,opt,name=MostRecentBalanceUpdateBlockNumber,proto3" json:"MostRecentBalanceUpdateBlockNumber,omitempty"`
}

func (m *ValidatorInfo) Reset()         { *m = ValidatorInfo{} }
func (m *ValidatorInfo) String() string { return proto.CompactTextString(m) }
func (*ValidatorInfo) ProtoMessage()    {}
func (*ValidatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_769c53c072051eb9, []int{0}
}
func (m *ValidatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorInfo.Merge(m, src)
}
func (m *ValidatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorInfo proto.InternalMessageInfo

func (m *ValidatorInfo) GetStatus() ValidatorInfo_ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return ValidatorInfo_ACTIVE
}

func (m *ValidatorInfo) GetValidatorIndex() uint64 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *ValidatorInfo) GetMostRecentBalanceUpdateBlockNumber() uint64 {
	if m != nil {
		return m.MostRecentBalanceUpdateBlockNumber
	}
	return 0
}

type NativeTokenStakerInfo struct {
	TotalValidatorBalances github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=TotalValidatorBalances,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"TotalValidatorBalances"`
	UnStakedValueFromPOS   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=UnStakedValueFromPOS,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"UnStakedValueFromPOS"`
	PodAddress             string                                 `protobuf:"bytes,3,opt,name=PodAddress,proto3" json:"PodAddress,omitempty"`
	ValidatorsInfo         map[string]*ValidatorInfo              `protobuf:"bytes,4,rep,name=ValidatorsInfo,proto3" json:"ValidatorsInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NativeTokenStakerInfo) Reset()         { *m = NativeTokenStakerInfo{} }
func (m *NativeTokenStakerInfo) String() string { return proto.CompactTextString(m) }
func (*NativeTokenStakerInfo) ProtoMessage()    {}
func (*NativeTokenStakerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_769c53c072051eb9, []int{1}
}
func (m *NativeTokenStakerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTokenStakerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTokenStakerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTokenStakerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTokenStakerInfo.Merge(m, src)
}
func (m *NativeTokenStakerInfo) XXX_Size() int {
	return m.Size()
}
func (m *NativeTokenStakerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTokenStakerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTokenStakerInfo proto.InternalMessageInfo

func (m *NativeTokenStakerInfo) GetPodAddress() string {
	if m != nil {
		return m.PodAddress
	}
	return ""
}

func (m *NativeTokenStakerInfo) GetValidatorsInfo() map[string]*ValidatorInfo {
	if m != nil {
		return m.ValidatorsInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("exocore.native_token.v1.ValidatorInfo_ValidatorStatus", ValidatorInfo_ValidatorStatus_name, ValidatorInfo_ValidatorStatus_value)
	proto.RegisterType((*ValidatorInfo)(nil), "exocore.native_token.v1.ValidatorInfo")
	proto.RegisterType((*NativeTokenStakerInfo)(nil), "exocore.native_token.v1.NativeTokenStakerInfo")
	proto.RegisterMapType((map[string]*ValidatorInfo)(nil), "exocore.native_token.v1.NativeTokenStakerInfo.ValidatorsInfoEntry")
}

func init() { proto.RegisterFile("exocore/native_token/v1/tx.proto", fileDescriptor_769c53c072051eb9) }

var fileDescriptor_769c53c072051eb9 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x93, 0x12, 0xd1, 0x29, 0x2d, 0x61, 0x29, 0x34, 0xe4, 0xe0, 0x46, 0x39, 0x44, 0xb9,
	0xd4, 0x56, 0x83, 0x54, 0xa1, 0xaa, 0x97, 0x18, 0x02, 0xf8, 0x80, 0x89, 0x9c, 0x34, 0x95, 0xb8,
	0x54, 0x1b, 0x7b, 0x31, 0xae, 0x7f, 0x36, 0xf2, 0x6e, 0xd2, 0xe4, 0x2d, 0x78, 0x18, 0x1e, 0xa2,
	0xc7, 0x8a, 0x13, 0xe2, 0x50, 0xa1, 0xe4, 0x1d, 0xb8, 0x82, 0xec, 0x35, 0xe0, 0x84, 0x44, 0xaa,
	0xd4, 0xd3, 0xee, 0xfc, 0x7c, 0xdf, 0xce, 0x7c, 0xb3, 0xbb, 0x50, 0x25, 0x13, 0x6a, 0xd1, 0x88,
	0xa8, 0x21, 0xe6, 0xee, 0x98, 0x9c, 0x73, 0xea, 0x91, 0x50, 0x1d, 0x1f, 0xaa, 0x7c, 0xa2, 0x0c,
	0x23, 0xca, 0x29, 0xda, 0x4b, 0x33, 0x94, 0x6c, 0x86, 0x32, 0x3e, 0xac, 0xec, 0x59, 0x94, 0x05,
	0x94, 0xa9, 0x01, 0x73, 0x62, 0x40, 0xc0, 0x1c, 0x81, 0xa8, 0x3c, 0x13, 0x81, 0xf3, 0xc4, 0x52,
	0x85, 0x91, 0x86, 0x76, 0x1d, 0xea, 0x50, 0xe1, 0x8f, 0x77, 0xc2, 0x5b, 0xfb, 0x95, 0x87, 0xed,
	0x3e, 0xf6, 0x5d, 0x1b, 0x73, 0x1a, 0xe9, 0xe1, 0x47, 0x8a, 0x0c, 0x28, 0x76, 0x39, 0xe6, 0x23,
	0x56, 0x96, 0xaa, 0x52, 0x63, 0xa7, 0x79, 0xa4, 0xac, 0xa9, 0x42, 0x59, 0xc0, 0xfd, 0xb3, 0x04,
	0xda, 0x4c, 0x59, 0x50, 0x1d, 0x76, 0x32, 0x89, 0x36, 0x99, 0x94, 0xf3, 0x55, 0xa9, 0xb1, 0x61,
	0x2e, 0x79, 0xd1, 0x05, 0x3c, 0xea, 0x72, 0xec, 0x11, 0x5b, 0xc3, 0x3e, 0x0e, 0x2d, 0xf2, 0xe6,
	0x92, 0xb8, 0xe5, 0x42, 0x55, 0x6a, 0x6c, 0x6a, 0x27, 0x57, 0x37, 0xfb, 0xb9, 0xef, 0x37, 0xfb,
	0x75, 0xc7, 0xe5, 0x9f, 0x46, 0x03, 0xc5, 0xa2, 0x41, 0xda, 0x5b, 0xba, 0x1c, 0x30, 0xdb, 0x53,
	0xf9, 0x74, 0x48, 0x98, 0xa2, 0x87, 0xfc, 0xeb, 0x97, 0x03, 0x48, 0x5b, 0xd7, 0x43, 0x6e, 0xfe,
	0x4f, 0x8b, 0x0c, 0xa8, 0xbd, 0xa3, 0x8c, 0x9b, 0xc4, 0x22, 0x21, 0x4f, 0x03, 0xa7, 0x43, 0x1b,
	0x73, 0xa2, 0xf9, 0xd4, 0xf2, 0x8c, 0x51, 0x30, 0x20, 0x51, 0x79, 0x23, 0xa9, 0xf3, 0x16, 0x99,
	0xb5, 0x63, 0x78, 0xb8, 0xd4, 0x3e, 0x02, 0x28, 0xb6, 0x5e, 0xf6, 0xf4, 0x7e, 0xbb, 0x94, 0x43,
	0x0f, 0xe0, 0xbe, 0x6e, 0xa4, 0x96, 0x84, 0xb6, 0x61, 0xf3, 0x4c, 0xef, 0xbd, 0x7d, 0x65, 0xb6,
	0xce, 0x8c, 0x52, 0xbe, 0xf6, 0xb3, 0x00, 0x4f, 0x8c, 0x44, 0xd9, 0x5e, 0x2c, 0x6c, 0x52, 0xac,
	0x98, 0x04, 0x87, 0xa7, 0x3d, 0xca, 0xb1, 0xff, 0x97, 0x3a, 0x3d, 0x5f, 0x4c, 0xe6, 0xae, 0xb2,
	0xac, 0xe1, 0x46, 0x43, 0xd8, 0x3d, 0x15, 0x55, 0xd8, 0x7d, 0xec, 0x8f, 0xc8, 0xeb, 0x88, 0x06,
	0x9d, 0xf7, 0xdd, 0x64, 0x6a, 0x77, 0x3d, 0x73, 0x25, 0x33, 0x92, 0x01, 0x3a, 0xd4, 0x6e, 0xd9,
	0x76, 0x44, 0x18, 0x13, 0x23, 0x37, 0x33, 0x1e, 0x74, 0x91, 0xb9, 0x41, 0x2c, 0x56, 0xa6, 0xbc,
	0x51, 0x2d, 0x34, 0xb6, 0x9a, 0xda, 0xda, 0x9b, 0xb9, 0x52, 0x4f, 0x65, 0x91, 0xa4, 0x1d, 0xf2,
	0x68, 0x6a, 0x2e, 0x31, 0x57, 0x5c, 0x78, 0xbc, 0x22, 0x0d, 0x95, 0xa0, 0xe0, 0x91, 0xa9, 0xd0,
	0xdd, 0x8c, 0xb7, 0xe8, 0x04, 0xee, 0x8d, 0xe3, 0x26, 0x12, 0x5d, 0xb6, 0x9a, 0xf5, 0xdb, 0xbd,
	0x12, 0x53, 0x80, 0x8e, 0xf3, 0x2f, 0x24, 0xad, 0x73, 0x35, 0x93, 0xa5, 0xeb, 0x99, 0x2c, 0xfd,
	0x98, 0xc9, 0xd2, 0xe7, 0xb9, 0x9c, 0xbb, 0x9e, 0xcb, 0xb9, 0x6f, 0x73, 0x39, 0xf7, 0xe1, 0x28,
	0x23, 0x6e, 0x5b, 0xd0, 0x1a, 0x84, 0x5f, 0xd2, 0xc8, 0x53, 0xff, 0xfc, 0x19, 0x93, 0xc5, 0x5f,
	0x23, 0x11, 0x7c, 0x50, 0x4c, 0xde, 0xf4, 0xf3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0x55,
	0x62, 0x2e, 0x5a, 0x04, 0x00, 0x00,
}

func (m *ValidatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MostRecentBalanceUpdateBlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MostRecentBalanceUpdateBlockNumber))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.StakedBalanceGwei.Size()
		i -= size
		if _, err := m.StakedBalanceGwei.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ValidatorIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidatorIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NativeTokenStakerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTokenStakerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTokenStakerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorsInfo) > 0 {
		for k := range m.ValidatorsInfo {
			v := m.ValidatorsInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTx(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PodAddress) > 0 {
		i -= len(m.PodAddress)
		copy(dAtA[i:], m.PodAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PodAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.UnStakedValueFromPOS.Size()
		i -= size
		if _, err := m.UnStakedValueFromPOS.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalValidatorBalances.Size()
		i -= size
		if _, err := m.TotalValidatorBalances.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.ValidatorIndex != 0 {
		n += 1 + sovTx(uint64(m.ValidatorIndex))
	}
	l = m.StakedBalanceGwei.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.MostRecentBalanceUpdateBlockNumber != 0 {
		n += 1 + sovTx(uint64(m.MostRecentBalanceUpdateBlockNumber))
	}
	return n
}

func (m *NativeTokenStakerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalValidatorBalances.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.UnStakedValueFromPOS.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.PodAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ValidatorsInfo) > 0 {
		for k, v := range m.ValidatorsInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTx(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValidatorInfo_ValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndex", wireType)
			}
			m.ValidatorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedBalanceGwei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedBalanceGwei.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MostRecentBalanceUpdateBlockNumber", wireType)
			}
			m.MostRecentBalanceUpdateBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MostRecentBalanceUpdateBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTokenStakerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTokenStakerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTokenStakerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorBalances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalValidatorBalances.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnStakedValueFromPOS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnStakedValueFromPOS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorsInfo == nil {
				m.ValidatorsInfo = make(map[string]*ValidatorInfo)
			}
			var mapkey string
			var mapvalue *ValidatorInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ValidatorInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ValidatorsInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
