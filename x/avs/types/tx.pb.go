// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/avs/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AVSinfo represent the information of avs
type AVSInfo struct {
	// name of avs as an arbitrary string
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// avs_address is the address of avs as a hex string
	AvsAddress string `protobuf:"bytes,2,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	// min_stake_amount is the minimum stake amount required for a task to start
	MinStakeAmount uint64 `protobuf:"varint,3,opt,name=min_stake_amount,json=minStakeAmount,proto3" json:"min_stake_amount,omitempty"`
	// task_addr is the address of task as a hex string
	TaskAddr string `protobuf:"bytes,4,opt,name=task_addr,json=taskAddr,proto3" json:"task_addr,omitempty"`
	// slash_addr is the hex address of the slashing contract for the AVS
	SlashAddr string `protobuf:"bytes,5,opt,name=slash_addr,json=slashAddr,proto3" json:"slash_addr,omitempty"`
	// reward_addr is the hex address of the reward contract for the AVS
	RewardAddr string `protobuf:"bytes,6,opt,name=reward_addr,json=rewardAddr,proto3" json:"reward_addr,omitempty"`
	// avs_owner_address are the bech32 addresses of the owners of the avs
	AvsOwnerAddress []string `protobuf:"bytes,7,rep,name=avs_owner_address,json=avsOwnerAddress,proto3" json:"avs_owner_address,omitempty"`
	// asset_ids is a list of asset_ids that the AVS accepts
	AssetIDs []string `protobuf:"bytes,8,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
	// avs_unbonding_period is the number of epochs that an operator must wait to unbond
	AvsUnbondingPeriod uint64 `protobuf:"varint,9,opt,name=avs_unbonding_period,json=avsUnbondingPeriod,proto3" json:"avs_unbonding_period,omitempty"`
	// min_self_delegation is the minimum self delegation required for an operator to join the AVS
	MinSelfDelegation uint64 `protobuf:"varint,10,opt,name=min_self_delegation,json=minSelfDelegation,proto3" json:"min_self_delegation,omitempty"`
	// epoch_identifier is the identifier from the epochs module
	EpochIdentifier string `protobuf:"bytes,11,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	// min_opt_in_operators is the minimum number of operators required for a task
	MinOptInOperators uint64 `protobuf:"varint,12,opt,name=min_opt_in_operators,json=minOptInOperators,proto3" json:"min_opt_in_operators,omitempty"`
	// min_total_stake_amount is the minimum total stake amount required for a task
	MinTotalStakeAmount uint64 `protobuf:"varint,13,opt,name=min_total_stake_amount,json=minTotalStakeAmount,proto3" json:"min_total_stake_amount,omitempty"`
	// starting_epoch is the epoch at which the AVS starts
	StartingEpoch uint64 `protobuf:"varint,14,opt,name=starting_epoch,json=startingEpoch,proto3" json:"starting_epoch,omitempty"`
	// chain_id is an optional parameter to specify the chain_id of the AVS, if any
	ChainId string `protobuf:"bytes,15,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// avs_reward defines the proportion of reward
	AvsReward github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,16,opt,name=avs_reward,json=avsReward,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"avs_reward"`
	// avs_slash defines the proportion of slash
	AvsSlash github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,17,opt,name=avs_slash,json=avsSlash,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"avs_slash"`
}

func (m *AVSInfo) Reset()         { *m = AVSInfo{} }
func (m *AVSInfo) String() string { return proto.CompactTextString(m) }
func (*AVSInfo) ProtoMessage()    {}
func (*AVSInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{0}
}
func (m *AVSInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AVSInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AVSInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AVSInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AVSInfo.Merge(m, src)
}
func (m *AVSInfo) XXX_Size() int {
	return m.Size()
}
func (m *AVSInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AVSInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AVSInfo proto.InternalMessageInfo

func (m *AVSInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AVSInfo) GetAvsAddress() string {
	if m != nil {
		return m.AvsAddress
	}
	return ""
}

func (m *AVSInfo) GetMinStakeAmount() uint64 {
	if m != nil {
		return m.MinStakeAmount
	}
	return 0
}

func (m *AVSInfo) GetTaskAddr() string {
	if m != nil {
		return m.TaskAddr
	}
	return ""
}

func (m *AVSInfo) GetSlashAddr() string {
	if m != nil {
		return m.SlashAddr
	}
	return ""
}

func (m *AVSInfo) GetRewardAddr() string {
	if m != nil {
		return m.RewardAddr
	}
	return ""
}

func (m *AVSInfo) GetAvsOwnerAddress() []string {
	if m != nil {
		return m.AvsOwnerAddress
	}
	return nil
}

func (m *AVSInfo) GetAssetIDs() []string {
	if m != nil {
		return m.AssetIDs
	}
	return nil
}

func (m *AVSInfo) GetAvsUnbondingPeriod() uint64 {
	if m != nil {
		return m.AvsUnbondingPeriod
	}
	return 0
}

func (m *AVSInfo) GetMinSelfDelegation() uint64 {
	if m != nil {
		return m.MinSelfDelegation
	}
	return 0
}

func (m *AVSInfo) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *AVSInfo) GetMinOptInOperators() uint64 {
	if m != nil {
		return m.MinOptInOperators
	}
	return 0
}

func (m *AVSInfo) GetMinTotalStakeAmount() uint64 {
	if m != nil {
		return m.MinTotalStakeAmount
	}
	return 0
}

func (m *AVSInfo) GetStartingEpoch() uint64 {
	if m != nil {
		return m.StartingEpoch
	}
	return 0
}

func (m *AVSInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// Status and proof of each operator
type OperatorStatus struct {
	// operator address
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// Status of the operator,(slash,reward,no)
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// proof data which is supplied by the contract, usually ABI-encoded
	ProofData []byte `protobuf:"bytes,3,opt,name=proof_data,json=proofData,proto3" json:"proof_data,omitempty"`
}

func (m *OperatorStatus) Reset()         { *m = OperatorStatus{} }
func (m *OperatorStatus) String() string { return proto.CompactTextString(m) }
func (*OperatorStatus) ProtoMessage()    {}
func (*OperatorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{1}
}
func (m *OperatorStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorStatus.Merge(m, src)
}
func (m *OperatorStatus) XXX_Size() int {
	return m.Size()
}
func (m *OperatorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorStatus proto.InternalMessageInfo

func (m *OperatorStatus) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *OperatorStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *OperatorStatus) GetProofData() []byte {
	if m != nil {
		return m.ProofData
	}
	return nil
}

// RewardSlashProof is the task info.
type RewardSlashProof struct {
	// task_id of task
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// contract address of avstask
	TaskContractAddress string `protobuf:"bytes,2,opt,name=task_contract_address,json=taskContractAddress,proto3" json:"task_contract_address,omitempty"`
	// aggregator  address
	Aggregator string `protobuf:"bytes,3,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	// address of avs
	AvsAddress string `protobuf:"bytes,4,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	// Status and proof of  operators
	OperatorStatus []*OperatorStatus `protobuf:"bytes,5,rep,name=operator_status,json=operatorStatus,proto3" json:"operator_status,omitempty"`
}

func (m *RewardSlashProof) Reset()         { *m = RewardSlashProof{} }
func (m *RewardSlashProof) String() string { return proto.CompactTextString(m) }
func (*RewardSlashProof) ProtoMessage()    {}
func (*RewardSlashProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{2}
}
func (m *RewardSlashProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardSlashProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardSlashProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardSlashProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardSlashProof.Merge(m, src)
}
func (m *RewardSlashProof) XXX_Size() int {
	return m.Size()
}
func (m *RewardSlashProof) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardSlashProof.DiscardUnknown(m)
}

var xxx_messageInfo_RewardSlashProof proto.InternalMessageInfo

func (m *RewardSlashProof) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RewardSlashProof) GetTaskContractAddress() string {
	if m != nil {
		return m.TaskContractAddress
	}
	return ""
}

func (m *RewardSlashProof) GetAggregator() string {
	if m != nil {
		return m.Aggregator
	}
	return ""
}

func (m *RewardSlashProof) GetAvsAddress() string {
	if m != nil {
		return m.AvsAddress
	}
	return ""
}

func (m *RewardSlashProof) GetOperatorStatus() []*OperatorStatus {
	if m != nil {
		return m.OperatorStatus
	}
	return nil
}

// TaskContractInfo is the task info.
type TaskInfo struct {
	// contract address of avstask
	TaskContractAddress string `protobuf:"bytes,1,opt,name=task_contract_address,json=taskContractAddress,proto3" json:"task_contract_address,omitempty"`
	// name of task
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// data which is supplied by the contract, usually ABI-encoded
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// task_id of task
	TaskId string `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Deadline for task response
	TaskResponsePeriod uint64 `protobuf:"varint,5,opt,name=task_response_period,json=taskResponsePeriod,proto3" json:"task_response_period,omitempty"`
	// Statistical period: threshold calculation, signature verification, nosig quantity statistics, operator submits messages corresponding to signatures
	TaskStatisticalPeriod uint64 `protobuf:"varint,6,opt,name=task_statistical_period,json=taskStatisticalPeriod,proto3" json:"task_statistical_period,omitempty"`
	// challenge period for  task
	TaskChallengePeriod uint64 `protobuf:"varint,7,opt,name=task_challenge_period,json=taskChallengePeriod,proto3" json:"task_challenge_period,omitempty"`
	// Signature threshold percentage
	ThresholdPercentage uint64 `protobuf:"varint,8,opt,name=threshold_percentage,json=thresholdPercentage,proto3" json:"threshold_percentage,omitempty"`
	// Effective current epoch, accounting for current_epoch + 1
	// and current_epoch is the integer identifier of the epoch module
	StartingEpoch uint64 `protobuf:"varint,9,opt,name=starting_epoch,json=startingEpoch,proto3" json:"starting_epoch,omitempty"`
}

func (m *TaskInfo) Reset()         { *m = TaskInfo{} }
func (m *TaskInfo) String() string { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()    {}
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{3}
}
func (m *TaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfo.Merge(m, src)
}
func (m *TaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfo proto.InternalMessageInfo

func (m *TaskInfo) GetTaskContractAddress() string {
	if m != nil {
		return m.TaskContractAddress
	}
	return ""
}

func (m *TaskInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TaskInfo) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskInfo) GetTaskResponsePeriod() uint64 {
	if m != nil {
		return m.TaskResponsePeriod
	}
	return 0
}

func (m *TaskInfo) GetTaskStatisticalPeriod() uint64 {
	if m != nil {
		return m.TaskStatisticalPeriod
	}
	return 0
}

func (m *TaskInfo) GetTaskChallengePeriod() uint64 {
	if m != nil {
		return m.TaskChallengePeriod
	}
	return 0
}

func (m *TaskInfo) GetThresholdPercentage() uint64 {
	if m != nil {
		return m.ThresholdPercentage
	}
	return 0
}

func (m *TaskInfo) GetStartingEpoch() uint64 {
	if m != nil {
		return m.StartingEpoch
	}
	return 0
}

// BlsPubKeyInfo is the task info.
type BlsPubKeyInfo struct {
	// operator address
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// the name of public keys
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the bls public keys of the operator
	PubKey []byte `protobuf:"bytes,3,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *BlsPubKeyInfo) Reset()         { *m = BlsPubKeyInfo{} }
func (m *BlsPubKeyInfo) String() string { return proto.CompactTextString(m) }
func (*BlsPubKeyInfo) ProtoMessage()    {}
func (*BlsPubKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{4}
}
func (m *BlsPubKeyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlsPubKeyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlsPubKeyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlsPubKeyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlsPubKeyInfo.Merge(m, src)
}
func (m *BlsPubKeyInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlsPubKeyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlsPubKeyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlsPubKeyInfo proto.InternalMessageInfo

func (m *BlsPubKeyInfo) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *BlsPubKeyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlsPubKeyInfo) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

// RegisterAVSTaskReq is the request to register a new task for avs.
type RegisterAVSTaskReq struct {
	// from_address is the address of the avs (sdk.AccAddress).
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// info is the task info.
	Task *TaskInfo `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (m *RegisterAVSTaskReq) Reset()         { *m = RegisterAVSTaskReq{} }
func (m *RegisterAVSTaskReq) String() string { return proto.CompactTextString(m) }
func (*RegisterAVSTaskReq) ProtoMessage()    {}
func (*RegisterAVSTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{5}
}
func (m *RegisterAVSTaskReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAVSTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAVSTaskReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAVSTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAVSTaskReq.Merge(m, src)
}
func (m *RegisterAVSTaskReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAVSTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAVSTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAVSTaskReq proto.InternalMessageInfo

// RegisterAVSTaskResponse is the response for register avs task
type RegisterAVSTaskResponse struct {
}

func (m *RegisterAVSTaskResponse) Reset()         { *m = RegisterAVSTaskResponse{} }
func (m *RegisterAVSTaskResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterAVSTaskResponse) ProtoMessage()    {}
func (*RegisterAVSTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{6}
}
func (m *RegisterAVSTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAVSTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAVSTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAVSTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAVSTaskResponse.Merge(m, src)
}
func (m *RegisterAVSTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAVSTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAVSTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAVSTaskResponse proto.InternalMessageInfo

// RegisterAVSReq is requst to register avs
type RegisterAVSReq struct {
	// from_address is the source
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// avs information
	Info *AVSInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RegisterAVSReq) Reset()         { *m = RegisterAVSReq{} }
func (m *RegisterAVSReq) String() string { return proto.CompactTextString(m) }
func (*RegisterAVSReq) ProtoMessage()    {}
func (*RegisterAVSReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{7}
}
func (m *RegisterAVSReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAVSReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAVSReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAVSReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAVSReq.Merge(m, src)
}
func (m *RegisterAVSReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAVSReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAVSReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAVSReq proto.InternalMessageInfo

func (m *RegisterAVSReq) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *RegisterAVSReq) GetInfo() *AVSInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// RegisterAVSResponse is the response for register avs
type RegisterAVSResponse struct {
	// from_address is the source
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// avs information
	Info *AVSInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RegisterAVSResponse) Reset()         { *m = RegisterAVSResponse{} }
func (m *RegisterAVSResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterAVSResponse) ProtoMessage()    {}
func (*RegisterAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{8}
}
func (m *RegisterAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAVSResponse.Merge(m, src)
}
func (m *RegisterAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAVSResponse proto.InternalMessageInfo

func (m *RegisterAVSResponse) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *RegisterAVSResponse) GetInfo() *AVSInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// DeRegisterAVSReq is requst to deregister avs
type DeRegisterAVSReq struct {
	// from_address is the source address
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// avs information
	Info *AVSInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *DeRegisterAVSReq) Reset()         { *m = DeRegisterAVSReq{} }
func (m *DeRegisterAVSReq) String() string { return proto.CompactTextString(m) }
func (*DeRegisterAVSReq) ProtoMessage()    {}
func (*DeRegisterAVSReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{9}
}
func (m *DeRegisterAVSReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeRegisterAVSReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeRegisterAVSReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeRegisterAVSReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeRegisterAVSReq.Merge(m, src)
}
func (m *DeRegisterAVSReq) XXX_Size() int {
	return m.Size()
}
func (m *DeRegisterAVSReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeRegisterAVSReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeRegisterAVSReq proto.InternalMessageInfo

func (m *DeRegisterAVSReq) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *DeRegisterAVSReq) GetInfo() *AVSInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// DeRegisterAVSResponse is requst to register avs
type DeRegisterAVSResponse struct {
	// from_address is the source address
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// avs information
	Info *AVSInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *DeRegisterAVSResponse) Reset()         { *m = DeRegisterAVSResponse{} }
func (m *DeRegisterAVSResponse) String() string { return proto.CompactTextString(m) }
func (*DeRegisterAVSResponse) ProtoMessage()    {}
func (*DeRegisterAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef1ed06249b07d86, []int{10}
}
func (m *DeRegisterAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeRegisterAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeRegisterAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeRegisterAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeRegisterAVSResponse.Merge(m, src)
}
func (m *DeRegisterAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeRegisterAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeRegisterAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeRegisterAVSResponse proto.InternalMessageInfo

func (m *DeRegisterAVSResponse) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *DeRegisterAVSResponse) GetInfo() *AVSInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*AVSInfo)(nil), "exocore.avs.v1.AVSInfo")
	proto.RegisterType((*OperatorStatus)(nil), "exocore.avs.v1.OperatorStatus")
	proto.RegisterType((*RewardSlashProof)(nil), "exocore.avs.v1.RewardSlashProof")
	proto.RegisterType((*TaskInfo)(nil), "exocore.avs.v1.TaskInfo")
	proto.RegisterType((*BlsPubKeyInfo)(nil), "exocore.avs.v1.BlsPubKeyInfo")
	proto.RegisterType((*RegisterAVSTaskReq)(nil), "exocore.avs.v1.RegisterAVSTaskReq")
	proto.RegisterType((*RegisterAVSTaskResponse)(nil), "exocore.avs.v1.RegisterAVSTaskResponse")
	proto.RegisterType((*RegisterAVSReq)(nil), "exocore.avs.v1.RegisterAVSReq")
	proto.RegisterType((*RegisterAVSResponse)(nil), "exocore.avs.v1.RegisterAVSResponse")
	proto.RegisterType((*DeRegisterAVSReq)(nil), "exocore.avs.v1.DeRegisterAVSReq")
	proto.RegisterType((*DeRegisterAVSResponse)(nil), "exocore.avs.v1.DeRegisterAVSResponse")
}

func init() { proto.RegisterFile("exocore/avs/v1/tx.proto", fileDescriptor_ef1ed06249b07d86) }

var fileDescriptor_ef1ed06249b07d86 = []byte{
	// 1210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xc1, 0x6f, 0x1b, 0xc5,
	0x17, 0xce, 0x26, 0x4e, 0x62, 0x3f, 0x27, 0x8e, 0x33, 0x4d, 0xeb, 0xad, 0xfb, 0xfb, 0xd9, 0xd6,
	0x42, 0x8b, 0x1b, 0xa8, 0xb7, 0x4d, 0x25, 0x84, 0xca, 0x29, 0x21, 0xa5, 0xb2, 0xaa, 0xd2, 0x68,
	0x1d, 0x2a, 0xc4, 0x65, 0x35, 0xf1, 0x8e, 0xd7, 0xab, 0xd8, 0x3b, 0x66, 0x67, 0xec, 0xb6, 0x9c,
	0x50, 0x4f, 0xa8, 0x42, 0x08, 0xd4, 0x1b, 0xa7, 0xfe, 0x09, 0x3d, 0x70, 0xe1, 0x3f, 0xe8, 0xb1,
	0x82, 0x0b, 0xe2, 0x50, 0xa1, 0x14, 0xa9, 0x70, 0xe0, 0xcc, 0x15, 0xcd, 0xdb, 0xd9, 0xad, 0xed,
	0xa4, 0xa9, 0x04, 0x87, 0x72, 0x49, 0x76, 0xde, 0xf7, 0xde, 0xdb, 0xef, 0x7d, 0xef, 0xbd, 0xf1,
	0x42, 0x89, 0xdd, 0xe1, 0x6d, 0x1e, 0x31, 0x9b, 0x8e, 0x84, 0x3d, 0xba, 0x64, 0xcb, 0x3b, 0x8d,
	0x41, 0xc4, 0x25, 0x27, 0x05, 0x0d, 0x34, 0xe8, 0x48, 0x34, 0x46, 0x97, 0xca, 0xab, 0xb4, 0x1f,
	0x84, 0xdc, 0xc6, 0xbf, 0xb1, 0x4b, 0xb9, 0xd4, 0xe6, 0xa2, 0xcf, 0x85, 0xdd, 0x17, 0xbe, 0x0a,
	0xed, 0x0b, 0x5f, 0x03, 0xa7, 0x63, 0xc0, 0xc5, 0x93, 0x1d, 0x1f, 0x34, 0xb4, 0xe6, 0x73, 0x9f,
	0xc7, 0x76, 0xf5, 0xa4, 0xad, 0xff, 0xf3, 0x39, 0xf7, 0x7b, 0xcc, 0xa6, 0x83, 0xc0, 0xa6, 0x61,
	0xc8, 0x25, 0x95, 0x01, 0x0f, 0x75, 0x8c, 0xf5, 0xe7, 0x3c, 0x2c, 0x6e, 0xde, 0x6a, 0x35, 0xc3,
	0x0e, 0x27, 0x04, 0x32, 0x21, 0xed, 0x33, 0xd3, 0xa8, 0x19, 0xf5, 0x9c, 0x83, 0xcf, 0xa4, 0x0a,
	0x79, 0x3a, 0x12, 0x2e, 0xf5, 0xbc, 0x88, 0x09, 0x61, 0xce, 0x22, 0x04, 0x74, 0x24, 0x36, 0x63,
	0x0b, 0xa9, 0x43, 0xb1, 0x1f, 0x84, 0xae, 0x90, 0x74, 0x9f, 0xb9, 0xb4, 0xcf, 0x87, 0xa1, 0x34,
	0xe7, 0x6a, 0x46, 0x3d, 0xe3, 0x14, 0xfa, 0x41, 0xd8, 0x52, 0xe6, 0x4d, 0xb4, 0x92, 0x33, 0x90,
	0x93, 0x54, 0xec, 0x63, 0x2e, 0x33, 0x83, 0x89, 0xb2, 0xca, 0xa0, 0x32, 0x91, 0xff, 0x03, 0x88,
	0x1e, 0x15, 0xdd, 0x18, 0x9d, 0x47, 0x34, 0x87, 0x16, 0x84, 0xab, 0x90, 0x8f, 0xd8, 0x6d, 0x1a,
	0x79, 0x31, 0xbe, 0x10, 0xd3, 0x88, 0x4d, 0xe8, 0xb0, 0x0e, 0xab, 0x8a, 0x27, 0xbf, 0x1d, 0xb2,
	0x28, 0x65, 0xbb, 0x58, 0x9b, 0xab, 0xe7, 0x9c, 0x15, 0x3a, 0x12, 0x37, 0x95, 0x3d, 0xa1, 0x7c,
	0x1e, 0x72, 0x54, 0x08, 0x26, 0xdd, 0xc0, 0x13, 0x66, 0x56, 0xf9, 0x6c, 0x2d, 0x1d, 0x3c, 0xad,
	0x66, 0x37, 0x95, 0xb1, 0xb9, 0x2d, 0x9c, 0x2c, 0xc2, 0x4d, 0x4f, 0x90, 0x8b, 0xb0, 0xa6, 0xd2,
	0x0e, 0xc3, 0x3d, 0x1e, 0x7a, 0x41, 0xe8, 0xbb, 0x03, 0x16, 0x05, 0xdc, 0x33, 0x73, 0x58, 0x21,
	0xa1, 0x23, 0xf1, 0x71, 0x02, 0xed, 0x20, 0x42, 0x1a, 0x70, 0x02, 0xf5, 0x60, 0xbd, 0x8e, 0xeb,
	0xb1, 0x1e, 0xf3, 0x51, 0x6e, 0x13, 0x30, 0x60, 0x55, 0x49, 0xc2, 0x7a, 0x9d, 0xed, 0x14, 0x20,
	0xe7, 0xa1, 0xc8, 0x06, 0xbc, 0xdd, 0x75, 0x03, 0x8f, 0x85, 0x32, 0xe8, 0x04, 0x2c, 0x32, 0xf3,
	0x58, 0xde, 0x0a, 0xda, 0x9b, 0xa9, 0x99, 0xd8, 0xb0, 0xa6, 0x52, 0xf3, 0x81, 0x74, 0xf1, 0x1f,
	0x8b, 0xa8, 0xe4, 0x91, 0x30, 0x97, 0xd2, 0xdc, 0x37, 0x07, 0xb2, 0x19, 0xde, 0x4c, 0x00, 0x72,
	0x19, 0x4e, 0xa9, 0x00, 0xc9, 0x25, 0xed, 0x4d, 0x76, 0x68, 0x19, 0x43, 0x14, 0xd3, 0x5d, 0x05,
	0x8e, 0xb7, 0xe9, 0x2c, 0x14, 0x84, 0xa4, 0x91, 0x54, 0xd5, 0x22, 0x03, 0xb3, 0x80, 0xce, 0xcb,
	0x89, 0xf5, 0xaa, 0x32, 0x92, 0xd3, 0x90, 0x6d, 0x77, 0x69, 0x10, 0xba, 0x81, 0x67, 0xae, 0x20,
	0xdf, 0x45, 0x3c, 0x37, 0x3d, 0x72, 0x03, 0xd4, 0x80, 0xb8, 0x71, 0x77, 0xcc, 0xa2, 0x02, 0xb7,
	0x1a, 0x8f, 0x9f, 0x56, 0x67, 0x7e, 0x79, 0x5a, 0x3d, 0xe7, 0x07, 0xb2, 0x3b, 0xdc, 0x6b, 0xb4,
	0x79, 0x5f, 0x0f, 0xaf, 0xfe, 0x77, 0x41, 0x78, 0xfb, 0xb6, 0xbc, 0x3b, 0x60, 0xa2, 0xb1, 0xcd,
	0xda, 0x4e, 0x8e, 0x8e, 0x84, 0x83, 0x09, 0xc8, 0x75, 0x50, 0x07, 0x17, 0x87, 0xc1, 0x5c, 0xfd,
	0x47, 0xd9, 0xb2, 0x74, 0x24, 0x5a, 0x2a, 0xde, 0x8a, 0xa0, 0x90, 0xe8, 0xd3, 0x92, 0x54, 0x0e,
	0xd5, 0x34, 0x14, 0x13, 0x29, 0xd3, 0xc1, 0x89, 0x37, 0x60, 0x25, 0xb1, 0x27, 0x83, 0x73, 0x0a,
	0x16, 0x04, 0x06, 0xe9, 0x3d, 0xd0, 0x27, 0x35, 0xbc, 0x83, 0x88, 0xf3, 0x8e, 0xeb, 0x51, 0x49,
	0x71, 0xfa, 0x97, 0x9c, 0x1c, 0x5a, 0xb6, 0xa9, 0xa4, 0xd6, 0x1f, 0x06, 0x14, 0xe3, 0x5a, 0x90,
	0xc3, 0x8e, 0x02, 0x48, 0x09, 0x16, 0x71, 0x1b, 0x02, 0x4f, 0xbf, 0x6d, 0x41, 0x1d, 0x9b, 0x1e,
	0xd9, 0x80, 0x93, 0x08, 0xb4, 0x79, 0x28, 0x23, 0xda, 0x96, 0x53, 0xbb, 0x77, 0x42, 0x81, 0x1f,
	0x68, 0x2c, 0x21, 0x56, 0x01, 0xa0, 0xbe, 0x1f, 0xa9, 0x99, 0xe2, 0x11, 0x12, 0x50, 0x4b, 0x9a,
	0x5a, 0xa6, 0xb7, 0x38, 0x73, 0x68, 0x8b, 0xaf, 0x41, 0x5a, 0xac, 0xab, 0x4b, 0x9c, 0xaf, 0xcd,
	0xd5, 0xf3, 0x1b, 0x95, 0xc6, 0xe4, 0x5d, 0xd5, 0x98, 0x54, 0xcf, 0x29, 0xf0, 0x89, 0xb3, 0xf5,
	0xd7, 0x2c, 0x64, 0x77, 0x55, 0x21, 0xea, 0x42, 0x79, 0x69, 0x29, 0xc6, 0xcb, 0x4b, 0x49, 0x2e,
	0xa1, 0xd9, 0xb1, 0x4b, 0x88, 0x40, 0xa6, 0xab, 0x9a, 0x1f, 0x2b, 0x8b, 0xcf, 0xe3, 0xfa, 0x65,
	0x26, 0xf4, 0xbb, 0x08, 0x6b, 0x08, 0x44, 0x4c, 0x0c, 0x78, 0x28, 0x58, 0xb2, 0xb2, 0xf3, 0xf1,
	0xca, 0x2a, 0xcc, 0xd1, 0x90, 0x5e, 0xd9, 0x77, 0xa1, 0x84, 0x11, 0xaa, 0xf0, 0x40, 0xc8, 0xa0,
	0x4d, 0x7b, 0x49, 0xd0, 0x02, 0x06, 0x61, 0x15, 0xad, 0x17, 0xa8, 0x8e, 0x4b, 0xcb, 0xeb, 0xd2,
	0x5e, 0x8f, 0x85, 0x7e, 0xfa, 0xaa, 0xc5, 0x78, 0xbb, 0xb0, 0xbc, 0x04, 0xd3, 0x31, 0x97, 0x60,
	0x4d, 0x76, 0x23, 0x26, 0xba, 0xbc, 0xe7, 0x29, 0xf7, 0x36, 0x0b, 0x25, 0xf5, 0x99, 0x99, 0xd5,
	0x21, 0x09, 0xb6, 0x93, 0x42, 0x47, 0x2c, 0x64, 0xee, 0x88, 0x85, 0xb4, 0x3e, 0x81, 0xe5, 0xad,
	0x9e, 0xd8, 0x19, 0xee, 0x5d, 0x67, 0x77, 0x51, 0xfd, 0x32, 0x64, 0x93, 0xe6, 0x68, 0xc1, 0xd3,
	0xf3, 0x91, 0x2a, 0x97, 0x60, 0x71, 0x30, 0xdc, 0x73, 0xf7, 0xd9, 0x5d, 0x2d, 0xf4, 0xc2, 0x00,
	0x93, 0x59, 0x3f, 0x18, 0x40, 0x1c, 0xe6, 0x07, 0x42, 0xb2, 0x68, 0xf3, 0x56, 0x6b, 0x17, 0x15,
	0xfc, 0x8c, 0xbc, 0x0f, 0x4b, 0x9d, 0x88, 0xf7, 0x27, 0x9b, 0xba, 0x65, 0xfe, 0xf8, 0xfd, 0x85,
	0x35, 0xfd, 0xb3, 0xa4, 0x7b, 0xda, 0x92, 0x51, 0x10, 0xfa, 0x4e, 0x5e, 0x79, 0x27, 0x6d, 0x7e,
	0x07, 0x32, 0x4a, 0x1e, 0x24, 0x90, 0xdf, 0x30, 0xa7, 0xa7, 0x2c, 0x19, 0x21, 0x07, 0xbd, 0xae,
	0xbc, 0xf7, 0xe5, 0xc3, 0xea, 0xcc, 0xef, 0x0f, 0xab, 0x33, 0xf7, 0x9e, 0x3f, 0x5a, 0xcf, 0x7f,
	0xf8, 0x22, 0xcf, 0xfd, 0xe7, 0x8f, 0xd6, 0xcf, 0x8c, 0xad, 0xfc, 0xee, 0xd8, 0x44, 0xa9, 0x78,
	0xeb, 0x34, 0x94, 0x0e, 0x51, 0x8f, 0x9b, 0x6f, 0x7d, 0x65, 0x40, 0x61, 0x0c, 0xfb, 0xd7, 0x25,
	0xbd, 0x0d, 0x99, 0x20, 0xec, 0x70, 0x5d, 0x52, 0x69, 0xba, 0x24, 0xfd, 0x2b, 0xeb, 0xa0, 0xd3,
	0x95, 0xe2, 0x74, 0x25, 0xd6, 0xb7, 0x06, 0x9c, 0x98, 0xa0, 0x13, 0xd3, 0x7c, 0xad, 0x9c, 0xbe,
	0x36, 0xa0, 0xb8, 0xcd, 0xfe, 0x43, 0x22, 0x3d, 0x30, 0xe0, 0xe4, 0x14, 0xa1, 0xd7, 0x2f, 0xd3,
	0xc6, 0x77, 0x73, 0x30, 0x77, 0x43, 0xf8, 0xe4, 0x73, 0xc8, 0x8f, 0x51, 0x23, 0x87, 0xee, 0xce,
	0x49, 0x21, 0xcb, 0x6f, 0x1c, 0x8b, 0xeb, 0x29, 0x3d, 0x77, 0xef, 0xa7, 0xdf, 0x1e, 0xcc, 0xd6,
	0xac, 0x8a, 0x7d, 0xe8, 0x6b, 0xd2, 0x1e, 0x7f, 0xd9, 0x3d, 0x03, 0x96, 0x27, 0x94, 0x21, 0xb5,
	0xe9, 0xf4, 0xd3, 0x9d, 0x2c, 0x9f, 0x7d, 0x85, 0x87, 0xa6, 0x50, 0x47, 0x0a, 0x96, 0x55, 0x3b,
	0x82, 0xc2, 0xe4, 0x2b, 0xef, 0x1b, 0xb0, 0x32, 0xb5, 0x6e, 0xc4, 0x3a, 0xa6, 0x4a, 0x7d, 0x95,
	0x94, 0xdf, 0x7a, 0xa5, 0x8f, 0xa6, 0xb2, 0x8e, 0x54, 0xde, 0xb4, 0xac, 0xe3, 0xd5, 0x50, 0x31,
	0xe5, 0xf9, 0x2f, 0x9e, 0x3f, 0x5a, 0x37, 0xb6, 0xae, 0x3d, 0x3e, 0xa8, 0x18, 0x4f, 0x0e, 0x2a,
	0xc6, 0xaf, 0x07, 0x15, 0xe3, 0x9b, 0x67, 0x95, 0x99, 0x27, 0xcf, 0x2a, 0x33, 0x3f, 0x3f, 0xab,
	0xcc, 0x7c, 0x7a, 0x61, 0xec, 0xeb, 0xe1, 0x6a, 0x9c, 0xee, 0x23, 0x26, 0x6f, 0xf3, 0x68, 0x3f,
	0xcd, 0x7e, 0x07, 0xf3, 0xe3, 0x87, 0xc4, 0xde, 0x02, 0x7e, 0x31, 0x5f, 0xfe, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xf0, 0xc2, 0xe7, 0x3b, 0xd7, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterAVS registers a new AVS with corresponding operator.
	RegisterAVS(ctx context.Context, in *RegisterAVSReq, opts ...grpc.CallOption) (*RegisterAVSResponse, error)
	// DelegateAssetToOperator delegates asset to operator.
	DeRegisterAVS(ctx context.Context, in *DeRegisterAVSReq, opts ...grpc.CallOption) (*DeRegisterAVSResponse, error)
	// RegisterAVSTask registers a new task.
	RegisterAVSTask(ctx context.Context, in *RegisterAVSTaskReq, opts ...grpc.CallOption) (*RegisterAVSTaskResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAVS(ctx context.Context, in *RegisterAVSReq, opts ...grpc.CallOption) (*RegisterAVSResponse, error) {
	out := new(RegisterAVSResponse)
	err := c.cc.Invoke(ctx, "/exocore.avs.v1.Msg/RegisterAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeRegisterAVS(ctx context.Context, in *DeRegisterAVSReq, opts ...grpc.CallOption) (*DeRegisterAVSResponse, error) {
	out := new(DeRegisterAVSResponse)
	err := c.cc.Invoke(ctx, "/exocore.avs.v1.Msg/DeRegisterAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterAVSTask(ctx context.Context, in *RegisterAVSTaskReq, opts ...grpc.CallOption) (*RegisterAVSTaskResponse, error) {
	out := new(RegisterAVSTaskResponse)
	err := c.cc.Invoke(ctx, "/exocore.avs.v1.Msg/RegisterAVSTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterAVS registers a new AVS with corresponding operator.
	RegisterAVS(context.Context, *RegisterAVSReq) (*RegisterAVSResponse, error)
	// DelegateAssetToOperator delegates asset to operator.
	DeRegisterAVS(context.Context, *DeRegisterAVSReq) (*DeRegisterAVSResponse, error)
	// RegisterAVSTask registers a new task.
	RegisterAVSTask(context.Context, *RegisterAVSTaskReq) (*RegisterAVSTaskResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAVS(ctx context.Context, req *RegisterAVSReq) (*RegisterAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAVS not implemented")
}
func (*UnimplementedMsgServer) DeRegisterAVS(ctx context.Context, req *DeRegisterAVSReq) (*DeRegisterAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterAVS not implemented")
}
func (*UnimplementedMsgServer) RegisterAVSTask(ctx context.Context, req *RegisterAVSTaskReq) (*RegisterAVSTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAVSTask not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAVSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.avs.v1.Msg/RegisterAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAVS(ctx, req.(*RegisterAVSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeRegisterAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegisterAVSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeRegisterAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.avs.v1.Msg/DeRegisterAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeRegisterAVS(ctx, req.(*DeRegisterAVSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterAVSTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAVSTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAVSTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.avs.v1.Msg/RegisterAVSTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAVSTask(ctx, req.(*RegisterAVSTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.avs.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAVS",
			Handler:    _Msg_RegisterAVS_Handler,
		},
		{
			MethodName: "DeRegisterAVS",
			Handler:    _Msg_DeRegisterAVS_Handler,
		},
		{
			MethodName: "RegisterAVSTask",
			Handler:    _Msg_RegisterAVSTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/avs/v1/tx.proto",
}

func (m *AVSInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AVSInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AVSInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AvsSlash.Size()
		i -= size
		if _, err := m.AvsSlash.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.AvsReward.Size()
		i -= size
		if _, err := m.AvsReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x7a
	}
	if m.StartingEpoch != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartingEpoch))
		i--
		dAtA[i] = 0x70
	}
	if m.MinTotalStakeAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinTotalStakeAmount))
		i--
		dAtA[i] = 0x68
	}
	if m.MinOptInOperators != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinOptInOperators))
		i--
		dAtA[i] = 0x60
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x5a
	}
	if m.MinSelfDelegation != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinSelfDelegation))
		i--
		dAtA[i] = 0x50
	}
	if m.AvsUnbondingPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AvsUnbondingPeriod))
		i--
		dAtA[i] = 0x48
	}
	if len(m.AssetIDs) > 0 {
		for iNdEx := len(m.AssetIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssetIDs[iNdEx])
			copy(dAtA[i:], m.AssetIDs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AssetIDs[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AvsOwnerAddress) > 0 {
		for iNdEx := len(m.AvsOwnerAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvsOwnerAddress[iNdEx])
			copy(dAtA[i:], m.AvsOwnerAddress[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AvsOwnerAddress[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RewardAddr) > 0 {
		i -= len(m.RewardAddr)
		copy(dAtA[i:], m.RewardAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SlashAddr) > 0 {
		i -= len(m.SlashAddr)
		copy(dAtA[i:], m.SlashAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SlashAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TaskAddr) > 0 {
		i -= len(m.TaskAddr)
		copy(dAtA[i:], m.TaskAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.MinStakeAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinStakeAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AvsAddress) > 0 {
		i -= len(m.AvsAddress)
		copy(dAtA[i:], m.AvsAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AvsAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofData) > 0 {
		i -= len(m.ProofData)
		copy(dAtA[i:], m.ProofData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardSlashProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardSlashProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardSlashProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorStatus) > 0 {
		for iNdEx := len(m.OperatorStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AvsAddress) > 0 {
		i -= len(m.AvsAddress)
		copy(dAtA[i:], m.AvsAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AvsAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Aggregator) > 0 {
		i -= len(m.Aggregator)
		copy(dAtA[i:], m.Aggregator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Aggregator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskContractAddress) > 0 {
		i -= len(m.TaskContractAddress)
		copy(dAtA[i:], m.TaskContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartingEpoch != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartingEpoch))
		i--
		dAtA[i] = 0x48
	}
	if m.ThresholdPercentage != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ThresholdPercentage))
		i--
		dAtA[i] = 0x40
	}
	if m.TaskChallengePeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskChallengePeriod))
		i--
		dAtA[i] = 0x38
	}
	if m.TaskStatisticalPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskStatisticalPeriod))
		i--
		dAtA[i] = 0x30
	}
	if m.TaskResponsePeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TaskResponsePeriod))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskContractAddress) > 0 {
		i -= len(m.TaskContractAddress)
		copy(dAtA[i:], m.TaskContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlsPubKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlsPubKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlsPubKeyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterAVSTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAVSTaskReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAVSTaskReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterAVSTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAVSTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAVSTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RegisterAVSReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAVSReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAVSReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeRegisterAVSReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeRegisterAVSReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeRegisterAVSReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeRegisterAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeRegisterAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeRegisterAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AVSInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AvsAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinStakeAmount != 0 {
		n += 1 + sovTx(uint64(m.MinStakeAmount))
	}
	l = len(m.TaskAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SlashAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AvsOwnerAddress) > 0 {
		for _, s := range m.AvsOwnerAddress {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AssetIDs) > 0 {
		for _, s := range m.AssetIDs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.AvsUnbondingPeriod != 0 {
		n += 1 + sovTx(uint64(m.AvsUnbondingPeriod))
	}
	if m.MinSelfDelegation != 0 {
		n += 1 + sovTx(uint64(m.MinSelfDelegation))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinOptInOperators != 0 {
		n += 1 + sovTx(uint64(m.MinOptInOperators))
	}
	if m.MinTotalStakeAmount != 0 {
		n += 1 + sovTx(uint64(m.MinTotalStakeAmount))
	}
	if m.StartingEpoch != 0 {
		n += 1 + sovTx(uint64(m.StartingEpoch))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AvsReward.Size()
	n += 2 + l + sovTx(uint64(l))
	l = m.AvsSlash.Size()
	n += 2 + l + sovTx(uint64(l))
	return n
}

func (m *OperatorStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RewardSlashProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TaskContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Aggregator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AvsAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.OperatorStatus) > 0 {
		for _, e := range m.OperatorStatus {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *TaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TaskResponsePeriod != 0 {
		n += 1 + sovTx(uint64(m.TaskResponsePeriod))
	}
	if m.TaskStatisticalPeriod != 0 {
		n += 1 + sovTx(uint64(m.TaskStatisticalPeriod))
	}
	if m.TaskChallengePeriod != 0 {
		n += 1 + sovTx(uint64(m.TaskChallengePeriod))
	}
	if m.ThresholdPercentage != 0 {
		n += 1 + sovTx(uint64(m.ThresholdPercentage))
	}
	if m.StartingEpoch != 0 {
		n += 1 + sovTx(uint64(m.StartingEpoch))
	}
	return n
}

func (m *BlsPubKeyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterAVSTaskReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterAVSTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RegisterAVSReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *DeRegisterAVSReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *DeRegisterAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AVSInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AVSInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AVSInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeAmount", wireType)
			}
			m.MinStakeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStakeAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsOwnerAddress = append(m.AvsOwnerAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetIDs = append(m.AssetIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsUnbondingPeriod", wireType)
			}
			m.AvsUnbondingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvsUnbondingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			m.MinSelfDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSelfDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOptInOperators", wireType)
			}
			m.MinOptInOperators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinOptInOperators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTotalStakeAmount", wireType)
			}
			m.MinTotalStakeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTotalStakeAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingEpoch", wireType)
			}
			m.StartingEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvsReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsSlash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvsSlash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofData = append(m.ProofData[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofData == nil {
				m.ProofData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardSlashProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardSlashProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardSlashProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorStatus = append(m.OperatorStatus, &OperatorStatus{})
			if err := m.OperatorStatus[len(m.OperatorStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskResponsePeriod", wireType)
			}
			m.TaskResponsePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskResponsePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStatisticalPeriod", wireType)
			}
			m.TaskStatisticalPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStatisticalPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskChallengePeriod", wireType)
			}
			m.TaskChallengePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskChallengePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdPercentage", wireType)
			}
			m.ThresholdPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThresholdPercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingEpoch", wireType)
			}
			m.StartingEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlsPubKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlsPubKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlsPubKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAVSTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAVSTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAVSTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &TaskInfo{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAVSTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAVSTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAVSTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAVSReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAVSReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAVSReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AVSInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AVSInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeRegisterAVSReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeRegisterAVSReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeRegisterAVSReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AVSInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeRegisterAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeRegisterAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeRegisterAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AVSInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
