// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/recent_msg.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecentMsg struct {
	Block uint64     `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	Msgs  []*MsgItem `protobuf:"bytes,2,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (m *RecentMsg) Reset()         { *m = RecentMsg{} }
func (m *RecentMsg) String() string { return proto.CompactTextString(m) }
func (*RecentMsg) ProtoMessage()    {}
func (*RecentMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa7a51ad934a6cc3, []int{0}
}
func (m *RecentMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentMsg.Merge(m, src)
}
func (m *RecentMsg) XXX_Size() int {
	return m.Size()
}
func (m *RecentMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RecentMsg proto.InternalMessageInfo

func (m *RecentMsg) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *RecentMsg) GetMsgs() []*MsgItem {
	if m != nil {
		return m.Msgs
	}
	return nil
}

type MsgItem struct {
	FeederId  int32              `protobuf:"varint,2,opt,name=feeder_id,json=feederId,proto3" json:"feeder_id,omitempty"`
	PSources  []*PriceWithSource `protobuf:"bytes,3,rep,name=p_sources,json=pSources,proto3" json:"p_sources,omitempty"`
	Validator string             `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *MsgItem) Reset()         { *m = MsgItem{} }
func (m *MsgItem) String() string { return proto.CompactTextString(m) }
func (*MsgItem) ProtoMessage()    {}
func (*MsgItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa7a51ad934a6cc3, []int{1}
}
func (m *MsgItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgItem.Merge(m, src)
}
func (m *MsgItem) XXX_Size() int {
	return m.Size()
}
func (m *MsgItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgItem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgItem proto.InternalMessageInfo

func (m *MsgItem) GetFeederId() int32 {
	if m != nil {
		return m.FeederId
	}
	return 0
}

func (m *MsgItem) GetPSources() []*PriceWithSource {
	if m != nil {
		return m.PSources
	}
	return nil
}

func (m *MsgItem) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func init() {
	proto.RegisterType((*RecentMsg)(nil), "exocore.oracle.RecentMsg")
	proto.RegisterType((*MsgItem)(nil), "exocore.oracle.MsgItem")
}

func init() { proto.RegisterFile("exocore/oracle/recent_msg.proto", fileDescriptor_fa7a51ad934a6cc3) }

var fileDescriptor_fa7a51ad934a6cc3 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0x6d, 0xaa, 0xcd, 0x0a, 0x1e, 0x16, 0xc1, 0x50, 0x65, 0x1b, 0x7a, 0x0a, 0x08,
	0x89, 0xe8, 0xd5, 0x93, 0xe0, 0xa1, 0x42, 0x8b, 0xac, 0x07, 0xc1, 0x4b, 0x48, 0x36, 0x63, 0x1a,
	0x9a, 0xb8, 0x61, 0x77, 0xab, 0xf5, 0xea, 0x2f, 0xf0, 0x67, 0x79, 0xec, 0xd1, 0xa3, 0x24, 0x7f,
	0x44, 0xdc, 0x6d, 0x11, 0x7b, 0x9b, 0x79, 0x7c, 0xef, 0xcd, 0xf0, 0xf0, 0x08, 0x56, 0x82, 0x0b,
	0x09, 0x91, 0x90, 0x09, 0x2f, 0x21, 0x92, 0xc0, 0xe1, 0x59, 0xc7, 0x95, 0xca, 0xc3, 0x5a, 0x0a,
	0x2d, 0xc8, 0xe1, 0x06, 0x08, 0x2d, 0x30, 0x1c, 0xee, 0x18, 0x6a, 0x59, 0x70, 0xb0, 0xec, 0x78,
	0x86, 0x5d, 0x66, 0xfc, 0x53, 0x95, 0x93, 0x23, 0xdc, 0x4f, 0x4b, 0xc1, 0x17, 0x1e, 0xf2, 0x51,
	0xe0, 0x30, 0xbb, 0x90, 0x33, 0xec, 0x54, 0x2a, 0x57, 0x5e, 0xd7, 0xef, 0x05, 0x07, 0x17, 0xc7,
	0xe1, 0xff, 0xf4, 0x70, 0xaa, 0xf2, 0x89, 0x86, 0x8a, 0x19, 0x68, 0xfc, 0x8e, 0xf0, 0xfe, 0x46,
	0x21, 0x27, 0xd8, 0x7d, 0x02, 0xc8, 0x40, 0xc6, 0x45, 0xe6, 0x75, 0x7d, 0x14, 0xf4, 0xd9, 0xc0,
	0x0a, 0x93, 0x8c, 0x5c, 0x61, 0xb7, 0x8e, 0x95, 0x58, 0x4a, 0x0e, 0xca, 0xeb, 0x99, 0xe8, 0xd1,
	0x6e, 0xf4, 0xdd, 0xef, 0xa3, 0x0f, 0x85, 0x9e, 0xdf, 0x1b, 0x8e, 0x0d, 0x6a, 0x3b, 0x28, 0x72,
	0x8a, 0xdd, 0x97, 0xa4, 0x2c, 0xb2, 0x44, 0x0b, 0xe9, 0x39, 0x3e, 0x0a, 0x5c, 0xf6, 0x27, 0x5c,
	0xdf, 0x7e, 0x36, 0x14, 0xad, 0x1b, 0x8a, 0xbe, 0x1b, 0x8a, 0x3e, 0x5a, 0xda, 0x59, 0xb7, 0xb4,
	0xf3, 0xd5, 0xd2, 0xce, 0xe3, 0x79, 0x5e, 0xe8, 0xf9, 0x32, 0x0d, 0xb9, 0xa8, 0xa2, 0x1b, 0x7b,
	0x6c, 0x06, 0xfa, 0x55, 0xc8, 0x45, 0xb4, 0x2d, 0x69, 0xb5, 0xad, 0x49, 0xbf, 0xd5, 0xa0, 0xd2,
	0x3d, 0xd3, 0xd3, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x0b, 0xb0, 0xb3, 0x76, 0x01,
	0x00, 0x00,
}

func (m *RecentMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecentMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecentMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Block != 0 {
		i = encodeVarintRecentMsg(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintRecentMsg(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PSources) > 0 {
		for iNdEx := len(m.PSources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PSources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRecentMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.FeederId != 0 {
		i = encodeVarintRecentMsg(dAtA, i, uint64(m.FeederId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecentMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecentMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecentMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovRecentMsg(uint64(m.Block))
	}
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovRecentMsg(uint64(l))
		}
	}
	return n
}

func (m *MsgItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeederId != 0 {
		n += 1 + sovRecentMsg(uint64(m.FeederId))
	}
	if len(m.PSources) > 0 {
		for _, e := range m.PSources {
			l = e.Size()
			n += 1 + l + sovRecentMsg(uint64(l))
		}
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovRecentMsg(uint64(l))
	}
	return n
}

func sovRecentMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecentMsg(x uint64) (n int) {
	return sovRecentMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecentMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecentMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecentMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecentMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &MsgItem{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecentMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecentMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecentMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeederId", wireType)
			}
			m.FeederId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeederId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecentMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecentMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PSources = append(m.PSources, &PriceWithSource{})
			if err := m.PSources[len(m.PSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecentMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecentMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecentMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecentMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecentMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecentMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecentMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecentMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecentMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecentMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecentMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecentMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecentMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecentMsg = fmt.Errorf("proto: unexpected end of group")
)
