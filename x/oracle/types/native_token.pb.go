// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/v1/native_token.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PriceInfo struct {
	Price   string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	Block   uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	RoundID uint64 `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *PriceInfo) Reset()         { *m = PriceInfo{} }
func (m *PriceInfo) String() string { return proto.CompactTextString(m) }
func (*PriceInfo) ProtoMessage()    {}
func (*PriceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{0}
}
func (m *PriceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceInfo.Merge(m, src)
}
func (m *PriceInfo) XXX_Size() int {
	return m.Size()
}
func (m *PriceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PriceInfo proto.InternalMessageInfo

func (m *PriceInfo) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *PriceInfo) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *PriceInfo) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

type OperatorInfo struct {
	OperatorAddr string       `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	TotalAmount  string       `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	PriceList    []*PriceInfo `protobuf:"bytes,3,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
}

func (m *OperatorInfo) Reset()         { *m = OperatorInfo{} }
func (m *OperatorInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorInfo) ProtoMessage()    {}
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{1}
}
func (m *OperatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorInfo.Merge(m, src)
}
func (m *OperatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorInfo proto.InternalMessageInfo

func (m *OperatorInfo) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *OperatorInfo) GetTotalAmount() string {
	if m != nil {
		return m.TotalAmount
	}
	return ""
}

func (m *OperatorInfo) GetPriceList() []*PriceInfo {
	if m != nil {
		return m.PriceList
	}
	return nil
}

type StakerInfo struct {
	StakerAddr      string       `protobuf:"bytes,1,opt,name=staker_addr,json=stakerAddr,proto3" json:"staker_addr,omitempty"`
	StakerIndex     int64        `protobuf:"varint,2,opt,name=staker_index,json=stakerIndex,proto3" json:"staker_index,omitempty"`
	ValidatorIndexs []uint64     `protobuf:"varint,3,rep,packed,name=validator_indexs,json=validatorIndexs,proto3" json:"validator_indexs,omitempty"`
	TotalDeposit    string       `protobuf:"bytes,4,opt,name=total_deposit,json=totalDeposit,proto3" json:"total_deposit,omitempty"`
	PriceList       []*PriceInfo `protobuf:"bytes,5,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
}

func (m *StakerInfo) Reset()         { *m = StakerInfo{} }
func (m *StakerInfo) String() string { return proto.CompactTextString(m) }
func (*StakerInfo) ProtoMessage()    {}
func (*StakerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{2}
}
func (m *StakerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerInfo.Merge(m, src)
}
func (m *StakerInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerInfo proto.InternalMessageInfo

func (m *StakerInfo) GetStakerAddr() string {
	if m != nil {
		return m.StakerAddr
	}
	return ""
}

func (m *StakerInfo) GetStakerIndex() int64 {
	if m != nil {
		return m.StakerIndex
	}
	return 0
}

func (m *StakerInfo) GetValidatorIndexs() []uint64 {
	if m != nil {
		return m.ValidatorIndexs
	}
	return nil
}

func (m *StakerInfo) GetTotalDeposit() string {
	if m != nil {
		return m.TotalDeposit
	}
	return ""
}

func (m *StakerInfo) GetPriceList() []*PriceInfo {
	if m != nil {
		return m.PriceList
	}
	return nil
}

type NativeTokenPrice struct {
	Token     string       `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PreceList []*PriceInfo `protobuf:"bytes,2,rep,name=prece_list,json=preceList,proto3" json:"prece_list,omitempty"`
}

func (m *NativeTokenPrice) Reset()         { *m = NativeTokenPrice{} }
func (m *NativeTokenPrice) String() string { return proto.CompactTextString(m) }
func (*NativeTokenPrice) ProtoMessage()    {}
func (*NativeTokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{3}
}
func (m *NativeTokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTokenPrice.Merge(m, src)
}
func (m *NativeTokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *NativeTokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTokenPrice proto.InternalMessageInfo

func (m *NativeTokenPrice) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *NativeTokenPrice) GetPreceList() []*PriceInfo {
	if m != nil {
		return m.PreceList
	}
	return nil
}

type StakerList struct {
	StakerAddrs []string `protobuf:"bytes,1,rep,name=staker_addrs,json=stakerAddrs,proto3" json:"staker_addrs,omitempty"`
}

func (m *StakerList) Reset()         { *m = StakerList{} }
func (m *StakerList) String() string { return proto.CompactTextString(m) }
func (*StakerList) ProtoMessage()    {}
func (*StakerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{4}
}
func (m *StakerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerList.Merge(m, src)
}
func (m *StakerList) XXX_Size() int {
	return m.Size()
}
func (m *StakerList) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerList.DiscardUnknown(m)
}

var xxx_messageInfo_StakerList proto.InternalMessageInfo

func (m *StakerList) GetStakerAddrs() []string {
	if m != nil {
		return m.StakerAddrs
	}
	return nil
}

type DelegationInfo struct {
	OperatorAddr string `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	Amount       string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *DelegationInfo) Reset()         { *m = DelegationInfo{} }
func (m *DelegationInfo) String() string { return proto.CompactTextString(m) }
func (*DelegationInfo) ProtoMessage()    {}
func (*DelegationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{5}
}
func (m *DelegationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationInfo.Merge(m, src)
}
func (m *DelegationInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationInfo proto.InternalMessageInfo

func (m *DelegationInfo) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *DelegationInfo) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type StakerDelegationInfo struct {
	Delegations []*DelegationInfo `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
}

func (m *StakerDelegationInfo) Reset()         { *m = StakerDelegationInfo{} }
func (m *StakerDelegationInfo) String() string { return proto.CompactTextString(m) }
func (*StakerDelegationInfo) ProtoMessage()    {}
func (*StakerDelegationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{6}
}
func (m *StakerDelegationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerDelegationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerDelegationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerDelegationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerDelegationInfo.Merge(m, src)
}
func (m *StakerDelegationInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerDelegationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerDelegationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerDelegationInfo proto.InternalMessageInfo

func (m *StakerDelegationInfo) GetDelegations() []*DelegationInfo {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func init() {
	proto.RegisterType((*PriceInfo)(nil), "exocore.oracle.v1.PriceInfo")
	proto.RegisterType((*OperatorInfo)(nil), "exocore.oracle.v1.OperatorInfo")
	proto.RegisterType((*StakerInfo)(nil), "exocore.oracle.v1.StakerInfo")
	proto.RegisterType((*NativeTokenPrice)(nil), "exocore.oracle.v1.NativeTokenPrice")
	proto.RegisterType((*StakerList)(nil), "exocore.oracle.v1.StakerList")
	proto.RegisterType((*DelegationInfo)(nil), "exocore.oracle.v1.DelegationInfo")
	proto.RegisterType((*StakerDelegationInfo)(nil), "exocore.oracle.v1.StakerDelegationInfo")
}

func init() {
	proto.RegisterFile("exocore/oracle/v1/native_token.proto", fileDescriptor_ed348d855b8fd9a8)
}

var fileDescriptor_ed348d855b8fd9a8 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x8d, 0xeb, 0xb4, 0xfd, 0x32, 0xce, 0x07, 0xc5, 0x8a, 0x90, 0x85, 0x90, 0x9b, 0x1a, 0x84,
	0xc2, 0xc5, 0xa6, 0xe5, 0xc8, 0xa9, 0x25, 0x1c, 0x82, 0xa0, 0x54, 0x86, 0x13, 0x1c, 0x2c, 0xc7,
	0xbb, 0x84, 0x55, 0x5c, 0x8f, 0xb5, 0xde, 0x84, 0xf0, 0x2f, 0x90, 0xf8, 0x53, 0x1c, 0x7b, 0xe4,
	0x02, 0x42, 0xc9, 0x1f, 0x41, 0x3b, 0x6b, 0x87, 0xb4, 0x70, 0x28, 0x37, 0xbf, 0xb7, 0xb3, 0x7e,
	0xef, 0xcd, 0xce, 0xc0, 0x7d, 0xbe, 0xc0, 0x0c, 0x25, 0x8f, 0x50, 0xa6, 0x59, 0xce, 0xa3, 0xf9,
	0x61, 0x54, 0xa4, 0x4a, 0xcc, 0x79, 0xa2, 0x70, 0xca, 0x8b, 0xb0, 0x94, 0xa8, 0xd0, 0xbd, 0x55,
	0x57, 0x85, 0xa6, 0x2a, 0x9c, 0x1f, 0xde, 0xe9, 0x4d, 0x70, 0x82, 0x74, 0x1a, 0xe9, 0x2f, 0x53,
	0x18, 0x24, 0xd0, 0x39, 0x93, 0x22, 0xe3, 0xa3, 0xe2, 0x3d, 0xba, 0x3d, 0xd8, 0x2e, 0x35, 0xf0,
	0xac, 0xbe, 0x35, 0xe8, 0xc4, 0x06, 0x68, 0x76, 0x9c, 0x63, 0x36, 0xf5, 0xb6, 0xfa, 0xd6, 0xa0,
	0x1d, 0x1b, 0xe0, 0x3e, 0x80, 0xff, 0x24, 0xce, 0x0a, 0x96, 0x08, 0xe6, 0xd9, 0xfa, 0xe0, 0xc4,
	0x59, 0xfe, 0xd8, 0xdf, 0x8d, 0x35, 0x37, 0x1a, 0xc6, 0xbb, 0x74, 0x38, 0x62, 0xc1, 0x17, 0x0b,
	0xba, 0xaf, 0x4a, 0x2e, 0x53, 0x85, 0x92, 0x44, 0xee, 0xc1, 0xff, 0x58, 0xe3, 0x24, 0x65, 0x4c,
	0xd6, 0x62, 0xdd, 0x86, 0x3c, 0x66, 0x4c, 0xba, 0x07, 0xd0, 0x55, 0xa8, 0xd2, 0x3c, 0x49, 0xcf,
	0x71, 0x56, 0x28, 0x92, 0xee, 0xc4, 0x0e, 0x71, 0xc7, 0x44, 0xb9, 0x4f, 0x00, 0xc8, 0x5f, 0x92,
	0x8b, 0x4a, 0x79, 0x76, 0xdf, 0x1e, 0x38, 0x47, 0x77, 0xc3, 0x3f, 0x72, 0x87, 0xeb, 0x78, 0x71,
	0x87, 0xea, 0x5f, 0x88, 0x4a, 0x05, 0xdf, 0x2d, 0x80, 0xd7, 0x2a, 0x9d, 0x72, 0xe3, 0x69, 0x1f,
	0x9c, 0x8a, 0xd0, 0xa6, 0x23, 0x30, 0x54, 0xe3, 0xa7, 0x2e, 0x10, 0x05, 0xe3, 0x0b, 0xf2, 0x63,
	0xc7, 0xf5, 0xa5, 0x91, 0xa6, 0xdc, 0x87, 0xb0, 0x37, 0x4f, 0x73, 0xc1, 0x28, 0x18, 0x55, 0x55,
	0xe4, 0xaa, 0x1d, 0xdf, 0x5c, 0xf3, 0x54, 0x59, 0xe9, 0x16, 0x98, 0x74, 0x8c, 0x97, 0x58, 0x09,
	0xe5, 0xb5, 0x4d, 0x0b, 0x88, 0x1c, 0x1a, 0xee, 0x4a, 0xbe, 0xed, 0x7f, 0xcb, 0xc7, 0x61, 0xef,
	0x94, 0xa6, 0xe2, 0x8d, 0x1e, 0x8a, 0xb3, 0xe6, 0x1d, 0x69, 0x44, 0x9a, 0xd7, 0x25, 0x60, 0x64,
	0x78, 0x23, 0xb3, 0x75, 0x3d, 0x19, 0x5e, 0xcb, 0x44, 0x4d, 0x17, 0x35, 0xda, 0x68, 0x92, 0xee,
	0x62, 0xe5, 0x59, 0x7d, 0x5b, 0x3f, 0xda, 0xef, 0x36, 0x56, 0xc1, 0x4b, 0xb8, 0x31, 0xe4, 0x39,
	0x9f, 0xa4, 0x4a, 0x60, 0x71, 0xfd, 0x71, 0xb8, 0x0d, 0x3b, 0x97, 0x06, 0xa1, 0x46, 0xc1, 0x3b,
	0xe8, 0x19, 0xfd, 0x2b, 0x3f, 0x7d, 0x0a, 0x0e, 0x5b, 0x33, 0xc6, 0x88, 0x73, 0x74, 0xf0, 0x97,
	0x54, 0x97, 0xef, 0xc5, 0x9b, 0xb7, 0x4e, 0x9e, 0x7f, 0x5d, 0xfa, 0xd6, 0xc5, 0xd2, 0xb7, 0x7e,
	0x2e, 0x7d, 0xeb, 0xf3, 0xca, 0x6f, 0x5d, 0xac, 0xfc, 0xd6, 0xb7, 0x95, 0xdf, 0x7a, 0xfb, 0x68,
	0x22, 0xd4, 0x87, 0xd9, 0x38, 0xcc, 0xf0, 0x3c, 0x7a, 0x66, 0xfe, 0x79, 0xca, 0xd5, 0x47, 0x94,
	0xd3, 0xa8, 0xd9, 0xce, 0x45, 0xb3, 0x9f, 0xea, 0x53, 0xc9, 0xab, 0xf1, 0x0e, 0x6d, 0xdb, 0xe3,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x83, 0x59, 0x43, 0xbe, 0x03, 0x00, 0x00,
}

func (m *PriceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundID != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.RoundID))
		i--
		dAtA[i] = 0x18
	}
	if m.Block != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceList) > 0 {
		for iNdEx := len(m.PriceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNativeToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TotalAmount) > 0 {
		i -= len(m.TotalAmount)
		copy(dAtA[i:], m.TotalAmount)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.TotalAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceList) > 0 {
		for iNdEx := len(m.PriceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNativeToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TotalDeposit) > 0 {
		i -= len(m.TotalDeposit)
		copy(dAtA[i:], m.TotalDeposit)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.TotalDeposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorIndexs) > 0 {
		dAtA2 := make([]byte, len(m.ValidatorIndexs)*10)
		var j1 int
		for _, num := range m.ValidatorIndexs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintNativeToken(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.StakerIndex != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.StakerIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakerAddr) > 0 {
		i -= len(m.StakerAddr)
		copy(dAtA[i:], m.StakerAddr)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.StakerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NativeTokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreceList) > 0 {
		for iNdEx := len(m.PreceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNativeToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerAddrs) > 0 {
		for iNdEx := len(m.StakerAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StakerAddrs[iNdEx])
			copy(dAtA[i:], m.StakerAddrs[iNdEx])
			i = encodeVarintNativeToken(dAtA, i, uint64(len(m.StakerAddrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerDelegationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerDelegationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerDelegationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNativeToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNativeToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovNativeToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PriceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovNativeToken(uint64(m.Block))
	}
	if m.RoundID != 0 {
		n += 1 + sovNativeToken(uint64(m.RoundID))
	}
	return n
}

func (m *OperatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	l = len(m.TotalAmount)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	if len(m.PriceList) > 0 {
		for _, e := range m.PriceList {
			l = e.Size()
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	return n
}

func (m *StakerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerAddr)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	if m.StakerIndex != 0 {
		n += 1 + sovNativeToken(uint64(m.StakerIndex))
	}
	if len(m.ValidatorIndexs) > 0 {
		l = 0
		for _, e := range m.ValidatorIndexs {
			l += sovNativeToken(uint64(e))
		}
		n += 1 + sovNativeToken(uint64(l)) + l
	}
	l = len(m.TotalDeposit)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	if len(m.PriceList) > 0 {
		for _, e := range m.PriceList {
			l = e.Size()
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	return n
}

func (m *NativeTokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	if len(m.PreceList) > 0 {
		for _, e := range m.PreceList {
			l = e.Size()
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	return n
}

func (m *StakerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakerAddrs) > 0 {
		for _, s := range m.StakerAddrs {
			l = len(s)
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	return n
}

func (m *DelegationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	return n
}

func (m *StakerDelegationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	return n
}

func sovNativeToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNativeToken(x uint64) (n int) {
	return sovNativeToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundID", wireType)
			}
			m.RoundID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceList = append(m.PriceList, &PriceInfo{})
			if err := m.PriceList[len(m.PriceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerIndex", wireType)
			}
			m.StakerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakerIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNativeToken
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ValidatorIndexs = append(m.ValidatorIndexs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNativeToken
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNativeToken
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNativeToken
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ValidatorIndexs) == 0 {
					m.ValidatorIndexs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNativeToken
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ValidatorIndexs = append(m.ValidatorIndexs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIndexs", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceList = append(m.PriceList, &PriceInfo{})
			if err := m.PriceList[len(m.PriceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NativeTokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreceList = append(m.PreceList, &PriceInfo{})
			if err := m.PreceList[len(m.PreceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddrs = append(m.StakerAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerDelegationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerDelegationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerDelegationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &DelegationInfo{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNativeToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNativeToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNativeToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNativeToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNativeToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNativeToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNativeToken = fmt.Errorf("proto: unexpected end of group")
)
