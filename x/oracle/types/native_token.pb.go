// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/v1/native_token.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Action defines the reason the balance changed
type BalanceInfo_Action int32

const (
	// balance updated when a new round generated
	BalanceInfo_ACTION_ROUND_UNSPECIFIED BalanceInfo_Action = 0
	// balance updated when a deposit happened
	BalanceInfo_ACTION_DEPOSIT BalanceInfo_Action = 1
	// balance updated when a withdraw happened
	BalanceInfo_ACTION_WITHDRAW BalanceInfo_Action = 2
	// balance updatd when a slah/refund on beacon chain happened
	BalanceInfo_ACTION_SLASH_REFUND BalanceInfo_Action = 3
)

var BalanceInfo_Action_name = map[int32]string{
	0: "ACTION_ROUND_UNSPECIFIED",
	1: "ACTION_DEPOSIT",
	2: "ACTION_WITHDRAW",
	3: "ACTION_SLASH_REFUND",
}

var BalanceInfo_Action_value = map[string]int32{
	"ACTION_ROUND_UNSPECIFIED": 0,
	"ACTION_DEPOSIT":           1,
	"ACTION_WITHDRAW":          2,
	"ACTION_SLASH_REFUND":      3,
}

func (x BalanceInfo_Action) String() string {
	return proto.EnumName(BalanceInfo_Action_name, int32(x))
}

func (BalanceInfo_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{0, 0}
}

// BalanceInfo tells effective-balance for native-restaking asset
type BalanceInfo struct {
	// current round of price, this is updated based on tokenFeeder
	RoundID uint64 `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	// on which block the balance updated, deposit/withdraw will update this and round_id might not change
	Block uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	// index used to distinguish multiple balanceInfo for one same roundid
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	// beaconchain epoch related to slash_refund
	// uint epoch = 3;
	Balance int64 `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
	// change tells the reason balance changed
	Change BalanceInfo_Action `protobuf:"varint,5,opt,name=change,proto3,enum=exocore.oracle.v1.BalanceInfo_Action" json:"change,omitempty"`
}

func (m *BalanceInfo) Reset()         { *m = BalanceInfo{} }
func (m *BalanceInfo) String() string { return proto.CompactTextString(m) }
func (*BalanceInfo) ProtoMessage()    {}
func (*BalanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{0}
}
func (m *BalanceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceInfo.Merge(m, src)
}
func (m *BalanceInfo) XXX_Size() int {
	return m.Size()
}
func (m *BalanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceInfo proto.InternalMessageInfo

func (m *BalanceInfo) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *BalanceInfo) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *BalanceInfo) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BalanceInfo) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *BalanceInfo) GetChange() BalanceInfo_Action {
	if m != nil {
		return m.Change
	}
	return BalanceInfo_ACTION_ROUND_UNSPECIFIED
}

// StakerInfo represents all related information for a staker of native-restaking
type StakerInfo struct {
	// staker's address
	StakerAddr string `protobuf:"bytes,1,opt,name=staker_addr,json=stakerAddr,proto3" json:"staker_addr,omitempty"`
	// the index of corresponding staker in staker list
	StakerIndex int64 `protobuf:"varint,2,opt,name=staker_index,json=stakerIndex,proto3" json:"staker_index,omitempty"`
	// list of validators that this staker corresponding to on beacon chain
	ValidatorPubkeyList []string `protobuf:"bytes,3,rep,name=validator_pubkey_list,json=validatorPubkeyList,proto3" json:"validator_pubkey_list,omitempty"`
	// list of balances to represets the history of this staker
	BalanceList []*BalanceInfo `protobuf:"bytes,4,rep,name=balance_list,json=balanceList,proto3" json:"balance_list,omitempty"`
}

func (m *StakerInfo) Reset()         { *m = StakerInfo{} }
func (m *StakerInfo) String() string { return proto.CompactTextString(m) }
func (*StakerInfo) ProtoMessage()    {}
func (*StakerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{1}
}
func (m *StakerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerInfo.Merge(m, src)
}
func (m *StakerInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerInfo proto.InternalMessageInfo

func (m *StakerInfo) GetStakerAddr() string {
	if m != nil {
		return m.StakerAddr
	}
	return ""
}

func (m *StakerInfo) GetStakerIndex() int64 {
	if m != nil {
		return m.StakerIndex
	}
	return 0
}

func (m *StakerInfo) GetValidatorPubkeyList() []string {
	if m != nil {
		return m.ValidatorPubkeyList
	}
	return nil
}

func (m *StakerInfo) GetBalanceList() []*BalanceInfo {
	if m != nil {
		return m.BalanceList
	}
	return nil
}

// StakerList tells which stakers are active for one specific native-restaking asset
type StakerList struct {
	// staker's address
	StakerAddrs []string `protobuf:"bytes,1,rep,name=staker_addrs,json=stakerAddrs,proto3" json:"staker_addrs,omitempty"`
}

func (m *StakerList) Reset()         { *m = StakerList{} }
func (m *StakerList) String() string { return proto.CompactTextString(m) }
func (*StakerList) ProtoMessage()    {}
func (*StakerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed348d855b8fd9a8, []int{2}
}
func (m *StakerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerList.Merge(m, src)
}
func (m *StakerList) XXX_Size() int {
	return m.Size()
}
func (m *StakerList) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerList.DiscardUnknown(m)
}

var xxx_messageInfo_StakerList proto.InternalMessageInfo

func (m *StakerList) GetStakerAddrs() []string {
	if m != nil {
		return m.StakerAddrs
	}
	return nil
}

func init() {
	proto.RegisterEnum("exocore.oracle.v1.BalanceInfo_Action", BalanceInfo_Action_name, BalanceInfo_Action_value)
	proto.RegisterType((*BalanceInfo)(nil), "exocore.oracle.v1.BalanceInfo")
	proto.RegisterType((*StakerInfo)(nil), "exocore.oracle.v1.StakerInfo")
	proto.RegisterType((*StakerList)(nil), "exocore.oracle.v1.StakerList")
}

func init() {
	proto.RegisterFile("exocore/oracle/v1/native_token.proto", fileDescriptor_ed348d855b8fd9a8)
}

var fileDescriptor_ed348d855b8fd9a8 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xc4, 0x69, 0xf2, 0x75, 0x5c, 0xf5, 0x0b, 0x93, 0x22, 0x2c, 0x84, 0x5c, 0x13, 0x01,
	0xf2, 0xca, 0xa6, 0x61, 0xcd, 0xc2, 0xa9, 0x5d, 0xd5, 0xa8, 0x72, 0xa2, 0x71, 0xa2, 0x4a, 0x6c,
	0x2c, 0xff, 0x0c, 0x89, 0x65, 0xe3, 0x89, 0xec, 0x49, 0x48, 0xdf, 0x82, 0x87, 0xe0, 0x5d, 0x60,
	0xd9, 0x25, 0x2b, 0x84, 0x92, 0x17, 0x41, 0x9e, 0x71, 0x28, 0x12, 0x12, 0xbb, 0xb9, 0xe7, 0x9c,
	0x3b, 0xf7, 0x9e, 0xa3, 0x0b, 0x5f, 0x90, 0x2d, 0x8d, 0x69, 0x49, 0x4c, 0x5a, 0x86, 0x71, 0x4e,
	0xcc, 0xcd, 0x85, 0x59, 0x84, 0x2c, 0xdd, 0x90, 0x80, 0xd1, 0x8c, 0x14, 0xc6, 0xaa, 0xa4, 0x8c,
	0xa2, 0x47, 0x8d, 0xca, 0x10, 0x2a, 0x63, 0x73, 0xf1, 0xf4, 0x6c, 0x41, 0x17, 0x94, 0xb3, 0x66,
	0xfd, 0x12, 0xc2, 0xe1, 0x97, 0x36, 0x94, 0xc7, 0x61, 0x1e, 0x16, 0x31, 0x71, 0x8b, 0x0f, 0x14,
	0xbd, 0x82, 0xff, 0x95, 0x74, 0x5d, 0x24, 0x41, 0x9a, 0x28, 0x40, 0x03, 0x7a, 0x67, 0x2c, 0xef,
	0x7e, 0x9c, 0xf7, 0x70, 0x8d, 0xb9, 0x36, 0xee, 0x71, 0xd2, 0x4d, 0xd0, 0x19, 0x3c, 0x8a, 0x72,
	0x1a, 0x67, 0x4a, 0xbb, 0x16, 0x61, 0x51, 0xd4, 0x68, 0x5a, 0x24, 0x64, 0xab, 0x48, 0x02, 0xe5,
	0x05, 0x52, 0x60, 0x2f, 0x12, 0x23, 0x94, 0x8e, 0x06, 0x74, 0x09, 0x1f, 0x4a, 0xf4, 0x16, 0x76,
	0xe3, 0x65, 0x58, 0x2c, 0x88, 0x72, 0xa4, 0x01, 0xfd, 0x74, 0xf4, 0xd2, 0xf8, 0x6b, 0x6f, 0xe3,
	0x8f, 0xed, 0x0c, 0x2b, 0x66, 0x29, 0x2d, 0x70, 0xd3, 0x34, 0x5c, 0xc2, 0xae, 0x40, 0xd0, 0x33,
	0xa8, 0x58, 0x97, 0x33, 0x77, 0xe2, 0x05, 0x78, 0x32, 0xf7, 0xec, 0x60, 0xee, 0xf9, 0x53, 0xe7,
	0xd2, 0xbd, 0x72, 0x1d, 0xbb, 0xdf, 0x42, 0x08, 0x9e, 0x36, 0xac, 0xed, 0x4c, 0x27, 0xbe, 0x3b,
	0xeb, 0x03, 0x34, 0x80, 0xff, 0x37, 0xd8, 0xad, 0x3b, 0xbb, 0xb6, 0xb1, 0x75, 0xdb, 0x6f, 0xa3,
	0x27, 0x70, 0xd0, 0x80, 0xfe, 0x8d, 0xe5, 0x5f, 0x07, 0xd8, 0xb9, 0x9a, 0x7b, 0x76, 0x5f, 0x1a,
	0x7e, 0x05, 0x10, 0xfa, 0x2c, 0xcc, 0x48, 0xc9, 0x53, 0x3a, 0x87, 0x72, 0xc5, 0xab, 0x20, 0x4c,
	0x92, 0x92, 0x07, 0x75, 0x8c, 0xa1, 0x80, 0xac, 0x24, 0x29, 0xd1, 0x73, 0x78, 0xd2, 0x08, 0x44,
	0x1e, 0x6d, 0xee, 0xbb, 0x69, 0x72, 0x79, 0x2a, 0x23, 0xf8, 0x78, 0x13, 0xe6, 0x69, 0x12, 0x32,
	0x5a, 0x06, 0xab, 0x75, 0x94, 0x91, 0xbb, 0x20, 0x4f, 0x2b, 0xa6, 0x48, 0x9a, 0xa4, 0x1f, 0xe3,
	0xc1, 0x6f, 0x72, 0xca, 0xb9, 0x9b, 0xb4, 0x62, 0xc8, 0x82, 0x27, 0x4d, 0x74, 0x42, 0xda, 0xd1,
	0x24, 0x5d, 0x1e, 0xa9, 0xff, 0x4e, 0x0d, 0xcb, 0x4d, 0x4f, 0xfd, 0xc5, 0xd0, 0x3c, 0x18, 0xe1,
	0x1f, 0x3e, 0xec, 0x59, 0x1b, 0xa9, 0x14, 0xc0, 0x67, 0xcb, 0x0f, 0x4e, 0xaa, 0xf1, 0xbb, 0x6f,
	0x3b, 0x15, 0xdc, 0xef, 0x54, 0xf0, 0x73, 0xa7, 0x82, 0xcf, 0x7b, 0xb5, 0x75, 0xbf, 0x57, 0x5b,
	0xdf, 0xf7, 0x6a, 0xeb, 0xfd, 0xeb, 0x45, 0xca, 0x96, 0xeb, 0xc8, 0x88, 0xe9, 0x47, 0xd3, 0x11,
	0x1b, 0x78, 0x84, 0x7d, 0xa2, 0x65, 0x66, 0x1e, 0x8e, 0x74, 0x7b, 0x38, 0x53, 0x76, 0xb7, 0x22,
	0x55, 0xd4, 0xe5, 0x47, 0xf7, 0xe6, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xde, 0x1f, 0x03, 0x24,
	0xc5, 0x02, 0x00, 0x00,
}

func (m *BalanceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.Change))
		i--
		dAtA[i] = 0x28
	}
	if m.Balance != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x20
	}
	if m.Index != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.Block != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if m.RoundID != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.RoundID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceList) > 0 {
		for iNdEx := len(m.BalanceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNativeToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ValidatorPubkeyList) > 0 {
		for iNdEx := len(m.ValidatorPubkeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorPubkeyList[iNdEx])
			copy(dAtA[i:], m.ValidatorPubkeyList[iNdEx])
			i = encodeVarintNativeToken(dAtA, i, uint64(len(m.ValidatorPubkeyList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.StakerIndex != 0 {
		i = encodeVarintNativeToken(dAtA, i, uint64(m.StakerIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StakerAddr) > 0 {
		i -= len(m.StakerAddr)
		copy(dAtA[i:], m.StakerAddr)
		i = encodeVarintNativeToken(dAtA, i, uint64(len(m.StakerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerAddrs) > 0 {
		for iNdEx := len(m.StakerAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StakerAddrs[iNdEx])
			copy(dAtA[i:], m.StakerAddrs[iNdEx])
			i = encodeVarintNativeToken(dAtA, i, uint64(len(m.StakerAddrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNativeToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovNativeToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BalanceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoundID != 0 {
		n += 1 + sovNativeToken(uint64(m.RoundID))
	}
	if m.Block != 0 {
		n += 1 + sovNativeToken(uint64(m.Block))
	}
	if m.Index != 0 {
		n += 1 + sovNativeToken(uint64(m.Index))
	}
	if m.Balance != 0 {
		n += 1 + sovNativeToken(uint64(m.Balance))
	}
	if m.Change != 0 {
		n += 1 + sovNativeToken(uint64(m.Change))
	}
	return n
}

func (m *StakerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerAddr)
	if l > 0 {
		n += 1 + l + sovNativeToken(uint64(l))
	}
	if m.StakerIndex != 0 {
		n += 1 + sovNativeToken(uint64(m.StakerIndex))
	}
	if len(m.ValidatorPubkeyList) > 0 {
		for _, s := range m.ValidatorPubkeyList {
			l = len(s)
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	if len(m.BalanceList) > 0 {
		for _, e := range m.BalanceList {
			l = e.Size()
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	return n
}

func (m *StakerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakerAddrs) > 0 {
		for _, s := range m.StakerAddrs {
			l = len(s)
			n += 1 + l + sovNativeToken(uint64(l))
		}
	}
	return n
}

func sovNativeToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNativeToken(x uint64) (n int) {
	return sovNativeToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BalanceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundID", wireType)
			}
			m.RoundID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= BalanceInfo_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerIndex", wireType)
			}
			m.StakerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakerIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPubkeyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorPubkeyList = append(m.ValidatorPubkeyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceList = append(m.BalanceList, &BalanceInfo{})
			if err := m.BalanceList[len(m.BalanceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNativeToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNativeToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddrs = append(m.StakerAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNativeToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNativeToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNativeToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNativeToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNativeToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNativeToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNativeToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNativeToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNativeToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNativeToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNativeToken = fmt.Errorf("proto: unexpected end of group")
)
