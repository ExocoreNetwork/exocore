// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// chains represents the blockchains info
	Chains []*Chain `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains,omitempty"`
	// tokens info
	Tokens []*Token `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
	// sources info from where the price data would be fetched
	Sources []*Source `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty"`
	// rules specified on how to decide the provided price source to be accept
	Rules []*RuleSource `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	// each tokenFeeder represents an active token whose price being updated
	TokenFeeders []*TokenFeeder `protobuf:"bytes,5,rep,name=token_feeders,json=tokenFeeders,proto3" json:"token_feeders,omitempty"`
	// for each round allow at most max_nonce transactions to be sent by one validator, [1,max_nonce]
	MaxNonce int32 `protobuf:"varint,6,opt,name=max_nonce,json=maxNonce,proto3" json:"max_nonce,omitempty"`
	// voting power need to reach more than threshold_a/threshold_b
	ThresholdA int32 `protobuf:"varint,7,opt,name=threshold_a,json=thresholdA,proto3" json:"threshold_a,omitempty"`
	// voting power need to reach more than threshold_a/threshold_b
	ThresholdB int32 `protobuf:"varint,8,opt,name=threshold_b,json=thresholdB,proto3" json:"threshold_b,omitempty"`
	// for v1, mode=1, get final price as soon as voting power reach threshold_a/threshold_b
	Mode int32 `protobuf:"varint,9,opt,name=mode,proto3" json:"mode,omitempty"`
	// for each round, a validator only allowed to provide at most max_det_id continuos rounds of prices for DS
	MaxDetId int32 `protobuf:"varint,10,opt,name=max_det_id,json=maxDetId,proto3" json:"max_det_id,omitempty"`
	// for each token, only keep max_size_prices round of prices
	MaxSizePrices int32 `protobuf:"varint,11,opt,name=max_size_prices,json=maxSizePrices,proto3" json:"max_size_prices,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_72f39bba4594b794, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetChains() []*Chain {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *Params) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *Params) GetSources() []*Source {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *Params) GetRules() []*RuleSource {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Params) GetTokenFeeders() []*TokenFeeder {
	if m != nil {
		return m.TokenFeeders
	}
	return nil
}

func (m *Params) GetMaxNonce() int32 {
	if m != nil {
		return m.MaxNonce
	}
	return 0
}

func (m *Params) GetThresholdA() int32 {
	if m != nil {
		return m.ThresholdA
	}
	return 0
}

func (m *Params) GetThresholdB() int32 {
	if m != nil {
		return m.ThresholdB
	}
	return 0
}

func (m *Params) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Params) GetMaxDetId() int32 {
	if m != nil {
		return m.MaxDetId
	}
	return 0
}

func (m *Params) GetMaxSizePrices() int32 {
	if m != nil {
		return m.MaxSizePrices
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "exocore.oracle.v1.Params")
}

func init() { proto.RegisterFile("exocore/oracle/v1/params.proto", fileDescriptor_72f39bba4594b794) }

var fileDescriptor_72f39bba4594b794 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x6d, 0x92, 0xb8, 0xed, 0x85, 0x0a, 0x71, 0x62, 0x38, 0x4a, 0xb9, 0x56, 0x08, 0xa1,
	0x4e, 0x76, 0x4b, 0x36, 0x36, 0x1a, 0x40, 0x82, 0x21, 0x8a, 0x1c, 0x26, 0x16, 0xeb, 0x62, 0xbf,
	0xc4, 0x56, 0x6c, 0x9f, 0x75, 0x77, 0x0e, 0x26, 0x9f, 0x82, 0x91, 0x91, 0x8f, 0xc3, 0x98, 0x11,
	0x31, 0xa1, 0xe4, 0x8b, 0xa0, 0x3b, 0x3b, 0x01, 0x9a, 0x64, 0x7b, 0xf7, 0xfe, 0xbf, 0x9f, 0xde,
	0xe9, 0xe9, 0x21, 0x0a, 0x15, 0x0f, 0xb9, 0x00, 0x8f, 0x0b, 0x16, 0xa6, 0xe0, 0xcd, 0x6f, 0xbc,
	0x82, 0x09, 0x96, 0x49, 0xb7, 0x10, 0x5c, 0x71, 0xfc, 0xb0, 0xc9, 0xdd, 0x3a, 0x77, 0xe7, 0x37,
	0x67, 0xe7, 0xbb, 0x4a, 0x92, 0x4f, 0x78, 0x2d, 0x9c, 0x3d, 0xdf, 0x4d, 0x15, 0x9f, 0x41, 0x1e,
	0x4c, 0x00, 0x22, 0x10, 0x0d, 0xf5, 0x68, 0xca, 0xa7, 0xdc, 0x94, 0x9e, 0xae, 0xea, 0xee, 0xb3,
	0x5f, 0x2d, 0xe4, 0x0c, 0xcd, 0x74, 0x7c, 0x8d, 0x9c, 0x30, 0x66, 0x49, 0x2e, 0x89, 0x7d, 0xd9,
	0xba, 0xea, 0xbe, 0x24, 0xee, 0xce, 0x47, 0xdc, 0xbe, 0x06, 0xfc, 0x86, 0xd3, 0x86, 0x19, 0x24,
	0xc9, 0xbd, 0x83, 0xc6, 0x47, 0x0d, 0xf8, 0x0d, 0x87, 0x7b, 0xe8, 0x48, 0xf2, 0x52, 0x84, 0x20,
	0x49, 0xcb, 0x28, 0x8f, 0xf7, 0x28, 0x23, 0x43, 0xf8, 0x1b, 0x12, 0xf7, 0x50, 0x47, 0x94, 0x29,
	0x48, 0xd2, 0x36, 0xca, 0xd3, 0x3d, 0x8a, 0x5f, 0xa6, 0xd0, 0x68, 0x35, 0x8b, 0xfb, 0xe8, 0xf4,
	0xdf, 0x25, 0x48, 0xd2, 0x31, 0x32, 0x3d, 0xf4, 0xc5, 0x77, 0x06, 0xf3, 0xef, 0xab, 0xbf, 0x0f,
	0x89, 0x9f, 0xa0, 0x93, 0x8c, 0x55, 0x41, 0xce, 0xf3, 0x10, 0x88, 0x73, 0x69, 0x5f, 0x75, 0xfc,
	0xe3, 0x8c, 0x55, 0x03, 0xfd, 0xc6, 0x17, 0xa8, 0xab, 0x62, 0x01, 0x32, 0xe6, 0x69, 0x14, 0x30,
	0x72, 0x64, 0x62, 0xb4, 0x6d, 0xbd, 0xfe, 0x1f, 0x18, 0x93, 0xe3, 0x3b, 0xc0, 0x2d, 0xc6, 0xa8,
	0x9d, 0xf1, 0x08, 0xc8, 0x89, 0x49, 0x4c, 0x8d, 0xcf, 0x11, 0xd2, 0x23, 0x23, 0x50, 0x41, 0x12,
	0x11, 0xb4, 0x9d, 0xf9, 0x06, 0xd4, 0xfb, 0x08, 0xbf, 0x40, 0x0f, 0x74, 0x2a, 0x93, 0x05, 0x04,
	0x85, 0x48, 0xf4, 0x1e, 0xbb, 0x06, 0x39, 0xcd, 0x58, 0x35, 0x4a, 0x16, 0x30, 0x34, 0xcd, 0x57,
	0xed, 0x6f, 0xdf, 0x2f, 0xac, 0xdb, 0x0f, 0x3f, 0x56, 0xd4, 0x5e, 0xae, 0xa8, 0xfd, 0x7b, 0x45,
	0xed, 0xaf, 0x6b, 0x6a, 0x2d, 0xd7, 0xd4, 0xfa, 0xb9, 0xa6, 0xd6, 0xa7, 0xeb, 0x69, 0xa2, 0xe2,
	0x72, 0xec, 0x86, 0x3c, 0xf3, 0xde, 0xd6, 0x0b, 0x19, 0x80, 0xfa, 0xcc, 0xc5, 0xcc, 0xdb, 0x1c,
	0x53, 0xb5, 0x39, 0x27, 0xf5, 0xa5, 0x00, 0x39, 0x76, 0xcc, 0xbd, 0xf4, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xf0, 0xd5, 0xec, 0x1a, 0xbe, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSizePrices != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxSizePrices))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxDetId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxDetId))
		i--
		dAtA[i] = 0x50
	}
	if m.Mode != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x48
	}
	if m.ThresholdB != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ThresholdB))
		i--
		dAtA[i] = 0x40
	}
	if m.ThresholdA != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ThresholdA))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxNonce != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxNonce))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TokenFeeders) > 0 {
		for iNdEx := len(m.TokenFeeders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenFeeders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Sources) > 0 {
		for iNdEx := len(m.Sources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.Sources) > 0 {
		for _, e := range m.Sources {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.TokenFeeders) > 0 {
		for _, e := range m.TokenFeeders {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.MaxNonce != 0 {
		n += 1 + sovParams(uint64(m.MaxNonce))
	}
	if m.ThresholdA != 0 {
		n += 1 + sovParams(uint64(m.ThresholdA))
	}
	if m.ThresholdB != 0 {
		n += 1 + sovParams(uint64(m.ThresholdB))
	}
	if m.Mode != 0 {
		n += 1 + sovParams(uint64(m.Mode))
	}
	if m.MaxDetId != 0 {
		n += 1 + sovParams(uint64(m.MaxDetId))
	}
	if m.MaxSizePrices != 0 {
		n += 1 + sovParams(uint64(m.MaxSizePrices))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, &Chain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &Token{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, &Source{})
			if err := m.Sources[len(m.Sources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &RuleSource{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenFeeders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenFeeders = append(m.TokenFeeders, &TokenFeeder{})
			if err := m.TokenFeeders[len(m.TokenFeeders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNonce", wireType)
			}
			m.MaxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNonce |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdA", wireType)
			}
			m.ThresholdA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThresholdA |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdB", wireType)
			}
			m.ThresholdB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThresholdB |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDetId", wireType)
			}
			m.MaxDetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSizePrices", wireType)
			}
			m.MaxSizePrices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSizePrices |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
