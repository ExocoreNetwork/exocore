// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TokenIndex is the pair of tokenName and its index defined in params
type TokenIndex struct {
	// token name
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// the index registered in params.Token
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *TokenIndex) Reset()         { *m = TokenIndex{} }
func (m *TokenIndex) String() string { return proto.CompactTextString(m) }
func (*TokenIndex) ProtoMessage()    {}
func (*TokenIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{0}
}
func (m *TokenIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenIndex.Merge(m, src)
}
func (m *TokenIndex) XXX_Size() int {
	return m.Size()
}
func (m *TokenIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenIndex.DiscardUnknown(m)
}

var xxx_messageInfo_TokenIndex proto.InternalMessageInfo

func (m *TokenIndex) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenIndex) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// QueryTokenIndexsRequest is request type for Query/TokenIndexes RPC method
type QueryTokenIndexesRequest struct {
}

func (m *QueryTokenIndexesRequest) Reset()         { *m = QueryTokenIndexesRequest{} }
func (m *QueryTokenIndexesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenIndexesRequest) ProtoMessage()    {}
func (*QueryTokenIndexesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{1}
}
func (m *QueryTokenIndexesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenIndexesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenIndexesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenIndexesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenIndexesRequest.Merge(m, src)
}
func (m *QueryTokenIndexesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenIndexesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenIndexesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenIndexesRequest proto.InternalMessageInfo

// QueryTokenIndexesResponse is response type for Query/TokenIndexes RPC method
type QueryTokenIndexesResponse struct {
	//token_indexes includes all the token-index mapping
	TokenIndexes []*TokenIndex `protobuf:"bytes,1,rep,name=token_indexes,json=tokenIndexes,proto3" json:"token_indexes,omitempty"`
}

func (m *QueryTokenIndexesResponse) Reset()         { *m = QueryTokenIndexesResponse{} }
func (m *QueryTokenIndexesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenIndexesResponse) ProtoMessage()    {}
func (*QueryTokenIndexesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{2}
}
func (m *QueryTokenIndexesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenIndexesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenIndexesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenIndexesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenIndexesResponse.Merge(m, src)
}
func (m *QueryTokenIndexesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenIndexesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenIndexesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenIndexesResponse proto.InternalMessageInfo

func (m *QueryTokenIndexesResponse) GetTokenIndexes() []*TokenIndex {
	if m != nil {
		return m.TokenIndexes
	}
	return nil
}

// QueryStakerListRequest is request type for Query/StakerList RPC method
type QueryStakerListRequest struct {
	// id of assets for the staker list request for
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QueryStakerListRequest) Reset()         { *m = QueryStakerListRequest{} }
func (m *QueryStakerListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakerListRequest) ProtoMessage()    {}
func (*QueryStakerListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{3}
}
func (m *QueryStakerListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerListRequest.Merge(m, src)
}
func (m *QueryStakerListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerListRequest proto.InternalMessageInfo

func (m *QueryStakerListRequest) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// QueryStakerListResponse is response type for Query/StakerList RPC method
type QueryStakerListResponse struct {
	// staker list including all stakers of request asset
	StakerList *StakerList `protobuf:"bytes,1,opt,name=staker_list,json=stakerList,proto3" json:"staker_list,omitempty"`
}

func (m *QueryStakerListResponse) Reset()         { *m = QueryStakerListResponse{} }
func (m *QueryStakerListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerListResponse) ProtoMessage()    {}
func (*QueryStakerListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{4}
}
func (m *QueryStakerListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerListResponse.Merge(m, src)
}
func (m *QueryStakerListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerListResponse proto.InternalMessageInfo

func (m *QueryStakerListResponse) GetStakerList() *StakerList {
	if m != nil {
		return m.StakerList
	}
	return nil
}

// QueryStakerInfoRequest is request type for Query/StakerInfo RCP method
type QueryStakerInfoRequest struct {
	// asset id for the staker info request for
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// staker_addr is the staker address
	StakerAddr string `protobuf:"bytes,2,opt,name=staker_addr,json=stakerAddr,proto3" json:"staker_addr,omitempty"`
}

func (m *QueryStakerInfoRequest) Reset()         { *m = QueryStakerInfoRequest{} }
func (m *QueryStakerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakerInfoRequest) ProtoMessage()    {}
func (*QueryStakerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{5}
}
func (m *QueryStakerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerInfoRequest.Merge(m, src)
}
func (m *QueryStakerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerInfoRequest proto.InternalMessageInfo

func (m *QueryStakerInfoRequest) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *QueryStakerInfoRequest) GetStakerAddr() string {
	if m != nil {
		return m.StakerAddr
	}
	return ""
}

// QueryStakerInfoResponse is response type for Query/StakerInfo RCP method
type QueryStakerInfoResponse struct {
	// all staker infos under the specified asset
	StakerInfo *StakerInfo `protobuf:"bytes,1,opt,name=staker_info,json=stakerInfo,proto3" json:"staker_info,omitempty"`
}

func (m *QueryStakerInfoResponse) Reset()         { *m = QueryStakerInfoResponse{} }
func (m *QueryStakerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerInfoResponse) ProtoMessage()    {}
func (*QueryStakerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{6}
}
func (m *QueryStakerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerInfoResponse.Merge(m, src)
}
func (m *QueryStakerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerInfoResponse proto.InternalMessageInfo

func (m *QueryStakerInfoResponse) GetStakerInfo() *StakerInfo {
	if m != nil {
		return m.StakerInfo
	}
	return nil
}

// QueryStakerInfosRequest is request type for Query/StakerInfos RCP method
type QueryStakerInfosRequest struct {
	// asset id for the staker info request for
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QueryStakerInfosRequest) Reset()         { *m = QueryStakerInfosRequest{} }
func (m *QueryStakerInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakerInfosRequest) ProtoMessage()    {}
func (*QueryStakerInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{7}
}
func (m *QueryStakerInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerInfosRequest.Merge(m, src)
}
func (m *QueryStakerInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerInfosRequest proto.InternalMessageInfo

func (m *QueryStakerInfosRequest) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// QueryStakerInfosResponse is response type for Query/StakerInfo RCP method
type QueryStakerInfosResponse struct {
	// all staker infos under the specified asset
	StakerInfos []*StakerInfo `protobuf:"bytes,1,rep,name=staker_infos,json=stakerInfos,proto3" json:"staker_infos,omitempty"`
}

func (m *QueryStakerInfosResponse) Reset()         { *m = QueryStakerInfosResponse{} }
func (m *QueryStakerInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerInfosResponse) ProtoMessage()    {}
func (*QueryStakerInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{8}
}
func (m *QueryStakerInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerInfosResponse.Merge(m, src)
}
func (m *QueryStakerInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerInfosResponse proto.InternalMessageInfo

func (m *QueryStakerInfosResponse) GetStakerInfos() []*StakerInfo {
	if m != nil {
		return m.StakerInfos
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{9}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{10}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetPricesRequest is request type for all prices of a specific token
type QueryGetPricesRequest struct {
	// token_id represents which token's price will be retrieved
	TokenId uint64 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *QueryGetPricesRequest) Reset()         { *m = QueryGetPricesRequest{} }
func (m *QueryGetPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPricesRequest) ProtoMessage()    {}
func (*QueryGetPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{11}
}
func (m *QueryGetPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPricesRequest.Merge(m, src)
}
func (m *QueryGetPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPricesRequest proto.InternalMessageInfo

func (m *QueryGetPricesRequest) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

// QueryGetLatestPriceRequest is request type for the latest price of a specific token
type QueryGetLatestPriceRequest struct {
	// token_id represents which token's price will be retrieved
	TokenId uint64 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *QueryGetLatestPriceRequest) Reset()         { *m = QueryGetLatestPriceRequest{} }
func (m *QueryGetLatestPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestPriceRequest) ProtoMessage()    {}
func (*QueryGetLatestPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{12}
}
func (m *QueryGetLatestPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestPriceRequest.Merge(m, src)
}
func (m *QueryGetLatestPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestPriceRequest proto.InternalMessageInfo

func (m *QueryGetLatestPriceRequest) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

// QueryGetPricesResponse
type QueryGetPricesResponse struct {
	// prices returned prices
	Prices Prices `protobuf:"bytes,1,opt,name=prices,proto3" json:"prices"`
}

func (m *QueryGetPricesResponse) Reset()         { *m = QueryGetPricesResponse{} }
func (m *QueryGetPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPricesResponse) ProtoMessage()    {}
func (*QueryGetPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{13}
}
func (m *QueryGetPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPricesResponse.Merge(m, src)
}
func (m *QueryGetPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPricesResponse proto.InternalMessageInfo

func (m *QueryGetPricesResponse) GetPrices() Prices {
	if m != nil {
		return m.Prices
	}
	return Prices{}
}

// QueryGetLatestPriceResponse
type QueryGetLatestPriceResponse struct {
	// prices returned prices
	Price PriceTimeRound `protobuf:"bytes,1,opt,name=price,proto3" json:"price"`
}

func (m *QueryGetLatestPriceResponse) Reset()         { *m = QueryGetLatestPriceResponse{} }
func (m *QueryGetLatestPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestPriceResponse) ProtoMessage()    {}
func (*QueryGetLatestPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{14}
}
func (m *QueryGetLatestPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestPriceResponse.Merge(m, src)
}
func (m *QueryGetLatestPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestPriceResponse proto.InternalMessageInfo

func (m *QueryGetLatestPriceResponse) GetPrice() PriceTimeRound {
	if m != nil {
		return m.Price
	}
	return PriceTimeRound{}
}

// QueryAllPricesRequest
type QueryAllPricesRequest struct {
	// info of the pagination
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPricesRequest) Reset()         { *m = QueryAllPricesRequest{} }
func (m *QueryAllPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPricesRequest) ProtoMessage()    {}
func (*QueryAllPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{15}
}
func (m *QueryAllPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPricesRequest.Merge(m, src)
}
func (m *QueryAllPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPricesRequest proto.InternalMessageInfo

func (m *QueryAllPricesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllPricesResponse
type QueryAllPricesResponse struct {
	// prices retreived
	Prices []Prices `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices"`
	// info of the pagination
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPricesResponse) Reset()         { *m = QueryAllPricesResponse{} }
func (m *QueryAllPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPricesResponse) ProtoMessage()    {}
func (*QueryAllPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{16}
}
func (m *QueryAllPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPricesResponse.Merge(m, src)
}
func (m *QueryAllPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPricesResponse proto.InternalMessageInfo

func (m *QueryAllPricesResponse) GetPrices() []Prices {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *QueryAllPricesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetValidatorUpdateBlockRequest
type QueryGetValidatorUpdateBlockRequest struct {
}

func (m *QueryGetValidatorUpdateBlockRequest) Reset()         { *m = QueryGetValidatorUpdateBlockRequest{} }
func (m *QueryGetValidatorUpdateBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorUpdateBlockRequest) ProtoMessage()    {}
func (*QueryGetValidatorUpdateBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{17}
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorUpdateBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorUpdateBlockRequest.Merge(m, src)
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorUpdateBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorUpdateBlockRequest proto.InternalMessageInfo

// QueryGetValidatorUpdateBlockResponse
type QueryGetValidatorUpdateBlockResponse struct {
	// ValidatorUpdateBlock tells the latest block on which the valdiator set was updated
	ValidatorUpdateBlock ValidatorUpdateBlock `protobuf:"bytes,1,opt,name=validator_update_block,json=validatorUpdateBlock,proto3" json:"validator_update_block"`
}

func (m *QueryGetValidatorUpdateBlockResponse) Reset()         { *m = QueryGetValidatorUpdateBlockResponse{} }
func (m *QueryGetValidatorUpdateBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorUpdateBlockResponse) ProtoMessage()    {}
func (*QueryGetValidatorUpdateBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{18}
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorUpdateBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorUpdateBlockResponse.Merge(m, src)
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorUpdateBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorUpdateBlockResponse proto.InternalMessageInfo

func (m *QueryGetValidatorUpdateBlockResponse) GetValidatorUpdateBlock() ValidatorUpdateBlock {
	if m != nil {
		return m.ValidatorUpdateBlock
	}
	return ValidatorUpdateBlock{}
}

// QueryGetIndexRecentParamsRequest
type QueryGetIndexRecentParamsRequest struct {
}

func (m *QueryGetIndexRecentParamsRequest) Reset()         { *m = QueryGetIndexRecentParamsRequest{} }
func (m *QueryGetIndexRecentParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentParamsRequest) ProtoMessage()    {}
func (*QueryGetIndexRecentParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{19}
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentParamsRequest.Merge(m, src)
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentParamsRequest proto.InternalMessageInfo

// QueryGetIndexRecentParamsResponse
type QueryGetIndexRecentParamsResponse struct {
	// index_recent_params index of cached recent params
	IndexRecentParams IndexRecentParams `protobuf:"bytes,1,opt,name=index_recent_params,json=indexRecentParams,proto3" json:"index_recent_params"`
}

func (m *QueryGetIndexRecentParamsResponse) Reset()         { *m = QueryGetIndexRecentParamsResponse{} }
func (m *QueryGetIndexRecentParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentParamsResponse) ProtoMessage()    {}
func (*QueryGetIndexRecentParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{20}
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentParamsResponse.Merge(m, src)
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentParamsResponse proto.InternalMessageInfo

func (m *QueryGetIndexRecentParamsResponse) GetIndexRecentParams() IndexRecentParams {
	if m != nil {
		return m.IndexRecentParams
	}
	return IndexRecentParams{}
}

// QueryGetIndexRecentMsgReque
type QueryGetIndexRecentMsgRequest struct {
}

func (m *QueryGetIndexRecentMsgRequest) Reset()         { *m = QueryGetIndexRecentMsgRequest{} }
func (m *QueryGetIndexRecentMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentMsgRequest) ProtoMessage()    {}
func (*QueryGetIndexRecentMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{21}
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentMsgRequest.Merge(m, src)
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentMsgRequest proto.InternalMessageInfo

// QueryIndexRecentMsgResponse
type QueryGetIndexRecentMsgResponse struct {
	// index_recent_msg index of cached recent messages
	IndexRecentMsg IndexRecentMsg `protobuf:"bytes,1,opt,name=index_recent_msg,json=indexRecentMsg,proto3" json:"index_recent_msg"`
}

func (m *QueryGetIndexRecentMsgResponse) Reset()         { *m = QueryGetIndexRecentMsgResponse{} }
func (m *QueryGetIndexRecentMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentMsgResponse) ProtoMessage()    {}
func (*QueryGetIndexRecentMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{22}
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentMsgResponse.Merge(m, src)
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentMsgResponse proto.InternalMessageInfo

func (m *QueryGetIndexRecentMsgResponse) GetIndexRecentMsg() IndexRecentMsg {
	if m != nil {
		return m.IndexRecentMsg
	}
	return IndexRecentMsg{}
}

// QueryGetRecentMsgRequest
type QueryGetRecentMsgRequest struct {
	// block represents of which block the cached message query for
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *QueryGetRecentMsgRequest) Reset()         { *m = QueryGetRecentMsgRequest{} }
func (m *QueryGetRecentMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentMsgRequest) ProtoMessage()    {}
func (*QueryGetRecentMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{23}
}
func (m *QueryGetRecentMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentMsgRequest.Merge(m, src)
}
func (m *QueryGetRecentMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentMsgRequest proto.InternalMessageInfo

func (m *QueryGetRecentMsgRequest) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

// QueryGetRecentMsgResponse
type QueryGetRecentMsgResponse struct {
	// cached recent message
	RecentMsg RecentMsg `protobuf:"bytes,1,opt,name=recent_msg,json=recentMsg,proto3" json:"recent_msg"`
}

func (m *QueryGetRecentMsgResponse) Reset()         { *m = QueryGetRecentMsgResponse{} }
func (m *QueryGetRecentMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentMsgResponse) ProtoMessage()    {}
func (*QueryGetRecentMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{24}
}
func (m *QueryGetRecentMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentMsgResponse.Merge(m, src)
}
func (m *QueryGetRecentMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentMsgResponse proto.InternalMessageInfo

func (m *QueryGetRecentMsgResponse) GetRecentMsg() RecentMsg {
	if m != nil {
		return m.RecentMsg
	}
	return RecentMsg{}
}

// QueryAllRecentMsgRequest
type QueryAllRecentMsgRequest struct {
	// info of pagination
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentMsgRequest) Reset()         { *m = QueryAllRecentMsgRequest{} }
func (m *QueryAllRecentMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentMsgRequest) ProtoMessage()    {}
func (*QueryAllRecentMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{25}
}
func (m *QueryAllRecentMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentMsgRequest.Merge(m, src)
}
func (m *QueryAllRecentMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentMsgRequest proto.InternalMessageInfo

func (m *QueryAllRecentMsgRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllRecentMsgResponse
type QueryAllRecentMsgResponse struct {
	// recent_msg represets the cached recent message
	RecentMsg []RecentMsg `protobuf:"bytes,1,rep,name=recent_msg,json=recentMsg,proto3" json:"recent_msg"`
	// info of pagination
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentMsgResponse) Reset()         { *m = QueryAllRecentMsgResponse{} }
func (m *QueryAllRecentMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentMsgResponse) ProtoMessage()    {}
func (*QueryAllRecentMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{26}
}
func (m *QueryAllRecentMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentMsgResponse.Merge(m, src)
}
func (m *QueryAllRecentMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentMsgResponse proto.InternalMessageInfo

func (m *QueryAllRecentMsgResponse) GetRecentMsg() []RecentMsg {
	if m != nil {
		return m.RecentMsg
	}
	return nil
}

func (m *QueryAllRecentMsgResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetRecentParamsRequest
type QueryGetRecentParamsRequest struct {
	// block represents of which block the cached params from
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *QueryGetRecentParamsRequest) Reset()         { *m = QueryGetRecentParamsRequest{} }
func (m *QueryGetRecentParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentParamsRequest) ProtoMessage()    {}
func (*QueryGetRecentParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{27}
}
func (m *QueryGetRecentParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentParamsRequest.Merge(m, src)
}
func (m *QueryGetRecentParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentParamsRequest proto.InternalMessageInfo

func (m *QueryGetRecentParamsRequest) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

// QueryGetRecentParamsResponse
type QueryGetRecentParamsResponse struct {
	// recent_params cached recent params
	RecentParams RecentParams `protobuf:"bytes,1,opt,name=recent_params,json=recentParams,proto3" json:"recent_params"`
}

func (m *QueryGetRecentParamsResponse) Reset()         { *m = QueryGetRecentParamsResponse{} }
func (m *QueryGetRecentParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentParamsResponse) ProtoMessage()    {}
func (*QueryGetRecentParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{28}
}
func (m *QueryGetRecentParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentParamsResponse.Merge(m, src)
}
func (m *QueryGetRecentParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentParamsResponse proto.InternalMessageInfo

func (m *QueryGetRecentParamsResponse) GetRecentParams() RecentParams {
	if m != nil {
		return m.RecentParams
	}
	return RecentParams{}
}

// QueryAllRecentParamsRequest
type QueryAllRecentParamsRequest struct {
	// info of pagination
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentParamsRequest) Reset()         { *m = QueryAllRecentParamsRequest{} }
func (m *QueryAllRecentParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentParamsRequest) ProtoMessage()    {}
func (*QueryAllRecentParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{29}
}
func (m *QueryAllRecentParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentParamsRequest.Merge(m, src)
}
func (m *QueryAllRecentParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentParamsRequest proto.InternalMessageInfo

func (m *QueryAllRecentParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllRecentParamsResponse
type QueryAllRecentParamsResponse struct {
	// recent_params cached recent params
	RecentParams []RecentParams `protobuf:"bytes,1,rep,name=recent_params,json=recentParams,proto3" json:"recent_params"`
	// info of pagination
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentParamsResponse) Reset()         { *m = QueryAllRecentParamsResponse{} }
func (m *QueryAllRecentParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentParamsResponse) ProtoMessage()    {}
func (*QueryAllRecentParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8cba1249806967d, []int{30}
}
func (m *QueryAllRecentParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentParamsResponse.Merge(m, src)
}
func (m *QueryAllRecentParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentParamsResponse proto.InternalMessageInfo

func (m *QueryAllRecentParamsResponse) GetRecentParams() []RecentParams {
	if m != nil {
		return m.RecentParams
	}
	return nil
}

func (m *QueryAllRecentParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenIndex)(nil), "exocore.oracle.v1.TokenIndex")
	proto.RegisterType((*QueryTokenIndexesRequest)(nil), "exocore.oracle.v1.QueryTokenIndexesRequest")
	proto.RegisterType((*QueryTokenIndexesResponse)(nil), "exocore.oracle.v1.QueryTokenIndexesResponse")
	proto.RegisterType((*QueryStakerListRequest)(nil), "exocore.oracle.v1.QueryStakerListRequest")
	proto.RegisterType((*QueryStakerListResponse)(nil), "exocore.oracle.v1.QueryStakerListResponse")
	proto.RegisterType((*QueryStakerInfoRequest)(nil), "exocore.oracle.v1.QueryStakerInfoRequest")
	proto.RegisterType((*QueryStakerInfoResponse)(nil), "exocore.oracle.v1.QueryStakerInfoResponse")
	proto.RegisterType((*QueryStakerInfosRequest)(nil), "exocore.oracle.v1.QueryStakerInfosRequest")
	proto.RegisterType((*QueryStakerInfosResponse)(nil), "exocore.oracle.v1.QueryStakerInfosResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "exocore.oracle.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "exocore.oracle.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetPricesRequest)(nil), "exocore.oracle.v1.QueryGetPricesRequest")
	proto.RegisterType((*QueryGetLatestPriceRequest)(nil), "exocore.oracle.v1.QueryGetLatestPriceRequest")
	proto.RegisterType((*QueryGetPricesResponse)(nil), "exocore.oracle.v1.QueryGetPricesResponse")
	proto.RegisterType((*QueryGetLatestPriceResponse)(nil), "exocore.oracle.v1.QueryGetLatestPriceResponse")
	proto.RegisterType((*QueryAllPricesRequest)(nil), "exocore.oracle.v1.QueryAllPricesRequest")
	proto.RegisterType((*QueryAllPricesResponse)(nil), "exocore.oracle.v1.QueryAllPricesResponse")
	proto.RegisterType((*QueryGetValidatorUpdateBlockRequest)(nil), "exocore.oracle.v1.QueryGetValidatorUpdateBlockRequest")
	proto.RegisterType((*QueryGetValidatorUpdateBlockResponse)(nil), "exocore.oracle.v1.QueryGetValidatorUpdateBlockResponse")
	proto.RegisterType((*QueryGetIndexRecentParamsRequest)(nil), "exocore.oracle.v1.QueryGetIndexRecentParamsRequest")
	proto.RegisterType((*QueryGetIndexRecentParamsResponse)(nil), "exocore.oracle.v1.QueryGetIndexRecentParamsResponse")
	proto.RegisterType((*QueryGetIndexRecentMsgRequest)(nil), "exocore.oracle.v1.QueryGetIndexRecentMsgRequest")
	proto.RegisterType((*QueryGetIndexRecentMsgResponse)(nil), "exocore.oracle.v1.QueryGetIndexRecentMsgResponse")
	proto.RegisterType((*QueryGetRecentMsgRequest)(nil), "exocore.oracle.v1.QueryGetRecentMsgRequest")
	proto.RegisterType((*QueryGetRecentMsgResponse)(nil), "exocore.oracle.v1.QueryGetRecentMsgResponse")
	proto.RegisterType((*QueryAllRecentMsgRequest)(nil), "exocore.oracle.v1.QueryAllRecentMsgRequest")
	proto.RegisterType((*QueryAllRecentMsgResponse)(nil), "exocore.oracle.v1.QueryAllRecentMsgResponse")
	proto.RegisterType((*QueryGetRecentParamsRequest)(nil), "exocore.oracle.v1.QueryGetRecentParamsRequest")
	proto.RegisterType((*QueryGetRecentParamsResponse)(nil), "exocore.oracle.v1.QueryGetRecentParamsResponse")
	proto.RegisterType((*QueryAllRecentParamsRequest)(nil), "exocore.oracle.v1.QueryAllRecentParamsRequest")
	proto.RegisterType((*QueryAllRecentParamsResponse)(nil), "exocore.oracle.v1.QueryAllRecentParamsResponse")
}

func init() { proto.RegisterFile("exocore/oracle/v1/query.proto", fileDescriptor_b8cba1249806967d) }

var fileDescriptor_b8cba1249806967d = []byte{
	// 1379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xdf, 0x6f, 0xdb, 0x54,
	0x14, 0xc7, 0xeb, 0xfe, 0x1a, 0x3d, 0xed, 0x06, 0xbd, 0x2b, 0xa3, 0x35, 0x6d, 0xda, 0x99, 0x76,
	0xcb, 0xda, 0xce, 0x6e, 0xfa, 0x63, 0xd9, 0x0f, 0x06, 0x4b, 0x25, 0x56, 0x3a, 0x8d, 0xaa, 0x0d,
	0x05, 0x89, 0x69, 0x22, 0x72, 0x92, 0xbb, 0x60, 0xea, 0xc4, 0x99, 0xed, 0x86, 0x4e, 0x55, 0x85,
	0xc4, 0x1b, 0xe2, 0x05, 0x89, 0xb7, 0xbd, 0x20, 0x21, 0x24, 0x84, 0x78, 0x00, 0xb4, 0x67, 0xde,
	0xc7, 0xdb, 0x24, 0x5e, 0x78, 0x42, 0xa8, 0xe5, 0x0f, 0xe0, 0x4f, 0x40, 0xbe, 0x3e, 0x4e, 0xec,
	0xf8, 0x3a, 0x76, 0x50, 0xdf, 0x62, 0xdf, 0xf3, 0xe3, 0x73, 0xce, 0x3d, 0xf7, 0xfa, 0xab, 0xc0,
	0x14, 0x3d, 0x30, 0x4a, 0x86, 0x49, 0x15, 0xc3, 0x54, 0x4b, 0x3a, 0x55, 0x1a, 0x19, 0xe5, 0xf1,
	0x3e, 0x35, 0x9f, 0xc8, 0x75, 0xd3, 0xb0, 0x0d, 0x32, 0x8a, 0xcb, 0xb2, 0xbb, 0x2c, 0x37, 0x32,
	0xe2, 0x7c, 0xc9, 0xb0, 0xaa, 0x86, 0xa5, 0x14, 0x55, 0x8b, 0xba, 0xb6, 0x4a, 0x23, 0x53, 0xa4,
	0xb6, 0x9a, 0x51, 0xea, 0x6a, 0x45, 0xab, 0xa9, 0xb6, 0x66, 0xd4, 0x5c, 0x77, 0x31, 0x1d, 0x8e,
	0xae, 0xd5, 0xca, 0xf4, 0xa0, 0x60, 0xd2, 0x12, 0xad, 0xd9, 0x85, 0xaa, 0x55, 0x41, 0xcb, 0x85,
	0x18, 0xcb, 0xba, 0x6a, 0xaa, 0x55, 0x0b, 0x8d, 0x67, 0xc3, 0xc6, 0x4e, 0xda, 0x06, 0x2d, 0xd8,
	0xc6, 0x1e, 0xf5, 0x92, 0xa7, 0xc2, 0x56, 0x81, 0x28, 0x9c, 0xd2, 0xeb, 0xa6, 0x56, 0xa2, 0x1d,
	0xdc, 0x9d, 0x65, 0xcf, 0x5d, 0x0a, 0xaf, 0x87, 0xaa, 0x9a, 0x8b, 0xb4, 0x09, 0x90, 0xc8, 0x61,
	0xb3, 0x86, 0xaa, 0x6b, 0x65, 0xd5, 0x36, 0xcc, 0xc2, 0x7e, 0xbd, 0xac, 0xda, 0xb4, 0x50, 0xd4,
	0x8d, 0xd2, 0x1e, 0xda, 0x8f, 0x55, 0x8c, 0x8a, 0xc1, 0x7e, 0x2a, 0xce, 0x2f, 0x7c, 0x3b, 0x59,
	0x31, 0x8c, 0x8a, 0x4e, 0x15, 0xb5, 0xae, 0x29, 0x6a, 0xad, 0x66, 0xd8, 0x6c, 0x27, 0x30, 0x87,
	0x74, 0x1d, 0x60, 0xd7, 0x69, 0xce, 0xa6, 0xd3, 0x55, 0x32, 0x06, 0x03, 0xac, 0x55, 0xe3, 0xc2,
	0x8c, 0x90, 0x1e, 0xca, 0xbb, 0x0f, 0xce, 0x5b, 0xd6, 0xf4, 0xf1, 0xde, 0x19, 0x21, 0xdd, 0x9f,
	0x77, 0x1f, 0x24, 0x11, 0xc6, 0x77, 0x9c, 0x6d, 0x6e, 0xb9, 0x53, 0x2b, 0x4f, 0x1f, 0xef, 0x53,
	0xcb, 0x96, 0x0a, 0x30, 0xc1, 0x59, 0xb3, 0xea, 0x46, 0xcd, 0xa2, 0x64, 0x1d, 0xce, 0xb2, 0xb8,
	0x05, 0xcd, 0x5d, 0x18, 0x17, 0x66, 0xfa, 0xd2, 0xc3, 0xcb, 0x53, 0x72, 0x68, 0xa8, 0xe4, 0x96,
	0x7f, 0x7e, 0xc4, 0xf6, 0xc5, 0x92, 0x56, 0xe0, 0x02, 0x4b, 0xf0, 0xbe, 0xad, 0xee, 0x51, 0xf3,
	0xbe, 0x66, 0xd9, 0x98, 0x9a, 0x4c, 0xc0, 0x4b, 0xaa, 0x65, 0x51, 0xbb, 0xa0, 0x95, 0xb1, 0x8a,
	0x33, 0xec, 0x79, 0xb3, 0x2c, 0x7d, 0x04, 0xaf, 0x85, 0x9c, 0x90, 0xe9, 0x2d, 0x18, 0xb6, 0xd8,
	0xdb, 0x82, 0xae, 0x59, 0x36, 0x73, 0xe4, 0x13, 0xf9, 0x7c, 0xc1, 0x6a, 0xfe, 0x96, 0x76, 0x03,
	0x3c, 0x9b, 0xb5, 0x47, 0x46, 0x3c, 0x0f, 0x99, 0x6e, 0x26, 0x55, 0xcb, 0x65, 0x93, 0x75, 0x77,
	0xc8, 0x8b, 0x9a, 0x2b, 0x97, 0xcd, 0x36, 0x60, 0x37, 0x6a, 0x08, 0x58, 0xab, 0x3d, 0x32, 0x62,
	0x81, 0x99, 0x2f, 0x86, 0x76, 0x7e, 0x4b, 0xab, 0xa1, 0xd0, 0x56, 0x82, 0x0e, 0x3e, 0xc4, 0x3d,
	0x0f, 0x78, 0x21, 0xd1, 0x1d, 0x18, 0xf1, 0x11, 0x75, 0xda, 0x55, 0x1f, 0xd2, 0x70, 0x0b, 0xc9,
	0x92, 0xc6, 0x80, 0xb0, 0xe8, 0xdb, 0xec, 0x10, 0x78, 0xb3, 0xb4, 0x05, 0xe7, 0x03, 0x6f, 0x31,
	0x5d, 0x16, 0x06, 0xdd, 0xc3, 0x82, 0xb5, 0x4f, 0x70, 0x12, 0xb9, 0x2e, 0xeb, 0xfd, 0xcf, 0xff,
	0x9a, 0xee, 0xc9, 0xa3, 0xb9, 0xb4, 0x0c, 0xaf, 0xb2, 0x78, 0x1b, 0xd4, 0xde, 0x66, 0x07, 0xd7,
	0x57, 0x37, 0xce, 0xa5, 0x5b, 0x77, 0x7f, 0xfe, 0x8c, 0x3b, 0x73, 0x65, 0x29, 0x0b, 0xa2, 0xe7,
	0x73, 0x5f, 0xb5, 0xa9, 0xe5, 0x7a, 0x26, 0x70, 0xdc, 0xc1, 0xb9, 0xf0, 0x25, 0xf3, 0xf1, 0xb3,
	0x37, 0x9d, 0xf8, 0x99, 0x41, 0x93, 0x9f, 0x3d, 0x49, 0x0f, 0xe1, 0x75, 0x2e, 0x0b, 0xc6, 0xbd,
	0x0d, 0x03, 0xcc, 0x10, 0xc3, 0x5e, 0x8c, 0x0a, 0xbb, 0xab, 0x55, 0x69, 0xde, 0xd8, 0xaf, 0x95,
	0x31, 0xbc, 0xeb, 0x25, 0x15, 0xb0, 0x3b, 0x39, 0x5d, 0x0f, 0x76, 0xe7, 0x2e, 0x40, 0xeb, 0x1e,
	0xc7, 0xe0, 0x97, 0x64, 0xf7, 0xd2, 0x97, 0x9d, 0x4b, 0x5f, 0x76, 0x3f, 0x10, 0x78, 0xe9, 0xcb,
	0xdb, 0x6a, 0xc5, 0x6b, 0x50, 0xde, 0xe7, 0x29, 0x3d, 0x15, 0xb0, 0x25, 0xbe, 0x0c, 0x9c, 0x96,
	0xf4, 0x75, 0xd1, 0x12, 0xb2, 0x11, 0x60, 0xeb, 0x65, 0x6c, 0x97, 0x63, 0xd9, 0xdc, 0xac, 0x01,
	0xb8, 0x39, 0x78, 0xc3, 0xeb, 0xed, 0x87, 0xde, 0x4d, 0xfb, 0x01, 0xbb, 0x68, 0xd7, 0x9d, 0x7b,
	0xd6, 0x1b, 0xc9, 0xaf, 0x04, 0x98, 0xed, 0x6c, 0x87, 0x15, 0x95, 0xe0, 0x02, 0xff, 0xc6, 0xc6,
	0x06, 0x5e, 0xe6, 0x54, 0xc8, 0x0b, 0x88, 0xf5, 0x8e, 0x35, 0x38, 0x6b, 0x92, 0x04, 0x33, 0x1e,
	0x8c, 0x7b, 0x55, 0xb2, 0x4f, 0x49, 0xf0, 0x10, 0x7d, 0x0e, 0x17, 0x3b, 0xd8, 0x20, 0xed, 0x03,
	0x38, 0xcf, 0xf9, 0xb8, 0x22, 0xea, 0x2c, 0x07, 0x35, 0x14, 0x0a, 0x39, 0x47, 0xb5, 0xf6, 0x05,
	0x69, 0x1a, 0xa6, 0x38, 0x00, 0xef, 0x59, 0x15, 0x8f, 0xd0, 0x82, 0x54, 0x94, 0x01, 0xe2, 0xed,
	0xc0, 0x2b, 0xed, 0x2a, 0xa1, 0xc3, 0x90, 0x07, 0x83, 0x20, 0xd8, 0x39, 0x2d, 0xf0, 0x56, 0x5a,
	0xc2, 0xfb, 0x6c, 0x83, 0xda, 0xed, 0x40, 0xce, 0x57, 0xaf, 0xb5, 0x55, 0xfd, 0x79, 0xf7, 0x41,
	0xfa, 0x18, 0xbf, 0x6c, 0x41, 0x0f, 0x24, 0xcc, 0x01, 0x84, 0xd8, 0x26, 0x39, 0x6c, 0xed, 0x58,
	0x43, 0x66, 0x93, 0xa8, 0x88, 0x44, 0x39, 0x5d, 0x0f, 0x11, 0x9d, 0xd6, 0x11, 0xfc, 0x41, 0xc0,
	0x22, 0x82, 0x49, 0x22, 0x8a, 0xe8, 0xeb, 0xba, 0x88, 0xd3, 0x3b, 0x8f, 0x2b, 0xad, 0xbb, 0x8e,
	0x33, 0xd5, 0x11, 0x5b, 0xf4, 0x29, 0x4c, 0xf2, 0x9d, 0xb0, 0xc0, 0x7b, 0x70, 0x96, 0x37, 0xe0,
	0xd3, 0x91, 0x35, 0x06, 0x66, 0x7b, 0xc4, 0xf4, 0x8f, 0x35, 0x45, 0xc0, 0x66, 0x27, 0x83, 0x80,
	0xa7, 0xb5, 0x63, 0xcf, 0x04, 0xac, 0x29, 0x94, 0x27, 0xba, 0xa6, 0xbe, 0xff, 0x59, 0xd3, 0xa9,
	0xed, 0xde, 0xf2, 0xbf, 0x04, 0x06, 0x18, 0x35, 0xf9, 0x4e, 0x80, 0x11, 0xbf, 0x16, 0x24, 0x0b,
	0x1c, 0xb0, 0x28, 0x35, 0x29, 0x2e, 0x26, 0x33, 0x76, 0x09, 0xa4, 0xec, 0x17, 0x7f, 0xfc, 0xf3,
	0x4d, 0x6f, 0x86, 0x28, 0xca, 0x3b, 0xae, 0xd7, 0x16, 0xb5, 0x3f, 0x33, 0xcc, 0x3d, 0x25, 0xac,
	0xa6, 0x03, 0x32, 0x94, 0x3c, 0x15, 0x00, 0x5a, 0xf2, 0x8e, 0x5c, 0x89, 0xca, 0x1a, 0xd2, 0x9c,
	0xe2, 0x7c, 0x12, 0x53, 0xc4, 0x5b, 0x63, 0x78, 0x0a, 0xb9, 0x1a, 0x8f, 0xe7, 0x53, 0xa4, 0xe4,
	0x47, 0x01, 0x86, 0x7d, 0xaa, 0x8b, 0xc4, 0xa4, 0xf4, 0x0b, 0x3a, 0x71, 0x21, 0x91, 0x2d, 0xf2,
	0xe5, 0x18, 0xdf, 0x2d, 0x72, 0x23, 0x31, 0x1f, 0x93, 0x7b, 0xca, 0xa1, 0xa7, 0x19, 0x8f, 0xc8,
	0xb3, 0x66, 0x23, 0x9d, 0xd0, 0x71, 0x8d, 0xf4, 0x89, 0x65, 0x71, 0x3e, 0x89, 0x29, 0x82, 0x6e,
	0x31, 0xd0, 0x77, 0xc9, 0xdd, 0xae, 0x40, 0x7d, 0x9c, 0xca, 0xa1, 0x4f, 0x7d, 0x1f, 0x91, 0x2f,
	0x05, 0x18, 0xc4, 0x13, 0x30, 0x17, 0x85, 0x11, 0x38, 0xdd, 0xe2, 0xa5, 0x38, 0x33, 0x24, 0x5d,
	0x62, 0xa4, 0xf3, 0x24, 0x1d, 0x4f, 0xea, 0x9e, 0x5e, 0x67, 0x14, 0x07, 0x5d, 0xa5, 0x43, 0xd2,
	0x51, 0x49, 0xda, 0xf5, 0xab, 0x78, 0x25, 0x81, 0x25, 0x12, 0xdd, 0x62, 0x44, 0x6b, 0x64, 0x25,
	0x01, 0x11, 0xf3, 0x54, 0x0e, 0x3d, 0x85, 0x7b, 0x44, 0x7e, 0x16, 0x60, 0xd8, 0xa7, 0x3c, 0xc9,
	0xd5, 0x0e, 0x79, 0xc3, 0x6a, 0x59, 0x94, 0x93, 0x9a, 0x77, 0x3f, 0x90, 0x3a, 0x73, 0x2f, 0x30,
	0x64, 0x3f, 0xf1, 0xef, 0x02, 0x8c, 0xf1, 0x64, 0x15, 0xb9, 0xd6, 0x81, 0xa5, 0x83, 0x00, 0x14,
	0xb3, 0x5d, 0xfb, 0x61, 0x31, 0x77, 0x58, 0x31, 0x37, 0xc9, 0xf5, 0xf8, 0x62, 0xf8, 0xc2, 0x91,
	0xfc, 0x26, 0xc0, 0x68, 0x48, 0x77, 0x91, 0x95, 0x0e, 0x40, 0x51, 0xa2, 0x50, 0x5c, 0xed, 0xce,
	0x09, 0x4b, 0xb8, 0xcd, 0x4a, 0xc8, 0x92, 0xb5, 0xf8, 0x12, 0x38, 0x6a, 0x92, 0xfc, 0x2a, 0xc0,
	0xb9, 0xa0, 0x36, 0x23, 0x4b, 0xc9, 0x38, 0x5a, 0x4a, 0x48, 0xcc, 0x74, 0xe1, 0x81, 0xd8, 0x37,
	0x19, 0xf6, 0x2a, 0x59, 0xee, 0x12, 0xbb, 0x6a, 0x55, 0xc8, 0xf7, 0x02, 0x0c, 0xb5, 0x70, 0x17,
	0x3a, 0x24, 0x0f, 0x91, 0x2e, 0x26, 0x33, 0x46, 0xc8, 0x37, 0x19, 0xe4, 0x35, 0xb2, 0x1a, 0x0f,
	0xd9, 0xc2, 0x53, 0x0e, 0xd9, 0x64, 0x1c, 0x91, 0x6f, 0x05, 0x18, 0x69, 0xc6, 0xcc, 0xe9, 0x7a,
	0x34, 0x29, 0x47, 0x5d, 0x46, 0x93, 0xf2, 0x54, 0xa2, 0xb4, 0xca, 0x48, 0x65, 0xb2, 0xd8, 0x0d,
	0x29, 0xf9, 0xa5, 0x49, 0x88, 0x73, 0x2b, 0xc7, 0xb6, 0x27, 0x38, 0xb2, 0x4a, 0x62, 0x7b, 0xe4,
	0x7c, 0x9b, 0x71, 0xde, 0x20, 0xd9, 0xc4, 0x9c, 0xee, 0x9c, 0x36, 0x9b, 0xfa, 0x93, 0x00, 0x2f,
	0xfb, 0x23, 0x3b, 0x7d, 0x95, 0x63, 0x5b, 0x95, 0x90, 0x3a, 0x42, 0xce, 0x75, 0xa3, 0x61, 0x02,
	0xd4, 0xeb, 0xf7, 0x9e, 0x1f, 0xa7, 0x84, 0x17, 0xc7, 0x29, 0xe1, 0xef, 0xe3, 0x94, 0xf0, 0xf5,
	0x49, 0xaa, 0xe7, 0xc5, 0x49, 0xaa, 0xe7, 0xcf, 0x93, 0x54, 0xcf, 0x83, 0xa5, 0x8a, 0x66, 0x7f,
	0xb2, 0x5f, 0x94, 0x4b, 0x46, 0x35, 0x2a, 0xe8, 0x81, 0x17, 0xd6, 0x7e, 0x52, 0xa7, 0x56, 0x71,
	0x90, 0xfd, 0x43, 0xb8, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x6e, 0x11, 0x04, 0x0c,
	0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TokenIndexes shows the map tells token and its index for further usage
	TokenIndexes(ctx context.Context, in *QueryTokenIndexesRequest, opts ...grpc.CallOption) (*QueryTokenIndexesResponse, error)
	// StakerList shows all stakers related to the specified asset under native-restaking context
	StakerList(ctx context.Context, in *QueryStakerListRequest, opts ...grpc.CallOption) (*QueryStakerListResponse, error)
	// StakerInfos shows the details for all stakers of the specified assets under native-restaking context
	StakerInfos(ctx context.Context, in *QueryStakerInfosRequest, opts ...grpc.CallOption) (*QueryStakerInfosResponse, error)
	// StakerInfo shows the details for one staker required by input parsms of the specified asset
	StakerInfo(ctx context.Context, in *QueryStakerInfoRequest, opts ...grpc.CallOption) (*QueryStakerInfoResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Prices items.
	Prices(ctx context.Context, in *QueryGetPricesRequest, opts ...grpc.CallOption) (*QueryGetPricesResponse, error)
	// Queries the latest price of a specific token
	LatestPrice(ctx context.Context, in *QueryGetLatestPriceRequest, opts ...grpc.CallOption) (*QueryGetLatestPriceResponse, error)
	// Queries a ValidatorUpdateBlock by index.
	ValidatorUpdateBlock(ctx context.Context, in *QueryGetValidatorUpdateBlockRequest, opts ...grpc.CallOption) (*QueryGetValidatorUpdateBlockResponse, error)
	// Queries a IndexRecentParams by index.
	IndexRecentParams(ctx context.Context, in *QueryGetIndexRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentParamsResponse, error)
	// Queries a IndexRecentMsg by index.
	IndexRecentMsg(ctx context.Context, in *QueryGetIndexRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentMsgResponse, error)
	// Queries a list of RecentMsg items.
	RecentMsg(ctx context.Context, in *QueryGetRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetRecentMsgResponse, error)
	// RecentMsgAll all RecentMsg items.
	RecentMsgAll(ctx context.Context, in *QueryAllRecentMsgRequest, opts ...grpc.CallOption) (*QueryAllRecentMsgResponse, error)
	// Queries a list of RecentParams items.
	RecentParams(ctx context.Context, in *QueryGetRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetRecentParamsResponse, error)
	// RecentParamsAll query all RecentParams.
	RecentParamsAll(ctx context.Context, in *QueryAllRecentParamsRequest, opts ...grpc.CallOption) (*QueryAllRecentParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TokenIndexes(ctx context.Context, in *QueryTokenIndexesRequest, opts ...grpc.CallOption) (*QueryTokenIndexesResponse, error) {
	out := new(QueryTokenIndexesResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/TokenIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakerList(ctx context.Context, in *QueryStakerListRequest, opts ...grpc.CallOption) (*QueryStakerListResponse, error) {
	out := new(QueryStakerListResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/StakerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakerInfos(ctx context.Context, in *QueryStakerInfosRequest, opts ...grpc.CallOption) (*QueryStakerInfosResponse, error) {
	out := new(QueryStakerInfosResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/StakerInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakerInfo(ctx context.Context, in *QueryStakerInfoRequest, opts ...grpc.CallOption) (*QueryStakerInfoResponse, error) {
	out := new(QueryStakerInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/StakerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Prices(ctx context.Context, in *QueryGetPricesRequest, opts ...grpc.CallOption) (*QueryGetPricesResponse, error) {
	out := new(QueryGetPricesResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/Prices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestPrice(ctx context.Context, in *QueryGetLatestPriceRequest, opts ...grpc.CallOption) (*QueryGetLatestPriceResponse, error) {
	out := new(QueryGetLatestPriceResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/LatestPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorUpdateBlock(ctx context.Context, in *QueryGetValidatorUpdateBlockRequest, opts ...grpc.CallOption) (*QueryGetValidatorUpdateBlockResponse, error) {
	out := new(QueryGetValidatorUpdateBlockResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/ValidatorUpdateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexRecentParams(ctx context.Context, in *QueryGetIndexRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentParamsResponse, error) {
	out := new(QueryGetIndexRecentParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/IndexRecentParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexRecentMsg(ctx context.Context, in *QueryGetIndexRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentMsgResponse, error) {
	out := new(QueryGetIndexRecentMsgResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/IndexRecentMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentMsg(ctx context.Context, in *QueryGetRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetRecentMsgResponse, error) {
	out := new(QueryGetRecentMsgResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/RecentMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentMsgAll(ctx context.Context, in *QueryAllRecentMsgRequest, opts ...grpc.CallOption) (*QueryAllRecentMsgResponse, error) {
	out := new(QueryAllRecentMsgResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/RecentMsgAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentParams(ctx context.Context, in *QueryGetRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetRecentParamsResponse, error) {
	out := new(QueryGetRecentParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/RecentParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentParamsAll(ctx context.Context, in *QueryAllRecentParamsRequest, opts ...grpc.CallOption) (*QueryAllRecentParamsResponse, error) {
	out := new(QueryAllRecentParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.v1.Query/RecentParamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TokenIndexes shows the map tells token and its index for further usage
	TokenIndexes(context.Context, *QueryTokenIndexesRequest) (*QueryTokenIndexesResponse, error)
	// StakerList shows all stakers related to the specified asset under native-restaking context
	StakerList(context.Context, *QueryStakerListRequest) (*QueryStakerListResponse, error)
	// StakerInfos shows the details for all stakers of the specified assets under native-restaking context
	StakerInfos(context.Context, *QueryStakerInfosRequest) (*QueryStakerInfosResponse, error)
	// StakerInfo shows the details for one staker required by input parsms of the specified asset
	StakerInfo(context.Context, *QueryStakerInfoRequest) (*QueryStakerInfoResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Prices items.
	Prices(context.Context, *QueryGetPricesRequest) (*QueryGetPricesResponse, error)
	// Queries the latest price of a specific token
	LatestPrice(context.Context, *QueryGetLatestPriceRequest) (*QueryGetLatestPriceResponse, error)
	// Queries a ValidatorUpdateBlock by index.
	ValidatorUpdateBlock(context.Context, *QueryGetValidatorUpdateBlockRequest) (*QueryGetValidatorUpdateBlockResponse, error)
	// Queries a IndexRecentParams by index.
	IndexRecentParams(context.Context, *QueryGetIndexRecentParamsRequest) (*QueryGetIndexRecentParamsResponse, error)
	// Queries a IndexRecentMsg by index.
	IndexRecentMsg(context.Context, *QueryGetIndexRecentMsgRequest) (*QueryGetIndexRecentMsgResponse, error)
	// Queries a list of RecentMsg items.
	RecentMsg(context.Context, *QueryGetRecentMsgRequest) (*QueryGetRecentMsgResponse, error)
	// RecentMsgAll all RecentMsg items.
	RecentMsgAll(context.Context, *QueryAllRecentMsgRequest) (*QueryAllRecentMsgResponse, error)
	// Queries a list of RecentParams items.
	RecentParams(context.Context, *QueryGetRecentParamsRequest) (*QueryGetRecentParamsResponse, error)
	// RecentParamsAll query all RecentParams.
	RecentParamsAll(context.Context, *QueryAllRecentParamsRequest) (*QueryAllRecentParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TokenIndexes(ctx context.Context, req *QueryTokenIndexesRequest) (*QueryTokenIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenIndexes not implemented")
}
func (*UnimplementedQueryServer) StakerList(ctx context.Context, req *QueryStakerListRequest) (*QueryStakerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakerList not implemented")
}
func (*UnimplementedQueryServer) StakerInfos(ctx context.Context, req *QueryStakerInfosRequest) (*QueryStakerInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakerInfos not implemented")
}
func (*UnimplementedQueryServer) StakerInfo(ctx context.Context, req *QueryStakerInfoRequest) (*QueryStakerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakerInfo not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Prices(ctx context.Context, req *QueryGetPricesRequest) (*QueryGetPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prices not implemented")
}
func (*UnimplementedQueryServer) LatestPrice(ctx context.Context, req *QueryGetLatestPriceRequest) (*QueryGetLatestPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestPrice not implemented")
}
func (*UnimplementedQueryServer) ValidatorUpdateBlock(ctx context.Context, req *QueryGetValidatorUpdateBlockRequest) (*QueryGetValidatorUpdateBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorUpdateBlock not implemented")
}
func (*UnimplementedQueryServer) IndexRecentParams(ctx context.Context, req *QueryGetIndexRecentParamsRequest) (*QueryGetIndexRecentParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexRecentParams not implemented")
}
func (*UnimplementedQueryServer) IndexRecentMsg(ctx context.Context, req *QueryGetIndexRecentMsgRequest) (*QueryGetIndexRecentMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexRecentMsg not implemented")
}
func (*UnimplementedQueryServer) RecentMsg(ctx context.Context, req *QueryGetRecentMsgRequest) (*QueryGetRecentMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentMsg not implemented")
}
func (*UnimplementedQueryServer) RecentMsgAll(ctx context.Context, req *QueryAllRecentMsgRequest) (*QueryAllRecentMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentMsgAll not implemented")
}
func (*UnimplementedQueryServer) RecentParams(ctx context.Context, req *QueryGetRecentParamsRequest) (*QueryGetRecentParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentParams not implemented")
}
func (*UnimplementedQueryServer) RecentParamsAll(ctx context.Context, req *QueryAllRecentParamsRequest) (*QueryAllRecentParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentParamsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TokenIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/TokenIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenIndexes(ctx, req.(*QueryTokenIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/StakerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakerList(ctx, req.(*QueryStakerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakerInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakerInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/StakerInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakerInfos(ctx, req.(*QueryStakerInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/StakerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakerInfo(ctx, req.(*QueryStakerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Prices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Prices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/Prices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Prices(ctx, req.(*QueryGetPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/LatestPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestPrice(ctx, req.(*QueryGetLatestPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorUpdateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorUpdateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorUpdateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/ValidatorUpdateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorUpdateBlock(ctx, req.(*QueryGetValidatorUpdateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexRecentParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIndexRecentParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexRecentParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/IndexRecentParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexRecentParams(ctx, req.(*QueryGetIndexRecentParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexRecentMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIndexRecentMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexRecentMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/IndexRecentMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexRecentMsg(ctx, req.(*QueryGetIndexRecentMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecentMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/RecentMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentMsg(ctx, req.(*QueryGetRecentMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentMsgAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRecentMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentMsgAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/RecentMsgAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentMsgAll(ctx, req.(*QueryAllRecentMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecentParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/RecentParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentParams(ctx, req.(*QueryGetRecentParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentParamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRecentParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentParamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.v1.Query/RecentParamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentParamsAll(ctx, req.(*QueryAllRecentParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.oracle.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenIndexes",
			Handler:    _Query_TokenIndexes_Handler,
		},
		{
			MethodName: "StakerList",
			Handler:    _Query_StakerList_Handler,
		},
		{
			MethodName: "StakerInfos",
			Handler:    _Query_StakerInfos_Handler,
		},
		{
			MethodName: "StakerInfo",
			Handler:    _Query_StakerInfo_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Prices",
			Handler:    _Query_Prices_Handler,
		},
		{
			MethodName: "LatestPrice",
			Handler:    _Query_LatestPrice_Handler,
		},
		{
			MethodName: "ValidatorUpdateBlock",
			Handler:    _Query_ValidatorUpdateBlock_Handler,
		},
		{
			MethodName: "IndexRecentParams",
			Handler:    _Query_IndexRecentParams_Handler,
		},
		{
			MethodName: "IndexRecentMsg",
			Handler:    _Query_IndexRecentMsg_Handler,
		},
		{
			MethodName: "RecentMsg",
			Handler:    _Query_RecentMsg_Handler,
		},
		{
			MethodName: "RecentMsgAll",
			Handler:    _Query_RecentMsgAll_Handler,
		},
		{
			MethodName: "RecentParams",
			Handler:    _Query_RecentParams_Handler,
		},
		{
			MethodName: "RecentParamsAll",
			Handler:    _Query_RecentParamsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/oracle/v1/query.proto",
}

func (m *TokenIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenIndexesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenIndexesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenIndexesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTokenIndexesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenIndexesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenIndexesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenIndexes) > 0 {
		for iNdEx := len(m.TokenIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakerList != nil {
		{
			size, err := m.StakerList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerAddr) > 0 {
		i -= len(m.StakerAddr)
		copy(dAtA[i:], m.StakerAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakerInfo != nil {
		{
			size, err := m.StakerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerInfos) > 0 {
		for iNdEx := len(m.StakerInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakerInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Prices.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorUpdateBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorUpdateBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorUpdateBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorUpdateBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorUpdateBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorUpdateBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValidatorUpdateBlock.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IndexRecentParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IndexRecentMsg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RecentMsg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecentMsg) > 0 {
		for iNdEx := len(m.RecentMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecentMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RecentParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecentParams) > 0 {
		for iNdEx := len(m.RecentParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecentParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryTokenIndexesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTokenIndexesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenIndexes) > 0 {
		for _, e := range m.TokenIndexes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakerListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakerList != nil {
		l = m.StakerList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakerAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakerInfo != nil {
		l = m.StakerInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakerInfos) > 0 {
		for _, e := range m.StakerInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenId != 0 {
		n += 1 + sovQuery(uint64(m.TokenId))
	}
	return n
}

func (m *QueryGetLatestPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenId != 0 {
		n += 1 + sovQuery(uint64(m.TokenId))
	}
	return n
}

func (m *QueryGetPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Prices.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLatestPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorUpdateBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetValidatorUpdateBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidatorUpdateBlock.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIndexRecentParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetIndexRecentParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IndexRecentParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIndexRecentMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetIndexRecentMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IndexRecentMsg.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRecentMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	return n
}

func (m *QueryGetRecentMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RecentMsg.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRecentMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRecentMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecentMsg) > 0 {
		for _, e := range m.RecentMsg {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecentParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	return n
}

func (m *QueryGetRecentParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RecentParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRecentParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRecentParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecentParams) > 0 {
		for _, e := range m.RecentParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenIndexesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenIndexesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenIndexesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenIndexesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenIndexesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenIndexesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIndexes = append(m.TokenIndexes, &TokenIndex{})
			if err := m.TokenIndexes[len(m.TokenIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakerList == nil {
				m.StakerList = &StakerList{}
			}
			if err := m.StakerList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakerInfo == nil {
				m.StakerInfo = &StakerInfo{}
			}
			if err := m.StakerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerInfos = append(m.StakerInfos, &StakerInfo{})
			if err := m.StakerInfos[len(m.StakerInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, Prices{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorUpdateBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorUpdateBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdateBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorUpdateBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecentParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexRecentParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecentMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexRecentMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecentMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentMsg = append(m.RecentMsg, RecentMsg{})
			if err := m.RecentMsg[len(m.RecentMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecentParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentParams = append(m.RecentParams, RecentParams{})
			if err := m.RecentParams[len(m.RecentParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
