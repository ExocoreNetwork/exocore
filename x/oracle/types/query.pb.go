// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPricesRequest struct {
	TokenId int32 `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (m *QueryGetPricesRequest) Reset()         { *m = QueryGetPricesRequest{} }
func (m *QueryGetPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPricesRequest) ProtoMessage()    {}
func (*QueryGetPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{2}
}
func (m *QueryGetPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPricesRequest.Merge(m, src)
}
func (m *QueryGetPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPricesRequest proto.InternalMessageInfo

func (m *QueryGetPricesRequest) GetTokenId() int32 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

type QueryGetPricesResponse struct {
	Prices Prices `protobuf:"bytes,1,opt,name=prices,proto3" json:"prices"`
}

func (m *QueryGetPricesResponse) Reset()         { *m = QueryGetPricesResponse{} }
func (m *QueryGetPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPricesResponse) ProtoMessage()    {}
func (*QueryGetPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{3}
}
func (m *QueryGetPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPricesResponse.Merge(m, src)
}
func (m *QueryGetPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPricesResponse proto.InternalMessageInfo

func (m *QueryGetPricesResponse) GetPrices() Prices {
	if m != nil {
		return m.Prices
	}
	return Prices{}
}

type QueryAllPricesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPricesRequest) Reset()         { *m = QueryAllPricesRequest{} }
func (m *QueryAllPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPricesRequest) ProtoMessage()    {}
func (*QueryAllPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{4}
}
func (m *QueryAllPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPricesRequest.Merge(m, src)
}
func (m *QueryAllPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPricesRequest proto.InternalMessageInfo

func (m *QueryAllPricesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPricesResponse struct {
	Prices     []Prices            `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPricesResponse) Reset()         { *m = QueryAllPricesResponse{} }
func (m *QueryAllPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPricesResponse) ProtoMessage()    {}
func (*QueryAllPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{5}
}
func (m *QueryAllPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPricesResponse.Merge(m, src)
}
func (m *QueryAllPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPricesResponse proto.InternalMessageInfo

func (m *QueryAllPricesResponse) GetPrices() []Prices {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *QueryAllPricesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValidatorUpdateBlockRequest struct {
}

func (m *QueryGetValidatorUpdateBlockRequest) Reset()         { *m = QueryGetValidatorUpdateBlockRequest{} }
func (m *QueryGetValidatorUpdateBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorUpdateBlockRequest) ProtoMessage()    {}
func (*QueryGetValidatorUpdateBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{6}
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorUpdateBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorUpdateBlockRequest.Merge(m, src)
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorUpdateBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorUpdateBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorUpdateBlockRequest proto.InternalMessageInfo

type QueryGetValidatorUpdateBlockResponse struct {
	ValidatorUpdateBlock ValidatorUpdateBlock `protobuf:"bytes,1,opt,name=ValidatorUpdateBlock,proto3" json:"ValidatorUpdateBlock"`
}

func (m *QueryGetValidatorUpdateBlockResponse) Reset()         { *m = QueryGetValidatorUpdateBlockResponse{} }
func (m *QueryGetValidatorUpdateBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorUpdateBlockResponse) ProtoMessage()    {}
func (*QueryGetValidatorUpdateBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{7}
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorUpdateBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorUpdateBlockResponse.Merge(m, src)
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorUpdateBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorUpdateBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorUpdateBlockResponse proto.InternalMessageInfo

func (m *QueryGetValidatorUpdateBlockResponse) GetValidatorUpdateBlock() ValidatorUpdateBlock {
	if m != nil {
		return m.ValidatorUpdateBlock
	}
	return ValidatorUpdateBlock{}
}

type QueryGetIndexRecentParamsRequest struct {
}

func (m *QueryGetIndexRecentParamsRequest) Reset()         { *m = QueryGetIndexRecentParamsRequest{} }
func (m *QueryGetIndexRecentParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentParamsRequest) ProtoMessage()    {}
func (*QueryGetIndexRecentParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{8}
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentParamsRequest.Merge(m, src)
}
func (m *QueryGetIndexRecentParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentParamsRequest proto.InternalMessageInfo

type QueryGetIndexRecentParamsResponse struct {
	IndexRecentParams IndexRecentParams `protobuf:"bytes,1,opt,name=IndexRecentParams,proto3" json:"IndexRecentParams"`
}

func (m *QueryGetIndexRecentParamsResponse) Reset()         { *m = QueryGetIndexRecentParamsResponse{} }
func (m *QueryGetIndexRecentParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentParamsResponse) ProtoMessage()    {}
func (*QueryGetIndexRecentParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{9}
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentParamsResponse.Merge(m, src)
}
func (m *QueryGetIndexRecentParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentParamsResponse proto.InternalMessageInfo

func (m *QueryGetIndexRecentParamsResponse) GetIndexRecentParams() IndexRecentParams {
	if m != nil {
		return m.IndexRecentParams
	}
	return IndexRecentParams{}
}

type QueryGetIndexRecentMsgRequest struct {
}

func (m *QueryGetIndexRecentMsgRequest) Reset()         { *m = QueryGetIndexRecentMsgRequest{} }
func (m *QueryGetIndexRecentMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentMsgRequest) ProtoMessage()    {}
func (*QueryGetIndexRecentMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{10}
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentMsgRequest.Merge(m, src)
}
func (m *QueryGetIndexRecentMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentMsgRequest proto.InternalMessageInfo

type QueryGetIndexRecentMsgResponse struct {
	IndexRecentMsg IndexRecentMsg `protobuf:"bytes,1,opt,name=IndexRecentMsg,proto3" json:"IndexRecentMsg"`
}

func (m *QueryGetIndexRecentMsgResponse) Reset()         { *m = QueryGetIndexRecentMsgResponse{} }
func (m *QueryGetIndexRecentMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIndexRecentMsgResponse) ProtoMessage()    {}
func (*QueryGetIndexRecentMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{11}
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIndexRecentMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIndexRecentMsgResponse.Merge(m, src)
}
func (m *QueryGetIndexRecentMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIndexRecentMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIndexRecentMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIndexRecentMsgResponse proto.InternalMessageInfo

func (m *QueryGetIndexRecentMsgResponse) GetIndexRecentMsg() IndexRecentMsg {
	if m != nil {
		return m.IndexRecentMsg
	}
	return IndexRecentMsg{}
}

type QueryGetRecentMsgRequest struct {
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *QueryGetRecentMsgRequest) Reset()         { *m = QueryGetRecentMsgRequest{} }
func (m *QueryGetRecentMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentMsgRequest) ProtoMessage()    {}
func (*QueryGetRecentMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{12}
}
func (m *QueryGetRecentMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentMsgRequest.Merge(m, src)
}
func (m *QueryGetRecentMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentMsgRequest proto.InternalMessageInfo

func (m *QueryGetRecentMsgRequest) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type QueryGetRecentMsgResponse struct {
	RecentMsg RecentMsg `protobuf:"bytes,1,opt,name=recentMsg,proto3" json:"recentMsg"`
}

func (m *QueryGetRecentMsgResponse) Reset()         { *m = QueryGetRecentMsgResponse{} }
func (m *QueryGetRecentMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentMsgResponse) ProtoMessage()    {}
func (*QueryGetRecentMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{13}
}
func (m *QueryGetRecentMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentMsgResponse.Merge(m, src)
}
func (m *QueryGetRecentMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentMsgResponse proto.InternalMessageInfo

func (m *QueryGetRecentMsgResponse) GetRecentMsg() RecentMsg {
	if m != nil {
		return m.RecentMsg
	}
	return RecentMsg{}
}

type QueryAllRecentMsgRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentMsgRequest) Reset()         { *m = QueryAllRecentMsgRequest{} }
func (m *QueryAllRecentMsgRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentMsgRequest) ProtoMessage()    {}
func (*QueryAllRecentMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{14}
}
func (m *QueryAllRecentMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentMsgRequest.Merge(m, src)
}
func (m *QueryAllRecentMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentMsgRequest proto.InternalMessageInfo

func (m *QueryAllRecentMsgRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRecentMsgResponse struct {
	RecentMsg  []RecentMsg         `protobuf:"bytes,1,rep,name=recentMsg,proto3" json:"recentMsg"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentMsgResponse) Reset()         { *m = QueryAllRecentMsgResponse{} }
func (m *QueryAllRecentMsgResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentMsgResponse) ProtoMessage()    {}
func (*QueryAllRecentMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{15}
}
func (m *QueryAllRecentMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentMsgResponse.Merge(m, src)
}
func (m *QueryAllRecentMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentMsgResponse proto.InternalMessageInfo

func (m *QueryAllRecentMsgResponse) GetRecentMsg() []RecentMsg {
	if m != nil {
		return m.RecentMsg
	}
	return nil
}

func (m *QueryAllRecentMsgResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRecentParamsRequest struct {
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *QueryGetRecentParamsRequest) Reset()         { *m = QueryGetRecentParamsRequest{} }
func (m *QueryGetRecentParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentParamsRequest) ProtoMessage()    {}
func (*QueryGetRecentParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{16}
}
func (m *QueryGetRecentParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentParamsRequest.Merge(m, src)
}
func (m *QueryGetRecentParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentParamsRequest proto.InternalMessageInfo

func (m *QueryGetRecentParamsRequest) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type QueryGetRecentParamsResponse struct {
	RecentParams RecentParams `protobuf:"bytes,1,opt,name=recentParams,proto3" json:"recentParams"`
}

func (m *QueryGetRecentParamsResponse) Reset()         { *m = QueryGetRecentParamsResponse{} }
func (m *QueryGetRecentParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRecentParamsResponse) ProtoMessage()    {}
func (*QueryGetRecentParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{17}
}
func (m *QueryGetRecentParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRecentParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRecentParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRecentParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRecentParamsResponse.Merge(m, src)
}
func (m *QueryGetRecentParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRecentParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRecentParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRecentParamsResponse proto.InternalMessageInfo

func (m *QueryGetRecentParamsResponse) GetRecentParams() RecentParams {
	if m != nil {
		return m.RecentParams
	}
	return RecentParams{}
}

type QueryAllRecentParamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentParamsRequest) Reset()         { *m = QueryAllRecentParamsRequest{} }
func (m *QueryAllRecentParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentParamsRequest) ProtoMessage()    {}
func (*QueryAllRecentParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{18}
}
func (m *QueryAllRecentParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentParamsRequest.Merge(m, src)
}
func (m *QueryAllRecentParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentParamsRequest proto.InternalMessageInfo

func (m *QueryAllRecentParamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRecentParamsResponse struct {
	RecentParams []RecentParams      `protobuf:"bytes,1,rep,name=recentParams,proto3" json:"recentParams"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRecentParamsResponse) Reset()         { *m = QueryAllRecentParamsResponse{} }
func (m *QueryAllRecentParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRecentParamsResponse) ProtoMessage()    {}
func (*QueryAllRecentParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f604621c8da1a6f3, []int{19}
}
func (m *QueryAllRecentParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRecentParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRecentParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRecentParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRecentParamsResponse.Merge(m, src)
}
func (m *QueryAllRecentParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRecentParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRecentParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRecentParamsResponse proto.InternalMessageInfo

func (m *QueryAllRecentParamsResponse) GetRecentParams() []RecentParams {
	if m != nil {
		return m.RecentParams
	}
	return nil
}

func (m *QueryAllRecentParamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "exocore.oracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "exocore.oracle.QueryParamsResponse")
	proto.RegisterType((*QueryGetPricesRequest)(nil), "exocore.oracle.QueryGetPricesRequest")
	proto.RegisterType((*QueryGetPricesResponse)(nil), "exocore.oracle.QueryGetPricesResponse")
	proto.RegisterType((*QueryAllPricesRequest)(nil), "exocore.oracle.QueryAllPricesRequest")
	proto.RegisterType((*QueryAllPricesResponse)(nil), "exocore.oracle.QueryAllPricesResponse")
	proto.RegisterType((*QueryGetValidatorUpdateBlockRequest)(nil), "exocore.oracle.QueryGetValidatorUpdateBlockRequest")
	proto.RegisterType((*QueryGetValidatorUpdateBlockResponse)(nil), "exocore.oracle.QueryGetValidatorUpdateBlockResponse")
	proto.RegisterType((*QueryGetIndexRecentParamsRequest)(nil), "exocore.oracle.QueryGetIndexRecentParamsRequest")
	proto.RegisterType((*QueryGetIndexRecentParamsResponse)(nil), "exocore.oracle.QueryGetIndexRecentParamsResponse")
	proto.RegisterType((*QueryGetIndexRecentMsgRequest)(nil), "exocore.oracle.QueryGetIndexRecentMsgRequest")
	proto.RegisterType((*QueryGetIndexRecentMsgResponse)(nil), "exocore.oracle.QueryGetIndexRecentMsgResponse")
	proto.RegisterType((*QueryGetRecentMsgRequest)(nil), "exocore.oracle.QueryGetRecentMsgRequest")
	proto.RegisterType((*QueryGetRecentMsgResponse)(nil), "exocore.oracle.QueryGetRecentMsgResponse")
	proto.RegisterType((*QueryAllRecentMsgRequest)(nil), "exocore.oracle.QueryAllRecentMsgRequest")
	proto.RegisterType((*QueryAllRecentMsgResponse)(nil), "exocore.oracle.QueryAllRecentMsgResponse")
	proto.RegisterType((*QueryGetRecentParamsRequest)(nil), "exocore.oracle.QueryGetRecentParamsRequest")
	proto.RegisterType((*QueryGetRecentParamsResponse)(nil), "exocore.oracle.QueryGetRecentParamsResponse")
	proto.RegisterType((*QueryAllRecentParamsRequest)(nil), "exocore.oracle.QueryAllRecentParamsRequest")
	proto.RegisterType((*QueryAllRecentParamsResponse)(nil), "exocore.oracle.QueryAllRecentParamsResponse")
}

func init() { proto.RegisterFile("exocore/oracle/query.proto", fileDescriptor_f604621c8da1a6f3) }

var fileDescriptor_f604621c8da1a6f3 = []byte{
	// 948 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x3d, 0x4d, 0x13, 0xd4, 0x69, 0x55, 0xc4, 0x60, 0xaa, 0x74, 0x1b, 0x36, 0xed, 0xb4,
	0x6e, 0x53, 0xdc, 0xee, 0xc6, 0xb1, 0xa1, 0x02, 0xd1, 0x43, 0x22, 0xd1, 0xaa, 0x40, 0xa3, 0x60,
	0x29, 0x1c, 0x72, 0xc0, 0x5a, 0xdb, 0xc3, 0x62, 0x65, 0xbd, 0xe3, 0xec, 0xae, 0x43, 0x42, 0x14,
	0x09, 0x71, 0xe0, 0x1c, 0x09, 0x09, 0x0e, 0xdc, 0xe0, 0x00, 0x37, 0x2e, 0x7c, 0x00, 0x8e, 0x39,
	0x46, 0xe2, 0xc2, 0x09, 0xa1, 0x84, 0x0f, 0x82, 0x3c, 0xfb, 0xd6, 0xf6, 0xce, 0xce, 0xae, 0xd7,
	0xc8, 0xb7, 0xec, 0xbe, 0xff, 0x7b, 0xef, 0xf7, 0xde, 0x3c, 0xef, 0x9b, 0x60, 0x8d, 0x1d, 0xf0,
	0x16, 0xf7, 0x98, 0xc9, 0x3d, 0xab, 0xe5, 0x30, 0x73, 0xaf, 0xcf, 0xbc, 0x43, 0xa3, 0xe7, 0xf1,
	0x80, 0x93, 0xeb, 0x60, 0x33, 0x42, 0x9b, 0x56, 0xb4, 0xb9, 0xcd, 0x85, 0xc9, 0x1c, 0xfc, 0x15,
	0xaa, 0xb4, 0x25, 0x9b, 0x73, 0xdb, 0x61, 0xa6, 0xd5, 0xeb, 0x98, 0x96, 0xeb, 0xf2, 0xc0, 0x0a,
	0x3a, 0xdc, 0xf5, 0xc1, 0xfa, 0x56, 0x8b, 0xfb, 0x5d, 0xee, 0x9b, 0x4d, 0xcb, 0x87, 0xe0, 0xe6,
	0x7e, 0xa5, 0xc9, 0x02, 0xab, 0x62, 0xf6, 0x2c, 0xbb, 0xe3, 0x0a, 0x31, 0x68, 0x6f, 0x49, 0x2c,
	0x3d, 0xcb, 0xb3, 0xba, 0x7e, 0x9a, 0xd1, 0xeb, 0xb4, 0x58, 0x64, 0x2c, 0x4b, 0xc6, 0x7d, 0xcb,
	0xe9, 0xb4, 0xad, 0x80, 0x7b, 0x8d, 0x7e, 0xaf, 0x6d, 0x05, 0xac, 0xd1, 0x74, 0x78, 0x6b, 0x17,
	0xc4, 0x2b, 0x92, 0xb8, 0xe3, 0xb6, 0xd9, 0x41, 0xc3, 0x63, 0x2d, 0xe6, 0x06, 0x8d, 0x58, 0xce,
	0x52, 0x96, 0xb2, 0xeb, 0xdb, 0x20, 0x5b, 0x96, 0x64, 0x09, 0x01, 0x55, 0x0b, 0xc6, 0x73, 0xd1,
	0x22, 0x26, 0x9f, 0x0c, 0xda, 0xb3, 0x25, 0x5e, 0xd6, 0xd9, 0x5e, 0x9f, 0xf9, 0x01, 0xfd, 0x08,
	0xbf, 0x1e, 0x7b, 0xeb, 0xf7, 0xb8, 0xeb, 0x33, 0x52, 0xc3, 0x0b, 0xa1, 0xf3, 0x22, 0xba, 0x8d,
	0x56, 0xae, 0xae, 0xdd, 0x30, 0xe2, 0x47, 0x65, 0x84, 0xfa, 0x8d, 0xcb, 0xa7, 0x7f, 0x2f, 0x17,
	0xea, 0xa0, 0xa5, 0x15, 0xfc, 0x86, 0x08, 0xf6, 0x9c, 0x05, 0x5b, 0xa2, 0x7b, 0x90, 0x85, 0x2c,
	0xe2, 0x57, 0x02, 0xbe, 0xcb, 0xdc, 0x17, 0x6d, 0x11, 0x6f, 0xbe, 0x1e, 0x3d, 0xd2, 0x4d, 0x7c,
	0x43, 0x76, 0x19, 0x43, 0x10, 0x6f, 0x52, 0x11, 0x84, 0x75, 0x88, 0x20, 0x9e, 0x68, 0x03, 0x10,
	0xd6, 0x1d, 0x27, 0x8e, 0xf0, 0x0c, 0xe3, 0xd1, 0x3c, 0x40, 0xc8, 0xfb, 0x46, 0x38, 0x3c, 0xc6,
	0x60, 0x78, 0x8c, 0x70, 0x32, 0x61, 0x78, 0x8c, 0x2d, 0xcb, 0x66, 0xe0, 0x5b, 0x1f, 0xf3, 0xa4,
	0x3f, 0x20, 0x20, 0x1e, 0xcb, 0xa0, 0x20, 0x9e, 0xcb, 0x4b, 0x4c, 0x9e, 0xc7, 0xc0, 0x2e, 0x09,
	0xb0, 0x07, 0x13, 0xc1, 0xc2, 0x94, 0x31, 0xb2, 0x12, 0xbe, 0x1b, 0xb5, 0xf2, 0xd3, 0x68, 0x3c,
	0xb7, 0xc5, 0x74, 0x6e, 0x0c, 0x86, 0x33, 0x3a, 0xf1, 0x6f, 0x11, 0xbe, 0x97, 0xad, 0x83, 0x72,
	0x3e, 0xc3, 0x45, 0x95, 0x1d, 0x7a, 0x77, 0x4f, 0x2e, 0x4e, 0xa5, 0x85, 0x52, 0x95, 0x71, 0x28,
	0xc5, 0xb7, 0x23, 0x8e, 0x17, 0x83, 0xb9, 0xaf, 0x8b, 0xa1, 0x8d, 0x8f, 0xe7, 0x57, 0xf8, 0x4e,
	0x86, 0x06, 0x40, 0xb7, 0xf1, 0x6b, 0x09, 0x23, 0x50, 0xde, 0x91, 0x29, 0x13, 0x42, 0x40, 0x4c,
	0x46, 0xa0, 0xcb, 0xf8, 0x4d, 0x45, 0xee, 0x97, 0xbe, 0x1d, 0xc1, 0xb9, 0x58, 0x4f, 0x13, 0x00,
	0xd9, 0xc7, 0xf8, 0x7a, 0xdc, 0x02, 0x58, 0x7a, 0x06, 0xd6, 0x4b, 0xdf, 0x06, 0x26, 0xc9, 0x97,
	0xae, 0xe2, 0xc5, 0x28, 0x9f, 0xcc, 0x42, 0x8a, 0x78, 0xbe, 0x39, 0x3c, 0x9d, 0xcb, 0xf5, 0xf0,
	0x81, 0xee, 0xe0, 0x9b, 0x0a, 0x0f, 0x80, 0x7b, 0x8a, 0xaf, 0x78, 0x12, 0xd7, 0x4d, 0x99, 0x4b,
	0x46, 0x1a, 0x79, 0xd0, 0x26, 0xd0, 0xac, 0x3b, 0x4e, 0x82, 0x66, 0x56, 0x3f, 0xb6, 0x9f, 0x11,
	0x14, 0x10, 0x4f, 0xa2, 0x2e, 0x60, 0x6e, 0xba, 0x02, 0x66, 0xf7, 0xc3, 0xab, 0xe2, 0x5b, 0xf1,
	0x2e, 0xc7, 0x66, 0x38, 0xe5, 0x68, 0x3e, 0xc7, 0x4b, 0x6a, 0x27, 0x28, 0xee, 0x19, 0xbe, 0xe6,
	0x25, 0xe7, 0x79, 0x49, 0x5d, 0x5f, 0x6c, 0x94, 0x63, 0x7e, 0x94, 0x01, 0xdc, 0xb0, 0x83, 0x71,
	0xb8, 0x59, 0x9d, 0xd4, 0x6f, 0x08, 0xea, 0x49, 0xe4, 0x49, 0xad, 0x67, 0xee, 0xff, 0xd4, 0x33,
	0xb3, 0x53, 0x5b, 0x3b, 0xbd, 0x8a, 0xe7, 0x05, 0x31, 0xf9, 0x1a, 0xe1, 0x05, 0x88, 0x4e, 0x65,
	0x9e, 0xe4, 0xca, 0xd4, 0xee, 0x66, 0x6a, 0xc2, 0x4c, 0xf4, 0xf1, 0x37, 0x7f, 0xfe, 0xfb, 0xdd,
	0xa5, 0x07, 0xa4, 0x64, 0x7e, 0x10, 0x8a, 0x37, 0x59, 0xf0, 0x25, 0xf7, 0x76, 0x4d, 0xe5, 0x15,
	0x84, 0x9c, 0x0c, 0x10, 0xc2, 0x7d, 0x50, 0x52, 0x86, 0x97, 0x57, 0xaa, 0x76, 0x7f, 0x92, 0x0c,
	0x40, 0x9e, 0x08, 0x90, 0x0a, 0x31, 0x27, 0x81, 0x08, 0x37, 0xf3, 0x08, 0x16, 0xf3, 0x31, 0xf9,
	0x03, 0xa9, 0xbf, 0xff, 0xa4, 0x9a, 0x96, 0x39, 0x63, 0xeb, 0x68, 0xb5, 0xe9, 0x9c, 0x00, 0xfe,
	0xa9, 0x80, 0x7f, 0x42, 0xde, 0x9e, 0x00, 0xaf, 0xbe, 0x8e, 0x91, 0xdf, 0x91, 0x62, 0x33, 0x90,
	0xd5, 0x34, 0x94, 0xb4, 0x2d, 0xa4, 0x55, 0xa6, 0xf0, 0x00, 0xf2, 0xf7, 0x04, 0x79, 0x8d, 0xac,
	0x4d, 0x20, 0x57, 0xdc, 0x0d, 0xc9, 0xaf, 0x48, 0x5e, 0x1b, 0xe4, 0x71, 0x0e, 0x82, 0xd1, 0xf7,
	0x57, 0x33, 0xf2, 0xca, 0xa7, 0x1c, 0x12, 0xf9, 0x7e, 0x4a, 0x7e, 0x44, 0xf8, 0xca, 0x88, 0x72,
	0x25, 0x2d, 0x6d, 0x02, 0xf0, 0x61, 0x0e, 0x25, 0xb0, 0xbd, 0x2b, 0xd8, 0xaa, 0xa4, 0x32, 0x81,
	0x6d, 0x44, 0x65, 0x1e, 0x89, 0xe3, 0x3f, 0x26, 0xdf, 0x23, 0x7c, 0x6d, 0x18, 0x70, 0xdd, 0x71,
	0x52, 0x00, 0x15, 0x1b, 0x2c, 0x05, 0x50, 0xb5, 0x86, 0x68, 0x45, 0x00, 0x96, 0xc9, 0xc3, 0xdc,
	0x80, 0xe4, 0x97, 0x21, 0x18, 0xcc, 0x64, 0x39, 0xbb, 0x1f, 0xf1, 0x71, 0x7c, 0x94, 0x4f, 0x0c,
	0x78, 0xef, 0x0b, 0xbc, 0x77, 0x48, 0x2d, 0x1f, 0x5e, 0x38, 0x83, 0xc3, 0x16, 0xfe, 0x84, 0xf0,
	0xab, 0xe3, 0x61, 0x07, 0x5d, 0x2c, 0x67, 0xf7, 0x26, 0x0f, 0x6c, 0xca, 0x96, 0xa0, 0x35, 0x01,
	0x6b, 0x90, 0x47, 0xd3, 0xc0, 0x6e, 0x7c, 0x78, 0x7a, 0xae, 0xa3, 0xb3, 0x73, 0x1d, 0xfd, 0x73,
	0xae, 0xa3, 0x93, 0x0b, 0xbd, 0x70, 0x76, 0xa1, 0x17, 0xfe, 0xba, 0xd0, 0x0b, 0x3b, 0xab, 0x76,
	0x27, 0xf8, 0xa2, 0xdf, 0x34, 0x5a, 0xbc, 0x9b, 0x16, 0xf1, 0x20, 0x8a, 0x19, 0x1c, 0xf6, 0x98,
	0xdf, 0x5c, 0x10, 0xff, 0x2d, 0x55, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x5c, 0xa1, 0xc6,
	0xb8, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Prices items.
	Prices(ctx context.Context, in *QueryGetPricesRequest, opts ...grpc.CallOption) (*QueryGetPricesResponse, error)
	// Queries a ValidatorUpdateBlock by index.
	ValidatorUpdateBlock(ctx context.Context, in *QueryGetValidatorUpdateBlockRequest, opts ...grpc.CallOption) (*QueryGetValidatorUpdateBlockResponse, error)
	// Queries a IndexRecentParams by index.
	IndexRecentParams(ctx context.Context, in *QueryGetIndexRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentParamsResponse, error)
	// Queries a IndexRecentMsg by index.
	IndexRecentMsg(ctx context.Context, in *QueryGetIndexRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentMsgResponse, error)
	// Queries a list of RecentMsg items.
	RecentMsg(ctx context.Context, in *QueryGetRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetRecentMsgResponse, error)
	// RecentMsgAll all RecentMsg items.
	RecentMsgAll(ctx context.Context, in *QueryAllRecentMsgRequest, opts ...grpc.CallOption) (*QueryAllRecentMsgResponse, error)
	// Queries a list of RecentParams items.
	RecentParams(ctx context.Context, in *QueryGetRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetRecentParamsResponse, error)
	// RecentParamsAll query all RecentParams.
	RecentParamsAll(ctx context.Context, in *QueryAllRecentParamsRequest, opts ...grpc.CallOption) (*QueryAllRecentParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Prices(ctx context.Context, in *QueryGetPricesRequest, opts ...grpc.CallOption) (*QueryGetPricesResponse, error) {
	out := new(QueryGetPricesResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/Prices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorUpdateBlock(ctx context.Context, in *QueryGetValidatorUpdateBlockRequest, opts ...grpc.CallOption) (*QueryGetValidatorUpdateBlockResponse, error) {
	out := new(QueryGetValidatorUpdateBlockResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/ValidatorUpdateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexRecentParams(ctx context.Context, in *QueryGetIndexRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentParamsResponse, error) {
	out := new(QueryGetIndexRecentParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/IndexRecentParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexRecentMsg(ctx context.Context, in *QueryGetIndexRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetIndexRecentMsgResponse, error) {
	out := new(QueryGetIndexRecentMsgResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/IndexRecentMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentMsg(ctx context.Context, in *QueryGetRecentMsgRequest, opts ...grpc.CallOption) (*QueryGetRecentMsgResponse, error) {
	out := new(QueryGetRecentMsgResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/RecentMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentMsgAll(ctx context.Context, in *QueryAllRecentMsgRequest, opts ...grpc.CallOption) (*QueryAllRecentMsgResponse, error) {
	out := new(QueryAllRecentMsgResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/RecentMsgAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentParams(ctx context.Context, in *QueryGetRecentParamsRequest, opts ...grpc.CallOption) (*QueryGetRecentParamsResponse, error) {
	out := new(QueryGetRecentParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/RecentParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecentParamsAll(ctx context.Context, in *QueryAllRecentParamsRequest, opts ...grpc.CallOption) (*QueryAllRecentParamsResponse, error) {
	out := new(QueryAllRecentParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.oracle.Query/RecentParamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Prices items.
	Prices(context.Context, *QueryGetPricesRequest) (*QueryGetPricesResponse, error)
	// Queries a ValidatorUpdateBlock by index.
	ValidatorUpdateBlock(context.Context, *QueryGetValidatorUpdateBlockRequest) (*QueryGetValidatorUpdateBlockResponse, error)
	// Queries a IndexRecentParams by index.
	IndexRecentParams(context.Context, *QueryGetIndexRecentParamsRequest) (*QueryGetIndexRecentParamsResponse, error)
	// Queries a IndexRecentMsg by index.
	IndexRecentMsg(context.Context, *QueryGetIndexRecentMsgRequest) (*QueryGetIndexRecentMsgResponse, error)
	// Queries a list of RecentMsg items.
	RecentMsg(context.Context, *QueryGetRecentMsgRequest) (*QueryGetRecentMsgResponse, error)
	// RecentMsgAll all RecentMsg items.
	RecentMsgAll(context.Context, *QueryAllRecentMsgRequest) (*QueryAllRecentMsgResponse, error)
	// Queries a list of RecentParams items.
	RecentParams(context.Context, *QueryGetRecentParamsRequest) (*QueryGetRecentParamsResponse, error)
	// RecentParamsAll query all RecentParams.
	RecentParamsAll(context.Context, *QueryAllRecentParamsRequest) (*QueryAllRecentParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Prices(ctx context.Context, req *QueryGetPricesRequest) (*QueryGetPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prices not implemented")
}
func (*UnimplementedQueryServer) ValidatorUpdateBlock(ctx context.Context, req *QueryGetValidatorUpdateBlockRequest) (*QueryGetValidatorUpdateBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorUpdateBlock not implemented")
}
func (*UnimplementedQueryServer) IndexRecentParams(ctx context.Context, req *QueryGetIndexRecentParamsRequest) (*QueryGetIndexRecentParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexRecentParams not implemented")
}
func (*UnimplementedQueryServer) IndexRecentMsg(ctx context.Context, req *QueryGetIndexRecentMsgRequest) (*QueryGetIndexRecentMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexRecentMsg not implemented")
}
func (*UnimplementedQueryServer) RecentMsg(ctx context.Context, req *QueryGetRecentMsgRequest) (*QueryGetRecentMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentMsg not implemented")
}
func (*UnimplementedQueryServer) RecentMsgAll(ctx context.Context, req *QueryAllRecentMsgRequest) (*QueryAllRecentMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentMsgAll not implemented")
}
func (*UnimplementedQueryServer) RecentParams(ctx context.Context, req *QueryGetRecentParamsRequest) (*QueryGetRecentParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentParams not implemented")
}
func (*UnimplementedQueryServer) RecentParamsAll(ctx context.Context, req *QueryAllRecentParamsRequest) (*QueryAllRecentParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentParamsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Prices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Prices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/Prices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Prices(ctx, req.(*QueryGetPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorUpdateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorUpdateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorUpdateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/ValidatorUpdateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorUpdateBlock(ctx, req.(*QueryGetValidatorUpdateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexRecentParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIndexRecentParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexRecentParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/IndexRecentParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexRecentParams(ctx, req.(*QueryGetIndexRecentParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexRecentMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIndexRecentMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexRecentMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/IndexRecentMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexRecentMsg(ctx, req.(*QueryGetIndexRecentMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecentMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/RecentMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentMsg(ctx, req.(*QueryGetRecentMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentMsgAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRecentMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentMsgAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/RecentMsgAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentMsgAll(ctx, req.(*QueryAllRecentMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRecentParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/RecentParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentParams(ctx, req.(*QueryGetRecentParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecentParamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRecentParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecentParamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.oracle.Query/RecentParamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecentParamsAll(ctx, req.(*QueryAllRecentParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Prices",
			Handler:    _Query_Prices_Handler,
		},
		{
			MethodName: "ValidatorUpdateBlock",
			Handler:    _Query_ValidatorUpdateBlock_Handler,
		},
		{
			MethodName: "IndexRecentParams",
			Handler:    _Query_IndexRecentParams_Handler,
		},
		{
			MethodName: "IndexRecentMsg",
			Handler:    _Query_IndexRecentMsg_Handler,
		},
		{
			MethodName: "RecentMsg",
			Handler:    _Query_RecentMsg_Handler,
		},
		{
			MethodName: "RecentMsgAll",
			Handler:    _Query_RecentMsgAll_Handler,
		},
		{
			MethodName: "RecentParams",
			Handler:    _Query_RecentParams_Handler,
		},
		{
			MethodName: "RecentParamsAll",
			Handler:    _Query_RecentParamsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/oracle/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Prices.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorUpdateBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorUpdateBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorUpdateBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorUpdateBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorUpdateBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorUpdateBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValidatorUpdateBlock.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IndexRecentParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetIndexRecentMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIndexRecentMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIndexRecentMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IndexRecentMsg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RecentMsg.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentMsgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecentMsg) > 0 {
		for iNdEx := len(m.RecentMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecentMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRecentParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRecentParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRecentParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RecentParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRecentParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRecentParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRecentParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecentParams) > 0 {
		for iNdEx := len(m.RecentParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecentParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenId != 0 {
		n += 1 + sovQuery(uint64(m.TokenId))
	}
	return n
}

func (m *QueryGetPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Prices.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorUpdateBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetValidatorUpdateBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidatorUpdateBlock.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIndexRecentParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetIndexRecentParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IndexRecentParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIndexRecentMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetIndexRecentMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IndexRecentMsg.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRecentMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	return n
}

func (m *QueryGetRecentMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RecentMsg.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRecentMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRecentMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecentMsg) > 0 {
		for _, e := range m.RecentMsg {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRecentParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	return n
}

func (m *QueryGetRecentParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RecentParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRecentParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRecentParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RecentParams) > 0 {
		for _, e := range m.RecentParams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, Prices{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorUpdateBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorUpdateBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorUpdateBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdateBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorUpdateBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecentParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexRecentParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIndexRecentMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIndexRecentMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecentMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndexRecentMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecentMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentMsg = append(m.RecentMsg, RecentMsg{})
			if err := m.RecentMsg[len(m.RecentMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRecentParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRecentParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRecentParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecentParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRecentParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRecentParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRecentParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentParams = append(m.RecentParams, RecentParams{})
			if err := m.RecentParams[len(m.RecentParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
