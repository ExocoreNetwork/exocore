// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/price.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// token price with timestamp fetched from source
// {price:"12345",decimal:"2"}->price: 123.45 usdt
type PriceTimeDetID struct {
	// price at a specific point(timestamp of non-deterministic source, roundId of deteministic source)
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// decimal of the corresponding price
	Decimal int32 `protobuf:"varint,2,opt,name=decimal,proto3" json:"decimal,omitempty"`
	// timestamp when the price corresponding to
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// det_id is used for deterministic source to tell of which round from this soure the price is corresponded
	DetID string `protobuf:"bytes,4,opt,name=det_id,json=detId,proto3" json:"det_id,omitempty"`
}

func (m *PriceTimeDetID) Reset()         { *m = PriceTimeDetID{} }
func (m *PriceTimeDetID) String() string { return proto.CompactTextString(m) }
func (*PriceTimeDetID) ProtoMessage()    {}
func (*PriceTimeDetID) Descriptor() ([]byte, []int) {
	return fileDescriptor_6755466c800b64fc, []int{0}
}
func (m *PriceTimeDetID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceTimeDetID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceTimeDetID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceTimeDetID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceTimeDetID.Merge(m, src)
}
func (m *PriceTimeDetID) XXX_Size() int {
	return m.Size()
}
func (m *PriceTimeDetID) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceTimeDetID.DiscardUnknown(m)
}

var xxx_messageInfo_PriceTimeDetID proto.InternalMessageInfo

func (m *PriceTimeDetID) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *PriceTimeDetID) GetDecimal() int32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *PriceTimeDetID) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PriceTimeDetID) GetDetID() string {
	if m != nil {
		return m.DetID
	}
	return ""
}

// price with its corresponding source
type PriceSource struct {
	// source_id refers to id from Params.SourceList, where this price fetched from, 0 is reserved for custom usage
	SourceID uint64 `protobuf:"varint,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// if source is deteministic like chainlink with roundID, set this value with which returned from source
	// up to 3 values in case of the async of network, to give more time for oracle nodes(validators) get into consensus
	// eg.with deterministic source, this array will contian 3 continuous values up to latest
	// for non-deterministic source, it's a choice by v2 rules.
	Prices []*PriceTimeDetID `protobuf:"bytes,2,rep,name=prices,proto3" json:"prices,omitempty"`
	// used for 0-sourceID-customDefinedSource
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *PriceSource) Reset()         { *m = PriceSource{} }
func (m *PriceSource) String() string { return proto.CompactTextString(m) }
func (*PriceSource) ProtoMessage()    {}
func (*PriceSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_6755466c800b64fc, []int{1}
}
func (m *PriceSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceSource.Merge(m, src)
}
func (m *PriceSource) XXX_Size() int {
	return m.Size()
}
func (m *PriceSource) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceSource.DiscardUnknown(m)
}

var xxx_messageInfo_PriceSource proto.InternalMessageInfo

func (m *PriceSource) GetSourceID() uint64 {
	if m != nil {
		return m.SourceID
	}
	return 0
}

func (m *PriceSource) GetPrices() []*PriceTimeDetID {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *PriceSource) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// price with its specified timestamp and roundid(if from deteministic source)
type PriceWithTimeAndRound struct {
	// price
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// decimal of the corresponding price
	Decimal int32 `protobuf:"varint,2,opt,name=decimal,proto3" json:"decimal,omitempty"`
	// timestamp when the price is corresponded
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// roundid of the price if the source is deteministic
	RoundID uint64 `protobuf:"varint,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (m *PriceWithTimeAndRound) Reset()         { *m = PriceWithTimeAndRound{} }
func (m *PriceWithTimeAndRound) String() string { return proto.CompactTextString(m) }
func (*PriceWithTimeAndRound) ProtoMessage()    {}
func (*PriceWithTimeAndRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_6755466c800b64fc, []int{2}
}
func (m *PriceWithTimeAndRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceWithTimeAndRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceWithTimeAndRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceWithTimeAndRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceWithTimeAndRound.Merge(m, src)
}
func (m *PriceWithTimeAndRound) XXX_Size() int {
	return m.Size()
}
func (m *PriceWithTimeAndRound) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceWithTimeAndRound.DiscardUnknown(m)
}

var xxx_messageInfo_PriceWithTimeAndRound proto.InternalMessageInfo

func (m *PriceWithTimeAndRound) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *PriceWithTimeAndRound) GetDecimal() int32 {
	if m != nil {
		return m.Decimal
	}
	return 0
}

func (m *PriceWithTimeAndRound) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PriceWithTimeAndRound) GetRoundID() uint64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func init() {
	proto.RegisterType((*PriceTimeDetID)(nil), "exocore.oracle.PriceTimeDetID")
	proto.RegisterType((*PriceSource)(nil), "exocore.oracle.PriceSource")
	proto.RegisterType((*PriceWithTimeAndRound)(nil), "exocore.oracle.PriceWithTimeAndRound")
}

func init() { proto.RegisterFile("exocore/oracle/price.proto", fileDescriptor_6755466c800b64fc) }

var fileDescriptor_6755466c800b64fc = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x7b, 0x6d, 0xd2, 0x36, 0x57, 0xe9, 0x70, 0x54, 0x08, 0x45, 0xd2, 0xd0, 0x41, 0xea,
	0x92, 0x88, 0x82, 0xbb, 0x21, 0x0e, 0x71, 0x10, 0x89, 0x82, 0xe0, 0x22, 0x6d, 0xee, 0xd1, 0x1e,
	0x36, 0xbd, 0x70, 0xb9, 0x62, 0xdd, 0x1c, 0x5c, 0x05, 0x3f, 0x96, 0x63, 0x47, 0xa7, 0x22, 0xe9,
	0x17, 0x91, 0xbb, 0x34, 0x48, 0x77, 0xb7, 0x77, 0xf9, 0xbd, 0xff, 0x7b, 0xff, 0xf7, 0xf2, 0x70,
	0x1f, 0x56, 0x3c, 0xe1, 0x02, 0x7c, 0x2e, 0xc6, 0xc9, 0x1c, 0xfc, 0x4c, 0xb0, 0x04, 0xbc, 0x4c,
	0x70, 0xc9, 0x49, 0x77, 0xc7, 0xbc, 0x92, 0xf5, 0x7b, 0x53, 0x3e, 0xe5, 0x1a, 0xf9, 0x2a, 0x2a,
	0xb3, 0x86, 0x6f, 0x08, 0x77, 0x6f, 0x95, 0xea, 0x9e, 0xa5, 0x10, 0x82, 0x8c, 0x42, 0xd2, 0xc3,
	0xa6, 0xae, 0x63, 0x23, 0x17, 0x8d, 0xac, 0xb8, 0x7c, 0x10, 0x1b, 0xb7, 0x28, 0x24, 0x2c, 0x1d,
	0xcf, 0xed, 0xba, 0x8b, 0x46, 0x66, 0x5c, 0x3d, 0xc9, 0x11, 0xb6, 0x24, 0x4b, 0x21, 0x97, 0xe3,
	0x34, 0xb3, 0x1b, 0x5a, 0xf3, 0xf7, 0x81, 0xb8, 0xb8, 0x49, 0x41, 0x3e, 0x31, 0x6a, 0x1b, 0x0a,
	0x05, 0x56, 0xb1, 0x19, 0x98, 0xba, 0x51, 0x6c, 0x52, 0x90, 0x11, 0x1d, 0xbe, 0x23, 0xdc, 0xd1,
	0x16, 0xee, 0xf8, 0x52, 0x24, 0x40, 0x4e, 0xb0, 0x95, 0xeb, 0x48, 0x89, 0x94, 0x07, 0x23, 0x38,
	0x28, 0x36, 0x83, 0x76, 0x89, 0xa3, 0x30, 0x6e, 0x97, 0x38, 0xa2, 0xe4, 0x02, 0x37, 0xb5, 0xbb,
	0xdc, 0xae, 0xbb, 0x8d, 0x51, 0xe7, 0xcc, 0xf1, 0xf6, 0x87, 0xf6, 0xf6, 0x47, 0x8b, 0x77, 0xd9,
	0x84, 0x60, 0x83, 0x42, 0x9e, 0xec, 0xdc, 0xea, 0x78, 0xf8, 0x81, 0xf0, 0xa1, 0x4e, 0x7f, 0x60,
	0x72, 0xa6, 0x24, 0x97, 0x0b, 0x1a, 0xf3, 0xe5, 0x82, 0xfe, 0xf3, 0x42, 0x8e, 0x71, 0x5b, 0xa8,
	0xb2, 0xd5, 0x4a, 0x8c, 0xa0, 0x53, 0x6c, 0x06, 0x2d, 0xdd, 0x2a, 0x0a, 0xe3, 0x96, 0x86, 0x11,
	0x0d, 0xae, 0xbf, 0x0a, 0x07, 0xad, 0x0b, 0x07, 0xfd, 0x14, 0x0e, 0xfa, 0xdc, 0x3a, 0xb5, 0xf5,
	0xd6, 0xa9, 0x7d, 0x6f, 0x9d, 0xda, 0xe3, 0xe9, 0x94, 0xc9, 0xd9, 0x72, 0xe2, 0x25, 0x3c, 0xf5,
	0xaf, 0xca, 0x79, 0x6f, 0x40, 0xbe, 0x70, 0xf1, 0xec, 0x57, 0xf7, 0xb0, 0xaa, 0x2e, 0x42, 0xbe,
	0x66, 0x90, 0x4f, 0x9a, 0xfa, 0x67, 0x9f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x58, 0xe2, 0x3e,
	0x36, 0x30, 0x02, 0x00, 0x00,
}

func (m *PriceTimeDetID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceTimeDetID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceTimeDetID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DetID) > 0 {
		i -= len(m.DetID)
		copy(dAtA[i:], m.DetID)
		i = encodeVarintPrice(dAtA, i, uint64(len(m.DetID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintPrice(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Decimal != 0 {
		i = encodeVarintPrice(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintPrice(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriceSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintPrice(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SourceID != 0 {
		i = encodeVarintPrice(dAtA, i, uint64(m.SourceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PriceWithTimeAndRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceWithTimeAndRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceWithTimeAndRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundID != 0 {
		i = encodeVarintPrice(dAtA, i, uint64(m.RoundID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintPrice(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Decimal != 0 {
		i = encodeVarintPrice(dAtA, i, uint64(m.Decimal))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintPrice(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrice(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PriceTimeDetID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovPrice(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovPrice(uint64(m.Decimal))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovPrice(uint64(l))
	}
	l = len(m.DetID)
	if l > 0 {
		n += 1 + l + sovPrice(uint64(l))
	}
	return n
}

func (m *PriceSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceID != 0 {
		n += 1 + sovPrice(uint64(m.SourceID))
	}
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovPrice(uint64(l))
		}
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovPrice(uint64(l))
	}
	return n
}

func (m *PriceWithTimeAndRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovPrice(uint64(l))
	}
	if m.Decimal != 0 {
		n += 1 + sovPrice(uint64(m.Decimal))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovPrice(uint64(l))
	}
	if m.RoundID != 0 {
		n += 1 + sovPrice(uint64(m.RoundID))
	}
	return n
}

func sovPrice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrice(x uint64) (n int) {
	return sovPrice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PriceTimeDetID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceTimeDetID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceTimeDetID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceID", wireType)
			}
			m.SourceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, &PriceTimeDetID{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceWithTimeAndRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceWithTimeAndRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceWithTimeAndRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimal", wireType)
			}
			m.Decimal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundID", wireType)
			}
			m.RoundID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrice = fmt.Errorf("proto: unexpected end of group")
)
