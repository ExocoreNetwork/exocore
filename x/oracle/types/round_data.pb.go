// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/round_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RoundData struct {
	TokenId      int32               `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	PricesSource []*PricesWithSource `protobuf:"bytes,2,rep,name=prices_source,json=pricesSource,proto3" json:"prices_source,omitempty"`
}

func (m *RoundData) Reset()         { *m = RoundData{} }
func (m *RoundData) String() string { return proto.CompactTextString(m) }
func (*RoundData) ProtoMessage()    {}
func (*RoundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5d205303c327dea, []int{0}
}
func (m *RoundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoundData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundData.Merge(m, src)
}
func (m *RoundData) XXX_Size() int {
	return m.Size()
}
func (m *RoundData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundData.DiscardUnknown(m)
}

var xxx_messageInfo_RoundData proto.InternalMessageInfo

func (m *RoundData) GetTokenId() int32 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *RoundData) GetPricesSource() []*PricesWithSource {
	if m != nil {
		return m.PricesSource
	}
	return nil
}

type PricesWithSource struct {
	SourceId        int32                    `protobuf:"varint,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	PricesTimeRound []*PriceWithTimeAndRound `protobuf:"bytes,2,rep,name=prices_time_round,json=pricesTimeRound,proto3" json:"prices_time_round,omitempty"`
}

func (m *PricesWithSource) Reset()         { *m = PricesWithSource{} }
func (m *PricesWithSource) String() string { return proto.CompactTextString(m) }
func (*PricesWithSource) ProtoMessage()    {}
func (*PricesWithSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5d205303c327dea, []int{1}
}
func (m *PricesWithSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PricesWithSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PricesWithSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PricesWithSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PricesWithSource.Merge(m, src)
}
func (m *PricesWithSource) XXX_Size() int {
	return m.Size()
}
func (m *PricesWithSource) XXX_DiscardUnknown() {
	xxx_messageInfo_PricesWithSource.DiscardUnknown(m)
}

var xxx_messageInfo_PricesWithSource proto.InternalMessageInfo

func (m *PricesWithSource) GetSourceId() int32 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *PricesWithSource) GetPricesTimeRound() []*PriceWithTimeAndRound {
	if m != nil {
		return m.PricesTimeRound
	}
	return nil
}

func init() {
	proto.RegisterType((*RoundData)(nil), "exocore.oracle.RoundData")
	proto.RegisterType((*PricesWithSource)(nil), "exocore.oracle.PricesWithSource")
}

func init() { proto.RegisterFile("exocore/oracle/round_data.proto", fileDescriptor_a5d205303c327dea) }

var fileDescriptor_a5d205303c327dea = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xad, 0xc8, 0x4f,
	0xce, 0x2f, 0x4a, 0xd5, 0xcf, 0x2f, 0x4a, 0x4c, 0xce, 0x49, 0xd5, 0x2f, 0xca, 0x2f, 0xcd, 0x4b,
	0x89, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x83, 0x2a, 0xd0,
	0x83, 0x28, 0x90, 0x92, 0x42, 0xd3, 0x50, 0x50, 0x94, 0x99, 0x9c, 0x0a, 0x51, 0xab, 0x94, 0xc3,
	0xc5, 0x19, 0x04, 0xd2, 0xef, 0x92, 0x58, 0x92, 0x28, 0x24, 0xc1, 0xc5, 0x5e, 0x92, 0x9f, 0x9d,
	0x9a, 0xe7, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0xe3, 0x0a, 0xb9, 0x72, 0xf1,
	0x82, 0x75, 0x15, 0xc7, 0x17, 0xe7, 0x97, 0x16, 0x25, 0xa7, 0x4a, 0x30, 0x29, 0x30, 0x6b, 0x70,
	0x1b, 0x29, 0xe8, 0xa1, 0x5a, 0xa5, 0x17, 0x00, 0x56, 0x14, 0x9e, 0x59, 0x92, 0x11, 0x0c, 0x56,
	0x17, 0xc4, 0x03, 0xd1, 0x06, 0xe1, 0x29, 0x35, 0x31, 0x72, 0x09, 0xa0, 0x2b, 0x11, 0x92, 0xe6,
	0xe2, 0x84, 0x18, 0x1a, 0x9f, 0x09, 0xb3, 0x97, 0x03, 0x22, 0xe0, 0x99, 0x22, 0x14, 0xc8, 0x25,
	0x08, 0xb5, 0xb8, 0x24, 0x33, 0x37, 0x35, 0x1e, 0xec, 0x57, 0xa8, 0xe5, 0xaa, 0x58, 0x2d, 0x07,
	0x19, 0x1c, 0x92, 0x99, 0x9b, 0xea, 0x98, 0x97, 0x02, 0xf6, 0x58, 0x10, 0x3f, 0x44, 0x3f, 0x48,
	0x0c, 0x2c, 0xe0, 0xe4, 0x75, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9,
	0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x06,
	0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xae, 0x10, 0xb3, 0xfd, 0x52,
	0x4b, 0xca, 0xf3, 0x8b, 0xb2, 0xf5, 0x61, 0x41, 0x58, 0x01, 0x0b, 0xc4, 0x92, 0xca, 0x82, 0xd4,
	0xe2, 0x24, 0x36, 0x70, 0x28, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x95, 0x4a, 0xae,
	0x94, 0x01, 0x00, 0x00,
}

func (m *RoundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PricesSource) > 0 {
		for iNdEx := len(m.PricesSource) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PricesSource[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoundData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TokenId != 0 {
		i = encodeVarintRoundData(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PricesWithSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PricesWithSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PricesWithSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PricesTimeRound) > 0 {
		for iNdEx := len(m.PricesTimeRound) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PricesTimeRound[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoundData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SourceId != 0 {
		i = encodeVarintRoundData(dAtA, i, uint64(m.SourceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoundData(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoundData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenId != 0 {
		n += 1 + sovRoundData(uint64(m.TokenId))
	}
	if len(m.PricesSource) > 0 {
		for _, e := range m.PricesSource {
			l = e.Size()
			n += 1 + l + sovRoundData(uint64(l))
		}
	}
	return n
}

func (m *PricesWithSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceId != 0 {
		n += 1 + sovRoundData(uint64(m.SourceId))
	}
	if len(m.PricesTimeRound) > 0 {
		for _, e := range m.PricesTimeRound {
			l = e.Size()
			n += 1 + l + sovRoundData(uint64(l))
		}
	}
	return n
}

func sovRoundData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoundData(x uint64) (n int) {
	return sovRoundData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoundData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoundData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricesSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoundData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoundData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoundData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PricesSource = append(m.PricesSource, &PricesWithSource{})
			if err := m.PricesSource[len(m.PricesSource)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoundData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoundData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PricesWithSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoundData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PricesWithSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PricesWithSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoundData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricesTimeRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoundData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoundData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoundData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PricesTimeRound = append(m.PricesTimeRound, &PriceWithTimeAndRound{})
			if err := m.PricesTimeRound[len(m.PricesTimeRound)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoundData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoundData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoundData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoundData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoundData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoundData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoundData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoundData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoundData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoundData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoundData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoundData = fmt.Errorf("proto: unexpected end of group")
)
