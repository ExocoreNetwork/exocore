// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/oracle/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the oracle module's genesis state.
type GenesisState struct {
	// module params
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// prices of all tokens
	PricesList []Prices `protobuf:"bytes,2,rep,name=prices_list,json=pricesList,proto3" json:"prices_list"`
	//TODO: userDefinedTokenFeeder
	// latest block on which the validator set be updated
	ValidatorUpdateBlock *ValidatorUpdateBlock `protobuf:"bytes,3,opt,name=validator_update_block,json=validatorUpdateBlock,proto3" json:"validator_update_block,omitempty"`
	// index for the cached recent params
	IndexRecentParams *IndexRecentParams `protobuf:"bytes,4,opt,name=index_recent_params,json=indexRecentParams,proto3" json:"index_recent_params,omitempty"`
	// index for the cached recent messages
	IndexRecentMsg *IndexRecentMsg `protobuf:"bytes,5,opt,name=index_recent_msg,json=indexRecentMsg,proto3" json:"index_recent_msg,omitempty"`
	// cached recent messages
	RecentMsgList []RecentMsg `protobuf:"bytes,6,rep,name=recent_msg_list,json=recentMsgList,proto3" json:"recent_msg_list"`
	// cached recent params
	RecentParamsList []RecentParams `protobuf:"bytes,7,rep,name=recent_params_list,json=recentParamsList,proto3" json:"recent_params_list"`
	// stakerInfos for each nst token
	StakerInfosAssets []StakerInfosAssets `protobuf:"bytes,8,rep,name=staker_infos_assets,json=stakerInfosAssets,proto3" json:"staker_infos_assets"`
	// stakerList for each nst token
	StakerListAssets []StakerListAssets `protobuf:"bytes,9,rep,name=staker_list_assets,json=stakerListAssets,proto3" json:"staker_list_assets"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b68ac5b0c7f4305, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPricesList() []Prices {
	if m != nil {
		return m.PricesList
	}
	return nil
}

func (m *GenesisState) GetValidatorUpdateBlock() *ValidatorUpdateBlock {
	if m != nil {
		return m.ValidatorUpdateBlock
	}
	return nil
}

func (m *GenesisState) GetIndexRecentParams() *IndexRecentParams {
	if m != nil {
		return m.IndexRecentParams
	}
	return nil
}

func (m *GenesisState) GetIndexRecentMsg() *IndexRecentMsg {
	if m != nil {
		return m.IndexRecentMsg
	}
	return nil
}

func (m *GenesisState) GetRecentMsgList() []RecentMsg {
	if m != nil {
		return m.RecentMsgList
	}
	return nil
}

func (m *GenesisState) GetRecentParamsList() []RecentParams {
	if m != nil {
		return m.RecentParamsList
	}
	return nil
}

func (m *GenesisState) GetStakerInfosAssets() []StakerInfosAssets {
	if m != nil {
		return m.StakerInfosAssets
	}
	return nil
}

func (m *GenesisState) GetStakerListAssets() []StakerListAssets {
	if m != nil {
		return m.StakerListAssets
	}
	return nil
}

// stakerInfosAssets bond stakerinfos to their related assets id
type StakerInfosAssets struct {
	// asset_id tells the assetid which the stakerInfos belong to
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// stakerInfos
	StakerInfos []*StakerInfo `protobuf:"bytes,2,rep,name=staker_infos,json=stakerInfos,proto3" json:"staker_infos,omitempty"`
}

func (m *StakerInfosAssets) Reset()         { *m = StakerInfosAssets{} }
func (m *StakerInfosAssets) String() string { return proto.CompactTextString(m) }
func (*StakerInfosAssets) ProtoMessage()    {}
func (*StakerInfosAssets) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b68ac5b0c7f4305, []int{1}
}
func (m *StakerInfosAssets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerInfosAssets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerInfosAssets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerInfosAssets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerInfosAssets.Merge(m, src)
}
func (m *StakerInfosAssets) XXX_Size() int {
	return m.Size()
}
func (m *StakerInfosAssets) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerInfosAssets.DiscardUnknown(m)
}

var xxx_messageInfo_StakerInfosAssets proto.InternalMessageInfo

func (m *StakerInfosAssets) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *StakerInfosAssets) GetStakerInfos() []*StakerInfo {
	if m != nil {
		return m.StakerInfos
	}
	return nil
}

// stakerListAssets bond stakerList to their related assets id
type StakerListAssets struct {
	// asset_id tells the assetid which the stakerList belong to
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// stakerList
	StakerList *StakerList `protobuf:"bytes,2,opt,name=staker_list,json=stakerList,proto3" json:"staker_list,omitempty"`
}

func (m *StakerListAssets) Reset()         { *m = StakerListAssets{} }
func (m *StakerListAssets) String() string { return proto.CompactTextString(m) }
func (*StakerListAssets) ProtoMessage()    {}
func (*StakerListAssets) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b68ac5b0c7f4305, []int{2}
}
func (m *StakerListAssets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerListAssets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerListAssets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerListAssets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerListAssets.Merge(m, src)
}
func (m *StakerListAssets) XXX_Size() int {
	return m.Size()
}
func (m *StakerListAssets) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerListAssets.DiscardUnknown(m)
}

var xxx_messageInfo_StakerListAssets proto.InternalMessageInfo

func (m *StakerListAssets) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *StakerListAssets) GetStakerList() *StakerList {
	if m != nil {
		return m.StakerList
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "exocore.oracle.v1.GenesisState")
	proto.RegisterType((*StakerInfosAssets)(nil), "exocore.oracle.v1.StakerInfosAssets")
	proto.RegisterType((*StakerListAssets)(nil), "exocore.oracle.v1.StakerListAssets")
}

func init() { proto.RegisterFile("exocore/oracle/v1/genesis.proto", fileDescriptor_6b68ac5b0c7f4305) }

var fileDescriptor_6b68ac5b0c7f4305 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x5b, 0x6f, 0xd3, 0x30,
	0x14, 0x80, 0xdb, 0xdd, 0xe7, 0x0e, 0x68, 0xbd, 0x09, 0x65, 0x15, 0x4b, 0x47, 0x19, 0x62, 0x12,
	0x52, 0xc2, 0xe0, 0x81, 0x37, 0x34, 0x2a, 0x21, 0xd4, 0x71, 0x11, 0x4a, 0xb9, 0x48, 0x93, 0x50,
	0xe4, 0xa6, 0x26, 0x58, 0x6d, 0xe3, 0xca, 0xf6, 0x4a, 0xf9, 0x17, 0xfc, 0xac, 0x3d, 0xee, 0x91,
	0x27, 0x04, 0xed, 0x1f, 0x41, 0x39, 0x76, 0x58, 0x73, 0x69, 0x79, 0x4b, 0x8e, 0xbf, 0xf3, 0xf9,
	0x9c, 0x63, 0xcb, 0xa8, 0x41, 0x27, 0x3c, 0xe0, 0x82, 0xba, 0x5c, 0x90, 0x60, 0x40, 0xdd, 0xf1,
	0x89, 0x1b, 0xd2, 0x88, 0x4a, 0x26, 0x9d, 0x91, 0xe0, 0x8a, 0xe3, 0x9a, 0x01, 0x1c, 0x0d, 0x38,
	0xe3, 0x93, 0xfa, 0x71, 0x3e, 0x87, 0x45, 0x3d, 0x3a, 0xf1, 0x05, 0x0d, 0x68, 0xa4, 0xfc, 0xa1,
	0x0c, 0x75, 0x72, 0xfd, 0xe1, 0x7f, 0xc8, 0x11, 0x11, 0x64, 0x68, 0x76, 0xaa, 0x1f, 0xe5, 0xe1,
	0x88, 0x28, 0x36, 0xa6, 0xbe, 0xe2, 0x7d, 0x1a, 0x19, 0xca, 0xce, 0x53, 0x29, 0x4b, 0xd1, 0xba,
	0x60, 0x01, 0x4d, 0xd6, 0x9b, 0xf9, 0xf5, 0x5c, 0xd9, 0xf7, 0x17, 0x32, 0xa9, 0xad, 0x9c, 0x3c,
	0x36, 0x26, 0x03, 0xd6, 0x23, 0x8a, 0x0b, 0xff, 0x62, 0xd4, 0x23, 0x8a, 0xfa, 0xdd, 0x01, 0x0f,
	0xfa, 0x86, 0xdf, 0x0b, 0x79, 0xc8, 0xe1, 0xd3, 0x8d, 0xbf, 0x74, 0xb4, 0xf9, 0x67, 0x1d, 0xed,
	0xbc, 0xd4, 0x23, 0xef, 0x28, 0xa2, 0x28, 0x7e, 0x8a, 0x36, 0xf4, 0x36, 0x56, 0xf9, 0xb0, 0x7c,
	0x5c, 0x79, 0xbc, 0xef, 0xe4, 0x8e, 0xc0, 0x79, 0x07, 0x40, 0x6b, 0xed, 0xf2, 0x57, 0xa3, 0xe4,
	0x19, 0x1c, 0x9f, 0xa2, 0x8a, 0x6e, 0xd5, 0x1f, 0x30, 0xa9, 0xac, 0x95, 0xc3, 0xd5, 0x45, 0xd9,
	0x40, 0x99, 0x6c, 0xa4, 0x73, 0x5e, 0x33, 0xa9, 0xf0, 0x67, 0x74, 0xbb, 0xb8, 0x03, 0x6b, 0x15,
	0x4a, 0x79, 0x50, 0x20, 0xfb, 0x98, 0x24, 0x7c, 0x00, 0xbe, 0x15, 0xe3, 0xde, 0xde, 0xb8, 0x20,
	0x8a, 0xdf, 0xa3, 0xdd, 0x82, 0xe3, 0xb7, 0xd6, 0xc0, 0x7d, 0x54, 0xe0, 0x6e, 0xc7, 0xb4, 0x07,
	0xb0, 0xee, 0xd8, 0xab, 0xb1, 0x6c, 0x08, 0xbf, 0x42, 0xd5, 0xec, 0xf5, 0xb3, 0xd6, 0x41, 0x79,
	0x77, 0xb9, 0xf2, 0x8d, 0x0c, 0xbd, 0x9b, 0x2c, 0xf5, 0x8f, 0xcf, 0xd0, 0xad, 0x6b, 0x8d, 0x9e,
	0xe3, 0x06, 0xcc, 0xf1, 0x4e, 0x81, 0xeb, 0x5f, 0x9a, 0x19, 0xe5, 0x0d, 0x91, 0x04, 0x60, 0x9a,
	0x1d, 0x84, 0x53, 0x8d, 0x6a, 0xdd, 0x26, 0xe8, 0x1a, 0x0b, 0x75, 0xa9, 0xa3, 0xad, 0x8a, 0xb9,
	0x18, 0x48, 0xcf, 0xd1, 0xae, 0x54, 0xa4, 0x4f, 0x85, 0xcf, 0xa2, 0x2f, 0x5c, 0xfa, 0x44, 0x4a,
	0xaa, 0xa4, 0xb5, 0x05, 0xd6, 0xa2, 0x19, 0x76, 0x80, 0x6e, 0xc7, 0xf0, 0x73, 0x60, 0x8d, 0xba,
	0x26, 0xb3, 0x0b, 0xf8, 0x13, 0xc2, 0xc6, 0x1d, 0x57, 0x9a, 0xa8, 0xb7, 0x41, 0x7d, 0x6f, 0xa1,
	0x3a, 0x2e, 0x2b, 0x65, 0xae, 0xca, 0x4c, 0xbc, 0x39, 0x42, 0xb5, 0x5c, 0x19, 0x78, 0x1f, 0x6d,
	0xc1, 0x0e, 0x3e, 0xeb, 0xc1, 0x4d, 0xdf, 0xf6, 0x36, 0xe1, 0xbf, 0xdd, 0xc3, 0xa7, 0x68, 0x67,
	0xbe, 0x49, 0x73, 0x95, 0x0f, 0x96, 0x76, 0xe7, 0x55, 0xe6, 0x1a, 0x6a, 0x0e, 0x51, 0x35, 0x5b,
	0xdd, 0xb2, 0x0d, 0x9f, 0xa1, 0xca, 0x5c, 0xe7, 0xd6, 0x0a, 0x5c, 0x9f, 0x83, 0xa5, 0x2d, 0x7b,
	0xe8, 0xba, 0xcd, 0xd6, 0xd9, 0xe5, 0xd4, 0x2e, 0x5f, 0x4d, 0xed, 0xf2, 0xef, 0xa9, 0x5d, 0xfe,
	0x31, 0xb3, 0x4b, 0x57, 0x33, 0xbb, 0xf4, 0x73, 0x66, 0x97, 0xce, 0x1f, 0x85, 0x4c, 0x7d, 0xbd,
	0xe8, 0x3a, 0x01, 0x1f, 0xba, 0x2f, 0xb4, 0xee, 0x2d, 0x55, 0xdf, 0xb8, 0xe8, 0xbb, 0xc9, 0xf3,
	0x31, 0x49, 0x1e, 0x10, 0xf5, 0x7d, 0x44, 0x65, 0x77, 0x03, 0xde, 0x85, 0x27, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x17, 0x12, 0x12, 0xc9, 0x9b, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerListAssets) > 0 {
		for iNdEx := len(m.StakerListAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakerListAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.StakerInfosAssets) > 0 {
		for iNdEx := len(m.StakerInfosAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakerInfosAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.RecentParamsList) > 0 {
		for iNdEx := len(m.RecentParamsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecentParamsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RecentMsgList) > 0 {
		for iNdEx := len(m.RecentMsgList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecentMsgList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.IndexRecentMsg != nil {
		{
			size, err := m.IndexRecentMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IndexRecentParams != nil {
		{
			size, err := m.IndexRecentParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ValidatorUpdateBlock != nil {
		{
			size, err := m.ValidatorUpdateBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PricesList) > 0 {
		for iNdEx := len(m.PricesList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PricesList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StakerInfosAssets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerInfosAssets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerInfosAssets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerInfos) > 0 {
		for iNdEx := len(m.StakerInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakerInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerListAssets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerListAssets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerListAssets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakerList != nil {
		{
			size, err := m.StakerList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.PricesList) > 0 {
		for _, e := range m.PricesList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.ValidatorUpdateBlock != nil {
		l = m.ValidatorUpdateBlock.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.IndexRecentParams != nil {
		l = m.IndexRecentParams.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.IndexRecentMsg != nil {
		l = m.IndexRecentMsg.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.RecentMsgList) > 0 {
		for _, e := range m.RecentMsgList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RecentParamsList) > 0 {
		for _, e := range m.RecentParamsList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StakerInfosAssets) > 0 {
		for _, e := range m.StakerInfosAssets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StakerListAssets) > 0 {
		for _, e := range m.StakerListAssets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *StakerInfosAssets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.StakerInfos) > 0 {
		for _, e := range m.StakerInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *StakerListAssets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.StakerList != nil {
		l = m.StakerList.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricesList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PricesList = append(m.PricesList, Prices{})
			if err := m.PricesList[len(m.PricesList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdateBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorUpdateBlock == nil {
				m.ValidatorUpdateBlock = &ValidatorUpdateBlock{}
			}
			if err := m.ValidatorUpdateBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecentParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexRecentParams == nil {
				m.IndexRecentParams = &IndexRecentParams{}
			}
			if err := m.IndexRecentParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecentMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexRecentMsg == nil {
				m.IndexRecentMsg = &IndexRecentMsg{}
			}
			if err := m.IndexRecentMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentMsgList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentMsgList = append(m.RecentMsgList, RecentMsg{})
			if err := m.RecentMsgList[len(m.RecentMsgList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentParamsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentParamsList = append(m.RecentParamsList, RecentParams{})
			if err := m.RecentParamsList[len(m.RecentParamsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerInfosAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerInfosAssets = append(m.StakerInfosAssets, StakerInfosAssets{})
			if err := m.StakerInfosAssets[len(m.StakerInfosAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerListAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerListAssets = append(m.StakerListAssets, StakerListAssets{})
			if err := m.StakerListAssets[len(m.StakerListAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerInfosAssets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerInfosAssets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerInfosAssets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerInfos = append(m.StakerInfos, &StakerInfo{})
			if err := m.StakerInfos[len(m.StakerInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerListAssets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerListAssets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerListAssets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakerList == nil {
				m.StakerList = &StakerList{}
			}
			if err := m.StakerList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
