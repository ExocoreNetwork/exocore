// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/appchain/subscriber/v1/genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/ExocoreNetwork/exocore/x/appchain/common/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState is the genesis state for the appchain subscriber module.
type GenesisState struct {
	// The first two fields are word-for-word pulled from `common.proto`, to be
	// filled by the coordinator module (or an export).
	// params is the parameters for the appchain subscriber module.
	Params types.SubscriberParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// coordinator is the coordinator information for the subscriber.
	Coordinator types.CoordinatorInfo `protobuf:"bytes,2,opt,name=coordinator,proto3" json:"coordinator"`
	// Below are the IBC parameters
	// coordinator_client_id is the client id of the coordinator chain.
	CoordinatorClientID string `protobuf:"bytes,3,opt,name=coordinator_client_id,json=coordinatorClientId,proto3" json:"coordinator_client_id,omitempty"`
	// coordinator_channel_id is the channel id of the coordinator chain.
	CoordinatorChannelID string `protobuf:"bytes,4,opt,name=coordinator_channel_id,json=coordinatorChannelId,proto3" json:"coordinator_channel_id,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f608de439fd2c5db, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() types.SubscriberParams {
	if m != nil {
		return m.Params
	}
	return types.SubscriberParams{}
}

func (m *GenesisState) GetCoordinator() types.CoordinatorInfo {
	if m != nil {
		return m.Coordinator
	}
	return types.CoordinatorInfo{}
}

func (m *GenesisState) GetCoordinatorClientID() string {
	if m != nil {
		return m.CoordinatorClientID
	}
	return ""
}

func (m *GenesisState) GetCoordinatorChannelID() string {
	if m != nil {
		return m.CoordinatorChannelID
	}
	return ""
}

// MaturingVSCPacket represents a vsc packet that is maturing internal to the
// subscriber module, where it has not yet relayed a VSCMatured packet back.
// While it is technically feasible to store this just as a key in the state,
// keeping it as a separate type allows exporting the genesis data.
// The key used is prefix + time + vscId.
type MaturingVSCPacket struct {
	// vsc_id is the id of the VSC that is maturing.
	ID uint64 `protobuf:"varint,1,opt,name=vsc_id,json=vscId,proto3" json:"vsc_id,omitempty"`
	// maturity_time is the time at which the VSC will mature.
	MaturityTime time.Time `protobuf:"bytes,2,opt,name=maturity_time,json=maturityTime,proto3,stdtime" json:"maturity_time"`
}

func (m *MaturingVSCPacket) Reset()         { *m = MaturingVSCPacket{} }
func (m *MaturingVSCPacket) String() string { return proto.CompactTextString(m) }
func (*MaturingVSCPacket) ProtoMessage()    {}
func (*MaturingVSCPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_f608de439fd2c5db, []int{1}
}
func (m *MaturingVSCPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaturingVSCPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaturingVSCPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaturingVSCPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaturingVSCPacket.Merge(m, src)
}
func (m *MaturingVSCPacket) XXX_Size() int {
	return m.Size()
}
func (m *MaturingVSCPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MaturingVSCPacket.DiscardUnknown(m)
}

var xxx_messageInfo_MaturingVSCPacket proto.InternalMessageInfo

func (m *MaturingVSCPacket) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MaturingVSCPacket) GetMaturityTime() time.Time {
	if m != nil {
		return m.MaturityTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "exocore.appchain.subscriber.v1.GenesisState")
	proto.RegisterType((*MaturingVSCPacket)(nil), "exocore.appchain.subscriber.v1.MaturingVSCPacket")
}

func init() {
	proto.RegisterFile("exocore/appchain/subscriber/v1/genesis.proto", fileDescriptor_f608de439fd2c5db)
}

var fileDescriptor_f608de439fd2c5db = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x52, 0x2a, 0xf0, 0xc6, 0x81, 0xac, 0x40, 0x55, 0x89, 0x64, 0xda, 0x85, 0x49,
	0x4c, 0xb6, 0x0a, 0x67, 0x2e, 0x69, 0x11, 0x0a, 0x88, 0x69, 0x4a, 0x11, 0x48, 0x5c, 0x2a, 0xc7,
	0xf1, 0x52, 0x6b, 0x8d, 0x1d, 0xd9, 0x6e, 0xd8, 0x0e, 0x7c, 0x87, 0x7d, 0xac, 0x1d, 0x38, 0xec,
	0xc8, 0xa9, 0xa0, 0xf4, 0x8b, 0x20, 0x3b, 0x09, 0x2d, 0x0a, 0xda, 0xed, 0xf9, 0xf9, 0xff, 0x7e,
	0x7e, 0xfa, 0xff, 0x0d, 0x4e, 0xe8, 0xa5, 0x20, 0x42, 0x52, 0x84, 0xf3, 0x9c, 0x2c, 0x30, 0xe3,
	0x48, 0xad, 0x62, 0x45, 0x24, 0x8b, 0xa9, 0x44, 0xc5, 0x18, 0xa5, 0x94, 0x53, 0xc5, 0x14, 0xcc,
	0xa5, 0xd0, 0xc2, 0xf5, 0x6a, 0x35, 0x6c, 0xd4, 0x70, 0xab, 0x86, 0xc5, 0x78, 0xf4, 0xa2, 0x45,
	0x23, 0x22, 0xcb, 0x04, 0x37, 0xa4, 0xaa, 0xaa, 0x40, 0xa3, 0x41, 0x2a, 0x52, 0x61, 0x4b, 0x64,
	0xaa, 0xba, 0xeb, 0xa7, 0x42, 0xa4, 0x4b, 0x8a, 0xec, 0x29, 0x5e, 0x9d, 0x23, 0xcd, 0x32, 0xaa,
	0x34, 0xce, 0xf2, 0x4a, 0x70, 0xf4, 0xa3, 0x0b, 0xf6, 0xdf, 0x55, 0x1b, 0xcd, 0x34, 0xd6, 0xd4,
	0x7d, 0x0f, 0xfa, 0x39, 0x96, 0x38, 0x53, 0x43, 0xe7, 0xd0, 0x39, 0xde, 0x7b, 0x75, 0x02, 0x5b,
	0x1b, 0xd6, 0xef, 0x16, 0x63, 0x38, 0xfb, 0xbb, 0xeb, 0x99, 0x9d, 0x09, 0x7a, 0x37, 0x6b, 0xbf,
	0x13, 0xd5, 0x04, 0x77, 0x06, 0xf6, 0x88, 0x10, 0x32, 0x61, 0x1c, 0x6b, 0x21, 0x87, 0x5d, 0x0b,
	0x7c, 0x79, 0x17, 0x70, 0xb2, 0x95, 0x87, 0xfc, 0x5c, 0xd4, 0xbc, 0x5d, 0x8a, 0xfb, 0x01, 0x3c,
	0xd9, 0x39, 0xce, 0xc9, 0x92, 0x51, 0xae, 0xe7, 0x2c, 0x19, 0xde, 0x3b, 0x74, 0x8e, 0x1f, 0x06,
	0xcf, 0xca, 0xb5, 0x7f, 0xb0, 0x83, 0x99, 0xd8, 0xfb, 0x70, 0x1a, 0x1d, 0x90, 0x56, 0x33, 0x71,
	0x4f, 0xc1, 0xd3, 0x7f, 0x60, 0x0b, 0xcc, 0x39, 0x5d, 0x1a, 0x5a, 0xcf, 0xd2, 0x86, 0xe5, 0xda,
	0x1f, 0xec, 0xd2, 0x2a, 0x41, 0x38, 0x8d, 0x06, 0xa4, 0xdd, 0x4d, 0x8e, 0xbe, 0x83, 0xc7, 0x1f,
	0xb1, 0x5e, 0x49, 0xc6, 0xd3, 0xcf, 0xb3, 0xc9, 0x19, 0x26, 0x17, 0x54, 0xbb, 0xcf, 0x41, 0xbf,
	0x50, 0xc4, 0x40, 0x8d, 0xa5, 0xbd, 0xa0, 0x5f, 0xae, 0xfd, 0x6e, 0x38, 0x8d, 0xee, 0x17, 0x8a,
	0x84, 0x89, 0x1b, 0x82, 0x47, 0x99, 0x9d, 0xd1, 0x57, 0x73, 0x13, 0x4f, 0xed, 0xd3, 0x08, 0x56,
	0xd9, 0xc1, 0x26, 0x3b, 0xf8, 0xa9, 0xc9, 0x2e, 0x78, 0x60, 0x6c, 0xb9, 0xfe, 0xe5, 0x3b, 0xd1,
	0x7e, 0x33, 0x6a, 0x2e, 0x83, 0x2f, 0x37, 0xa5, 0xe7, 0xdc, 0x96, 0x9e, 0xf3, 0xbb, 0xf4, 0x9c,
	0xeb, 0x8d, 0xd7, 0xb9, 0xdd, 0x78, 0x9d, 0x9f, 0x1b, 0xaf, 0xf3, 0xf5, 0x4d, 0xca, 0xf4, 0x62,
	0x15, 0x1b, 0xab, 0xd1, 0xdb, 0xca, 0xff, 0x53, 0xaa, 0xbf, 0x09, 0x79, 0x81, 0x9a, 0x1f, 0x76,
	0xf9, 0xdf, 0x1f, 0xab, 0xaf, 0x72, 0xaa, 0xe2, 0xbe, 0x5d, 0xe2, 0xf5, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x83, 0x95, 0xc1, 0xee, 0xdd, 0x02, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoordinatorChannelID) > 0 {
		i -= len(m.CoordinatorChannelID)
		copy(dAtA[i:], m.CoordinatorChannelID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CoordinatorChannelID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CoordinatorClientID) > 0 {
		i -= len(m.CoordinatorClientID)
		copy(dAtA[i:], m.CoordinatorClientID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CoordinatorClientID)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Coordinator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MaturingVSCPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaturingVSCPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaturingVSCPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.MaturityTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MaturityTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGenesis(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Coordinator.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.CoordinatorClientID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.CoordinatorChannelID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *MaturingVSCPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenesis(uint64(m.ID))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MaturityTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coordinator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaturingVSCPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaturingVSCPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaturingVSCPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.MaturityTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
