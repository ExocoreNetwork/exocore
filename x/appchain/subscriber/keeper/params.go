package keeper

import (
	"time"

	commontypes "github.com/ExocoreNetwork/exocore/x/appchain/common/types"
	"github.com/ExocoreNetwork/exocore/x/appchain/subscriber/types"
	sdk "github.com/cosmos/cosmos-sdk/types"
)

// SetParams sets the appchain coordinator parameters.
// The caller must ensure that the params are valid.
func (k Keeper) SetParams(ctx sdk.Context, params commontypes.SubscriberParams) {
	store := ctx.KVStore(k.storeKey)
	bz := k.cdc.MustMarshal(&params)
	store.Set(types.ParamsKey(), bz)
}

// GetParams gets the appchain coordinator parameters.
func (k Keeper) GetParams(ctx sdk.Context) (res commontypes.SubscriberParams) {
	store := ctx.KVStore(k.storeKey)
	bz := store.Get(types.ParamsKey())
	k.cdc.MustUnmarshal(bz, &res)
	return res
}

// SetCoordinatorFeePoolAddrStr sets the coordinator fee pool address string.
// This parameter is not necessarily provided at genesis and can be set later.
// This is because the genesis is generated by the coordinator chain based mostly
// on the registration transaction.
func (k Keeper) SetCoordinatorFeePoolAddrStr(ctx sdk.Context, addrStr string) {
	params := k.GetParams(ctx)
	params.CoordinatorFeePoolAddrStr = addrStr
	k.SetParams(ctx, params)
}

// GetDistributionTransmissionChannel gets the distribution transmission channel.
func (k Keeper) GetDistributionTransmissionChannel(ctx sdk.Context) string {
	return k.GetParams(ctx).DistributionTransmissionChannel
}

// SetDistributionTransmissionChannel sets the distribution transmission channel.
func (k Keeper) SetDistributionTransmissionChannel(ctx sdk.Context, channel string) {
	params := k.GetParams(ctx)
	params.DistributionTransmissionChannel = channel
	k.SetParams(ctx, params)
}

// GetUnbondingPeriod gets the unbonding period.
func (k Keeper) GetUnbondingPeriod(ctx sdk.Context) time.Duration {
	return k.GetParams(ctx).UnbondingPeriod
}
