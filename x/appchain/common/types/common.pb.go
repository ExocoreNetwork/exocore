// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/appchain/common/v1/common.proto

package types

import (
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_07_tendermint "github.com/cosmos/ibc-go/v7/modules/light-clients/07-tendermint"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the subscriber module. TODO(mm): These must be deny listed
// for edits via governance on the subscriber chain to prevent the subcriber participants
// from unilaterally alterting parameters (like reward %) for their own benefit.
type SubscriberParams struct {
	// coordinator_fee_pool_addr_str is the address of the fee pool on the coordinator.
	CoordinatorFeePoolAddrStr string `protobuf:"bytes,1,opt,name=coordinator_fee_pool_addr_str,json=coordinatorFeePoolAddrStr,proto3" json:"coordinator_fee_pool_addr_str,omitempty"`
	// distribution_transmission_channel is the channel name used to transmit
	// the rewards from the subscriber to the coordinator. It is used in the event
	// that a channel between coordinator and subscriber exists prior to the
	// provision of security from Exocore to the appchain. Until a changeover
	// process is implemented, it is currently unused (TODO). The advantage
	// of reusing a channel that was already in place is that the coin denomination
	// which contains a hash of the channel name will remain unchanged.
	DistributionTransmissionChannel string `protobuf:"bytes,2,opt,name=distribution_transmission_channel,json=distributionTransmissionChannel,proto3" json:"distribution_transmission_channel,omitempty"`
	// blocks_per_distribution_transmission is the number of blocks after which the minted
	// reward is sent to the coordinator.
	BlocksPerDistributionTransmission int64 `protobuf:"varint,3,opt,name=blocks_per_distribution_transmission,json=blocksPerDistributionTransmission,proto3" json:"blocks_per_distribution_transmission,omitempty"`
	// subscriber_redistribution_fraction is the %age of the rewards that the subscriber
	// should send out. For example, "0.75" means 75% of the rewards are sent out.
	SubscriberRedistributionFraction string `protobuf:"bytes,4,opt,name=subscriber_redistribution_fraction,json=subscriberRedistributionFraction,proto3" json:"subscriber_redistribution_fraction,omitempty"`
	// reward_denom is the denomination of the reward. For now, this is not
	// distributed but rather simply tracked.
	RewardDenom string `protobuf:"bytes,5,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	// ibc_timeout_period is the timeout period used for IBC packets (excluding transfers)
	// Such a timeout is enforced by IBC itself and not by either of the chains.
	IBCTimeoutPeriod time.Duration `protobuf:"bytes,6,opt,name=ibc_timeout_period,json=ibcTimeoutPeriod,proto3,stdduration" json:"ibc_timeout_period"`
	// transfer_timeout_period is the timeout period used for IBC transfers.
	TransferTimeoutPeriod time.Duration `protobuf:"bytes,7,opt,name=transfer_timeout_period,json=transferTimeoutPeriod,proto3,stdduration" json:"transfer_timeout_period"`
	// Params relevant to chain operation
	// unbonding_duration is the subscriber chain's unbonding duration.
	// for now, we don't support the subscriber chain using x/epochs as a unit of time; however,
	// when we do, this duration should be the best approximation of that mechanism, with
	// 1 epoch added to account for the current epoch. (TODO)
	UnbondingPeriod time.Duration `protobuf:"bytes,8,opt,name=unbonding_period,json=unbondingPeriod,proto3,stdduration" json:"unbonding_period"`
	// HistoricalEntries is the number of historical entries to persist in the
	// historical stats module. It is the same as that defined in the staking module,
	// however, we use the signed version so that negative values can be caught.
	HistoricalEntries int64 `protobuf:"varint,9,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty"`
	// slash_fraction_downtime is the fraction of the stake that is slashed when a
	// validator is found to be offline.
	SlashFractionDowntime string `protobuf:"bytes,15,opt,name=slash_fraction_downtime,json=slashFractionDowntime,proto3" json:"slash_fraction_downtime,omitempty"`
	// downtime_jail_duration is the duration of the jail period for a validator
	// after they have been found to be offline for too long.
	DowntimeJailDuration time.Duration `protobuf:"bytes,16,opt,name=downtime_jail_duration,json=downtimeJailDuration,proto3,stdduration" json:"downtime_jail_duration"`
	// slash_fraction_double_sign is the fraction of the stake that is slashed
	// when a validator is found to have double signed.
	SlashFractionDoubleSign string `protobuf:"bytes,17,opt,name=slash_fraction_double_sign,json=slashFractionDoubleSign,proto3" json:"slash_fraction_double_sign,omitempty"`
}

func (m *SubscriberParams) Reset()         { *m = SubscriberParams{} }
func (m *SubscriberParams) String() string { return proto.CompactTextString(m) }
func (*SubscriberParams) ProtoMessage()    {}
func (*SubscriberParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_71cb7b22d050d7a3, []int{0}
}
func (m *SubscriberParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriberParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriberParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriberParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberParams.Merge(m, src)
}
func (m *SubscriberParams) XXX_Size() int {
	return m.Size()
}
func (m *SubscriberParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberParams.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberParams proto.InternalMessageInfo

func (m *SubscriberParams) GetCoordinatorFeePoolAddrStr() string {
	if m != nil {
		return m.CoordinatorFeePoolAddrStr
	}
	return ""
}

func (m *SubscriberParams) GetDistributionTransmissionChannel() string {
	if m != nil {
		return m.DistributionTransmissionChannel
	}
	return ""
}

func (m *SubscriberParams) GetBlocksPerDistributionTransmission() int64 {
	if m != nil {
		return m.BlocksPerDistributionTransmission
	}
	return 0
}

func (m *SubscriberParams) GetSubscriberRedistributionFraction() string {
	if m != nil {
		return m.SubscriberRedistributionFraction
	}
	return ""
}

func (m *SubscriberParams) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *SubscriberParams) GetIBCTimeoutPeriod() time.Duration {
	if m != nil {
		return m.IBCTimeoutPeriod
	}
	return 0
}

func (m *SubscriberParams) GetTransferTimeoutPeriod() time.Duration {
	if m != nil {
		return m.TransferTimeoutPeriod
	}
	return 0
}

func (m *SubscriberParams) GetUnbondingPeriod() time.Duration {
	if m != nil {
		return m.UnbondingPeriod
	}
	return 0
}

func (m *SubscriberParams) GetHistoricalEntries() int64 {
	if m != nil {
		return m.HistoricalEntries
	}
	return 0
}

func (m *SubscriberParams) GetSlashFractionDowntime() string {
	if m != nil {
		return m.SlashFractionDowntime
	}
	return ""
}

func (m *SubscriberParams) GetDowntimeJailDuration() time.Duration {
	if m != nil {
		return m.DowntimeJailDuration
	}
	return 0
}

func (m *SubscriberParams) GetSlashFractionDoubleSign() string {
	if m != nil {
		return m.SlashFractionDoubleSign
	}
	return ""
}

// SubscriberGenesisState is the genesis state of a subscriber at the time of
// it being provisioned by Exocore, as stored in the coordinator module.
type SubscriberGenesisState struct {
	// params is the parameters of the subscriber module, as generated.
	Params SubscriberParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// coordinator is the coordinator information for the subscriber.
	Coordinator CoordinatorInfo `protobuf:"bytes,2,opt,name=coordinator,proto3" json:"coordinator"`
}

func (m *SubscriberGenesisState) Reset()         { *m = SubscriberGenesisState{} }
func (m *SubscriberGenesisState) String() string { return proto.CompactTextString(m) }
func (*SubscriberGenesisState) ProtoMessage()    {}
func (*SubscriberGenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_71cb7b22d050d7a3, []int{1}
}
func (m *SubscriberGenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriberGenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriberGenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriberGenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberGenesisState.Merge(m, src)
}
func (m *SubscriberGenesisState) XXX_Size() int {
	return m.Size()
}
func (m *SubscriberGenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberGenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberGenesisState proto.InternalMessageInfo

func (m *SubscriberGenesisState) GetParams() SubscriberParams {
	if m != nil {
		return m.Params
	}
	return SubscriberParams{}
}

func (m *SubscriberGenesisState) GetCoordinator() CoordinatorInfo {
	if m != nil {
		return m.Coordinator
	}
	return CoordinatorInfo{}
}

// CoordinatorInfo is the information about the coordinator chain that is
// stored within the subscriber chain's subscriber module.
type CoordinatorInfo struct {
	// client_state is the client state of the coordinator chain.
	ClientState *_07_tendermint.ClientState `protobuf:"bytes,1,opt,name=client_state,json=clientState,proto3" json:"client_state,omitempty"`
	// consensus_state is the consensus state of the coordinator chain.
	ConsensusState *_07_tendermint.ConsensusState `protobuf:"bytes,2,opt,name=consensus_state,json=consensusState,proto3" json:"consensus_state,omitempty"`
	// initial_val_set is the initial validator set of the subscriber chain.
	InitialValSet []types.ValidatorUpdate `protobuf:"bytes,3,rep,name=initial_val_set,json=initialValSet,proto3" json:"initial_val_set"`
}

func (m *CoordinatorInfo) Reset()         { *m = CoordinatorInfo{} }
func (m *CoordinatorInfo) String() string { return proto.CompactTextString(m) }
func (*CoordinatorInfo) ProtoMessage()    {}
func (*CoordinatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_71cb7b22d050d7a3, []int{2}
}
func (m *CoordinatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorInfo.Merge(m, src)
}
func (m *CoordinatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorInfo proto.InternalMessageInfo

func (m *CoordinatorInfo) GetClientState() *_07_tendermint.ClientState {
	if m != nil {
		return m.ClientState
	}
	return nil
}

func (m *CoordinatorInfo) GetConsensusState() *_07_tendermint.ConsensusState {
	if m != nil {
		return m.ConsensusState
	}
	return nil
}

func (m *CoordinatorInfo) GetInitialValSet() []types.ValidatorUpdate {
	if m != nil {
		return m.InitialValSet
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscriberParams)(nil), "exocore.appchain.common.v1.SubscriberParams")
	proto.RegisterType((*SubscriberGenesisState)(nil), "exocore.appchain.common.v1.SubscriberGenesisState")
	proto.RegisterType((*CoordinatorInfo)(nil), "exocore.appchain.common.v1.CoordinatorInfo")
}

func init() {
	proto.RegisterFile("exocore/appchain/common/v1/common.proto", fileDescriptor_71cb7b22d050d7a3)
}

var fileDescriptor_71cb7b22d050d7a3 = []byte{
	// 819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x6e, 0x1c, 0x45,
	0x10, 0xf5, 0xc4, 0xc1, 0x24, 0xbd, 0x09, 0xbb, 0x6e, 0x25, 0xf1, 0x64, 0x81, 0xf5, 0xda, 0x42,
	0xc2, 0x22, 0x30, 0xa3, 0x18, 0x09, 0x09, 0x71, 0x01, 0xdb, 0x09, 0x8a, 0x85, 0x8c, 0xb5, 0x1b,
	0x82, 0x04, 0x12, 0xad, 0x9e, 0x9e, 0xda, 0xd9, 0x22, 0xb3, 0xdd, 0xa3, 0xee, 0x1e, 0x3b, 0xfc,
	0x02, 0x27, 0x8e, 0x7c, 0x02, 0x47, 0xae, 0xfc, 0x41, 0x8e, 0x39, 0x72, 0x0a, 0xc8, 0x3e, 0xf0,
	0x0f, 0x9c, 0x50, 0xf7, 0xcc, 0x78, 0x67, 0x1d, 0x19, 0xe7, 0xb2, 0xea, 0xee, 0x7a, 0xf5, 0xea,
	0x55, 0xd5, 0x56, 0x0d, 0x79, 0x1f, 0x9e, 0x29, 0xa1, 0x34, 0xc4, 0xbc, 0x28, 0xc4, 0x94, 0xa3,
	0x8c, 0x85, 0x9a, 0xcd, 0x94, 0x8c, 0x8f, 0xee, 0xd7, 0xa7, 0xa8, 0xd0, 0xca, 0x2a, 0xda, 0xaf,
	0x81, 0x51, 0x03, 0x8c, 0x6a, 0xf3, 0xd1, 0xfd, 0xfe, 0x2a, 0x9f, 0xa1, 0x54, 0xb1, 0xff, 0xad,
	0xe0, 0xfd, 0x5b, 0x99, 0xca, 0x94, 0x3f, 0xc6, 0xee, 0x54, 0xbf, 0x0e, 0x32, 0xa5, 0xb2, 0x1c,
	0x62, 0x7f, 0x4b, 0xca, 0x49, 0x9c, 0x96, 0x9a, 0x5b, 0x6c, 0x82, 0xf4, 0x63, 0x4c, 0x44, 0x9c,
	0x63, 0x36, 0xb5, 0x22, 0x47, 0x90, 0xd6, 0xc4, 0x16, 0x64, 0x0a, 0x7a, 0x86, 0xd2, 0x3a, 0x45,
	0xf3, 0x5b, 0xed, 0xf0, 0x76, 0xcb, 0xce, 0x13, 0x81, 0xb1, 0xfd, 0xa9, 0x00, 0x53, 0x19, 0x37,
	0xff, 0x5d, 0x21, 0xbd, 0x71, 0x99, 0x18, 0xa1, 0x31, 0x01, 0x7d, 0xc8, 0x35, 0x9f, 0x19, 0xfa,
	0x39, 0x79, 0x57, 0x28, 0xa5, 0x53, 0x94, 0xdc, 0x2a, 0xcd, 0x26, 0x00, 0xac, 0x50, 0x2a, 0x67,
	0x3c, 0x4d, 0x35, 0x33, 0x56, 0x87, 0xc1, 0x30, 0xd8, 0xba, 0x3e, 0xba, 0xdb, 0x02, 0x3d, 0x04,
	0x38, 0x54, 0x2a, 0xff, 0x22, 0x4d, 0xf5, 0xd8, 0x6a, 0xba, 0x4f, 0x36, 0x52, 0x34, 0x56, 0x63,
	0x52, 0x3a, 0xe9, 0xcc, 0x6a, 0x2e, 0xcd, 0x0c, 0x8d, 0x71, 0x17, 0x31, 0xe5, 0x52, 0x42, 0x1e,
	0x5e, 0xf1, 0x2c, 0xeb, 0x6d, 0xe0, 0xe3, 0x16, 0x6e, 0xb7, 0x82, 0xd1, 0xaf, 0xc9, 0x7b, 0x49,
	0xae, 0xc4, 0x53, 0xc3, 0x0a, 0xd0, 0xec, 0x42, 0xda, 0x70, 0x79, 0x18, 0x6c, 0x2d, 0x8f, 0x36,
	0x2a, 0xec, 0x21, 0xe8, 0xbd, 0x0b, 0x78, 0xe9, 0x57, 0x64, 0xd3, 0x9c, 0xa5, 0xcc, 0x34, 0x2c,
	0x50, 0x4e, 0x34, 0x17, 0xee, 0x10, 0x5e, 0xf5, 0xea, 0x86, 0x73, 0xe4, 0x68, 0x01, 0xf8, 0xb0,
	0xc6, 0xd1, 0x0d, 0x72, 0x43, 0xc3, 0x31, 0xd7, 0x29, 0x4b, 0x41, 0xaa, 0x59, 0xf8, 0x86, 0xf7,
	0xeb, 0x54, 0x6f, 0x7b, 0xee, 0x89, 0x02, 0xa1, 0x98, 0x08, 0x66, 0x71, 0x06, 0xaa, 0xb4, 0x2e,
	0x0d, 0x54, 0x69, 0xb8, 0x32, 0x0c, 0xb6, 0x3a, 0xdb, 0x77, 0xa3, 0xaa, 0xdf, 0x51, 0xd3, 0xef,
	0x68, 0xaf, 0xee, 0xf7, 0xce, 0x3b, 0xcf, 0x5f, 0xae, 0x2f, 0x9d, 0xbc, 0x5c, 0xef, 0x3d, 0xda,
	0xd9, 0x7d, 0x5c, 0xf9, 0x1e, 0x7a, 0xd7, 0x5f, 0xff, 0x5a, 0x0f, 0x46, 0x3d, 0x4c, 0xc4, 0xc2,
	0x2b, 0xfd, 0x9e, 0xac, 0xf9, 0x82, 0x4c, 0x40, 0x9f, 0x8f, 0xf5, 0xe6, 0x65, 0xb1, 0xae, 0xb9,
	0x58, 0x9e, 0xf7, 0x76, 0xc3, 0xb1, 0x48, 0x7e, 0x40, 0x7a, 0xa5, 0x4c, 0x94, 0x4c, 0x51, 0x66,
	0x0d, 0xeb, 0xb5, 0xd7, 0x67, 0xed, 0x9e, 0x39, 0xd7, 0x7c, 0x1f, 0x11, 0x3a, 0x45, 0x63, 0x95,
	0x46, 0xc1, 0x73, 0x06, 0xd2, 0x6a, 0x04, 0x13, 0x5e, 0xf7, 0x3d, 0x5c, 0x9d, 0x5b, 0x1e, 0x54,
	0x06, 0xfa, 0x09, 0x59, 0x33, 0x39, 0x37, 0xd3, 0xb3, 0xfe, 0xb0, 0x54, 0x1d, 0x4b, 0x97, 0x65,
	0xd8, 0xf5, 0x05, 0xbf, 0xed, 0xcd, 0x4d, 0x57, 0xf6, 0x6a, 0x23, 0xfd, 0x81, 0xdc, 0x69, 0x80,
	0xec, 0x47, 0x8e, 0x39, 0x6b, 0xa6, 0x29, 0xec, 0x5d, 0x26, 0xfe, 0x66, 0x23, 0xfe, 0xb7, 0x7f,
	0x7e, 0xff, 0x20, 0x18, 0xdd, 0x6a, 0x78, 0xf6, 0x39, 0xe6, 0x0d, 0x88, 0x7e, 0x46, 0xfa, 0xaf,
	0xe8, 0x2a, 0x93, 0x1c, 0x98, 0xc1, 0x4c, 0x86, 0xab, 0x5e, 0xda, 0xda, 0x39, 0x69, 0xce, 0x3e,
	0xc6, 0x4c, 0x6e, 0xfe, 0x11, 0x90, 0x3b, 0xf3, 0xe1, 0xfb, 0x12, 0x24, 0x18, 0x34, 0x63, 0xcb,
	0x2d, 0xd0, 0x7d, 0xb2, 0x52, 0xf8, 0x61, 0xf4, 0xb3, 0xd6, 0xd9, 0xfe, 0x30, 0xba, 0x78, 0xb7,
	0x44, 0xe7, 0x07, 0x78, 0xe7, 0xaa, 0x93, 0x3e, 0xaa, 0x19, 0xe8, 0x98, 0x74, 0x5a, 0x93, 0xea,
	0xc7, 0xae, 0xb3, 0x7d, 0xef, 0xff, 0x08, 0x77, 0xe7, 0xf0, 0x47, 0x72, 0xa2, 0x6a, 0xbe, 0x36,
	0xcb, 0xe6, 0xcf, 0x57, 0x48, 0xf7, 0x1c, 0x8c, 0x1e, 0x90, 0x1b, 0xd5, 0x4e, 0x62, 0xc6, 0x25,
	0x51, 0x4b, 0xbf, 0x17, 0x61, 0x22, 0xa2, 0xf6, 0xc6, 0x8a, 0x5a, 0x3b, 0xca, 0x45, 0xf3, 0xaf,
	0x3e, 0xef, 0x51, 0x47, 0xcc, 0x2f, 0xf4, 0x5b, 0xd2, 0x15, 0x4a, 0x1a, 0x90, 0xa6, 0x34, 0x35,
	0x65, 0x25, 0x3e, 0xba, 0x94, 0xb2, 0x71, 0xab, 0x58, 0xdf, 0x12, 0x0b, 0x77, 0x7a, 0x40, 0xba,
	0x28, 0xd1, 0x22, 0xcf, 0xd9, 0x11, 0xcf, 0x99, 0x01, 0x1b, 0x2e, 0x0f, 0x97, 0xb7, 0x3a, 0xdb,
	0xc3, 0x36, 0x8f, 0x5b, 0x96, 0xd1, 0x13, 0x9e, 0x63, 0xea, 0x32, 0xfc, 0xa6, 0x48, 0xb9, 0x85,
	0xba, 0x14, 0x37, 0x6b, 0xf7, 0x27, 0x3c, 0x1f, 0x83, 0xdd, 0x19, 0x3f, 0x3f, 0x19, 0x04, 0x2f,
	0x4e, 0x06, 0xc1, 0xdf, 0x27, 0x83, 0xe0, 0x97, 0xd3, 0xc1, 0xd2, 0x8b, 0xd3, 0xc1, 0xd2, 0x9f,
	0xa7, 0x83, 0xa5, 0xef, 0x3e, 0xcd, 0xd0, 0x4e, 0xcb, 0xc4, 0xd5, 0x36, 0x7e, 0x50, 0x15, 0xfc,
	0x00, 0xec, 0xb1, 0xd2, 0x4f, 0xe3, 0xe6, 0xab, 0xf2, 0xec, 0x95, 0xef, 0x8a, 0x5f, 0xd0, 0xc9,
	0x8a, 0xff, 0x4b, 0x7e, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xc6, 0x07, 0xf5, 0x7f,
	0x06, 0x00, 0x00,
}

func (m *SubscriberParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriberParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriberParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlashFractionDoubleSign) > 0 {
		i -= len(m.SlashFractionDoubleSign)
		copy(dAtA[i:], m.SlashFractionDoubleSign)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SlashFractionDoubleSign)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.DowntimeJailDuration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.DowntimeJailDuration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCommon(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if len(m.SlashFractionDowntime) > 0 {
		i -= len(m.SlashFractionDowntime)
		copy(dAtA[i:], m.SlashFractionDowntime)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SlashFractionDowntime)))
		i--
		dAtA[i] = 0x7a
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x48
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCommon(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TransferTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintCommon(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.IBCTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IBCTimeoutPeriod):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintCommon(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubscriberRedistributionFraction) > 0 {
		i -= len(m.SubscriberRedistributionFraction)
		copy(dAtA[i:], m.SubscriberRedistributionFraction)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SubscriberRedistributionFraction)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlocksPerDistributionTransmission != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.BlocksPerDistributionTransmission))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DistributionTransmissionChannel) > 0 {
		i -= len(m.DistributionTransmissionChannel)
		copy(dAtA[i:], m.DistributionTransmissionChannel)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.DistributionTransmissionChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoordinatorFeePoolAddrStr) > 0 {
		i -= len(m.CoordinatorFeePoolAddrStr)
		copy(dAtA[i:], m.CoordinatorFeePoolAddrStr)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.CoordinatorFeePoolAddrStr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscriberGenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriberGenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriberGenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coordinator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CoordinatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoordinatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitialValSet) > 0 {
		for iNdEx := len(m.InitialValSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialValSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ConsensusState != nil {
		{
			size, err := m.ConsensusState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClientState != nil {
		{
			size, err := m.ClientState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscriberParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoordinatorFeePoolAddrStr)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.DistributionTransmissionChannel)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.BlocksPerDistributionTransmission != 0 {
		n += 1 + sovCommon(uint64(m.BlocksPerDistributionTransmission))
	}
	l = len(m.SubscriberRedistributionFraction)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IBCTimeoutPeriod)
	n += 1 + l + sovCommon(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod)
	n += 1 + l + sovCommon(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod)
	n += 1 + l + sovCommon(uint64(l))
	if m.HistoricalEntries != 0 {
		n += 1 + sovCommon(uint64(m.HistoricalEntries))
	}
	l = len(m.SlashFractionDowntime)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.DowntimeJailDuration)
	n += 2 + l + sovCommon(uint64(l))
	l = len(m.SlashFractionDoubleSign)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *SubscriberGenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovCommon(uint64(l))
	l = m.Coordinator.Size()
	n += 1 + l + sovCommon(uint64(l))
	return n
}

func (m *CoordinatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientState != nil {
		l = m.ClientState.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ConsensusState != nil {
		l = m.ConsensusState.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.InitialValSet) > 0 {
		for _, e := range m.InitialValSet {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscriberParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriberParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriberParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorFeePoolAddrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoordinatorFeePoolAddrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionTransmissionChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionTransmissionChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksPerDistributionTransmission", wireType)
			}
			m.BlocksPerDistributionTransmission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksPerDistributionTransmission |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriberRedistributionFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriberRedistributionFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBCTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.IBCTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TransferTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDowntime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFractionDowntime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DowntimeJailDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.DowntimeJailDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDoubleSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFractionDoubleSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriberGenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriberGenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriberGenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coordinator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientState == nil {
				m.ClientState = &_07_tendermint.ClientState{}
			}
			if err := m.ClientState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusState == nil {
				m.ConsensusState = &_07_tendermint.ConsensusState{}
			}
			if err := m.ConsensusState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialValSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialValSet = append(m.InitialValSet, types.ValidatorUpdate{})
			if err := m.InitialValSet[len(m.InitialValSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
