// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/operator/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SlashType represents different slash type
type SlashType int32

const (
	// SLASH_TYPE__UNSPECIFIED represents the unspecified slash type
	SlashType_SLASH_TYPE_UNSPECIFIED SlashType = 0
	// SLASH_TYPE_INSTANT_SLASH represents the slash events that will be handled instantly after occurring
	// so the slash will reduce the amount of related operator's assets pool.
	SlashType_SLASH_TYPE_INSTANT_SLASH SlashType = 1
	// NoInstantaneousSlash indicates that the slash event will be processed after a certain
	// period of time, thus requiring a reduction in the share of the corresponding staker.
	SlashType_SLASH_TYPE_NO_INSTANTANEOUS_SLASH SlashType = 2
)

var SlashType_name = map[int32]string{
	0: "SLASH_TYPE_UNSPECIFIED",
	1: "SLASH_TYPE_INSTANT_SLASH",
	2: "SLASH_TYPE_NO_INSTANTANEOUS_SLASH",
}

var SlashType_value = map[string]int32{
	"SLASH_TYPE_UNSPECIFIED":            0,
	"SLASH_TYPE_INSTANT_SLASH":          1,
	"SLASH_TYPE_NO_INSTANTANEOUS_SLASH": 2,
}

func (x SlashType) String() string {
	return proto.EnumName(SlashType_name, int32(x))
}

func (SlashType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{0}
}

// DecValueField is a field that holds a value of sdk.LegacyDec type.
type DecValueField struct {
	// amount is the USD value of the asset, as an sdk.LegacyDec.
	Amount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"amount"`
}

func (m *DecValueField) Reset()         { *m = DecValueField{} }
func (m *DecValueField) String() string { return proto.CompactTextString(m) }
func (*DecValueField) ProtoMessage()    {}
func (*DecValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{0}
}
func (m *DecValueField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecValueField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecValueField.Merge(m, src)
}
func (m *DecValueField) XXX_Size() int {
	return m.Size()
}
func (m *DecValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_DecValueField.DiscardUnknown(m)
}

var xxx_messageInfo_DecValueField proto.InternalMessageInfo

// ClientChainEarningAddrList is the list of client chain earning addresses.
// Because the reward token provide by the AVS might be located at different client chain, the operator need to
// provide the different client chain address to receive the token rewards.
type ClientChainEarningAddrList struct {
	// earning_info_list is the contents of ClientChainEarningAddrList.
	EarningInfoList []*ClientChainEarningAddrInfo `protobuf:"bytes,1,rep,name=earning_info_list,json=earningInfoList,proto3" json:"earning_info_list,omitempty"`
}

func (m *ClientChainEarningAddrList) Reset()         { *m = ClientChainEarningAddrList{} }
func (m *ClientChainEarningAddrList) String() string { return proto.CompactTextString(m) }
func (*ClientChainEarningAddrList) ProtoMessage()    {}
func (*ClientChainEarningAddrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{1}
}
func (m *ClientChainEarningAddrList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainEarningAddrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainEarningAddrList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainEarningAddrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainEarningAddrList.Merge(m, src)
}
func (m *ClientChainEarningAddrList) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainEarningAddrList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainEarningAddrList.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainEarningAddrList proto.InternalMessageInfo

func (m *ClientChainEarningAddrList) GetEarningInfoList() []*ClientChainEarningAddrInfo {
	if m != nil {
		return m.EarningInfoList
	}
	return nil
}

// ClientChainEarningAddrInfo is the client chain earning address info.
type ClientChainEarningAddrInfo struct {
	// lz_client_chain_id is the layer0 client chain id.
	LzClientChainID uint64 `protobuf:"varint,1,opt,name=lz_client_chain_id,json=lzClientChainId,proto3" json:"lz_client_chain_id,omitempty"`
	// client_chain_earning_addr is the client chain earning address.
	ClientChainEarningAddr string `protobuf:"bytes,2,opt,name=client_chain_earning_addr,json=clientChainEarningAddr,proto3" json:"client_chain_earning_addr,omitempty"`
}

func (m *ClientChainEarningAddrInfo) Reset()         { *m = ClientChainEarningAddrInfo{} }
func (m *ClientChainEarningAddrInfo) String() string { return proto.CompactTextString(m) }
func (*ClientChainEarningAddrInfo) ProtoMessage()    {}
func (*ClientChainEarningAddrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{2}
}
func (m *ClientChainEarningAddrInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainEarningAddrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainEarningAddrInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainEarningAddrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainEarningAddrInfo.Merge(m, src)
}
func (m *ClientChainEarningAddrInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainEarningAddrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainEarningAddrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainEarningAddrInfo proto.InternalMessageInfo

func (m *ClientChainEarningAddrInfo) GetLzClientChainID() uint64 {
	if m != nil {
		return m.LzClientChainID
	}
	return 0
}

func (m *ClientChainEarningAddrInfo) GetClientChainEarningAddr() string {
	if m != nil {
		return m.ClientChainEarningAddr
	}
	return ""
}

// OperatorInfo is the operator info.
type OperatorInfo struct {
	// earnings_addr is the earnings address.
	EarningsAddr string `protobuf:"bytes,1,opt,name=earnings_addr,json=earningsAddr,proto3" json:"earnings_addr,omitempty"`
	// approve_addr is the approve address.
	ApproveAddr string `protobuf:"bytes,2,opt,name=approve_addr,json=approveAddr,proto3" json:"approve_addr,omitempty"`
	// operator_meta_info is the operator meta info.
	OperatorMetaInfo string `protobuf:"bytes,3,opt,name=operator_meta_info,json=operatorMetaInfo,proto3" json:"operator_meta_info,omitempty"`
	// client_chain_earning_addr_list is the client chain earning address list.
	ClientChainEarningsAddr *ClientChainEarningAddrList `protobuf:"bytes,4,opt,name=client_chain_earnings_addr,json=clientChainEarningsAddr,proto3" json:"client_chain_earnings_addr,omitempty"`
	// commission defines the commission parameters.
	Commission types.Commission `protobuf:"bytes,5,opt,name=commission,proto3" json:"commission"`
}

func (m *OperatorInfo) Reset()         { *m = OperatorInfo{} }
func (m *OperatorInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorInfo) ProtoMessage()    {}
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{3}
}
func (m *OperatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorInfo.Merge(m, src)
}
func (m *OperatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorInfo proto.InternalMessageInfo

func (m *OperatorInfo) GetEarningsAddr() string {
	if m != nil {
		return m.EarningsAddr
	}
	return ""
}

func (m *OperatorInfo) GetApproveAddr() string {
	if m != nil {
		return m.ApproveAddr
	}
	return ""
}

func (m *OperatorInfo) GetOperatorMetaInfo() string {
	if m != nil {
		return m.OperatorMetaInfo
	}
	return ""
}

func (m *OperatorInfo) GetClientChainEarningsAddr() *ClientChainEarningAddrList {
	if m != nil {
		return m.ClientChainEarningsAddr
	}
	return nil
}

func (m *OperatorInfo) GetCommission() types.Commission {
	if m != nil {
		return m.Commission
	}
	return types.Commission{}
}

// OptedInfo is the opted information about operator
type OptedInfo struct {
	// slash_contract is the slash contract address of AVS opted-in by the operator
	SlashContract string `protobuf:"bytes,1,opt,name=slash_contract,json=slashContract,proto3" json:"slash_contract,omitempty"`
	// opted_in_height is the exocore block height at which the operator opted in
	OptedInHeight uint64 `protobuf:"varint,2,opt,name=opted_in_height,json=optedInHeight,proto3" json:"opted_in_height,omitempty"`
	// opted_out_height is the exocore block height at which the operator opted out
	OptedOutHeight uint64 `protobuf:"varint,3,opt,name=opted_out_height,json=optedOutHeight,proto3" json:"opted_out_height,omitempty"`
	// jailed defined whether the operator has been jailed from bonded status or not.
	Jailed bool `protobuf:"varint,4,opt,name=jailed,proto3" json:"jailed,omitempty"`
}

func (m *OptedInfo) Reset()         { *m = OptedInfo{} }
func (m *OptedInfo) String() string { return proto.CompactTextString(m) }
func (*OptedInfo) ProtoMessage()    {}
func (*OptedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{4}
}
func (m *OptedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptedInfo.Merge(m, src)
}
func (m *OptedInfo) XXX_Size() int {
	return m.Size()
}
func (m *OptedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OptedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OptedInfo proto.InternalMessageInfo

func (m *OptedInfo) GetSlashContract() string {
	if m != nil {
		return m.SlashContract
	}
	return ""
}

func (m *OptedInfo) GetOptedInHeight() uint64 {
	if m != nil {
		return m.OptedInHeight
	}
	return 0
}

func (m *OptedInfo) GetOptedOutHeight() uint64 {
	if m != nil {
		return m.OptedOutHeight
	}
	return 0
}

func (m *OptedInfo) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

// OptedInAssetState is the state of opted-in asset
type OptedInAssetState struct {
	// amount of the opted-in asset
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// value is the USD value of the opted-in asset
	Value github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"value"`
}

func (m *OptedInAssetState) Reset()         { *m = OptedInAssetState{} }
func (m *OptedInAssetState) String() string { return proto.CompactTextString(m) }
func (*OptedInAssetState) ProtoMessage()    {}
func (*OptedInAssetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{5}
}
func (m *OptedInAssetState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptedInAssetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptedInAssetState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptedInAssetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptedInAssetState.Merge(m, src)
}
func (m *OptedInAssetState) XXX_Size() int {
	return m.Size()
}
func (m *OptedInAssetState) XXX_DiscardUnknown() {
	xxx_messageInfo_OptedInAssetState.DiscardUnknown(m)
}

var xxx_messageInfo_OptedInAssetState proto.InternalMessageInfo

// SlashFromUndelegation records the slash detail from the undelegation
type SlashFromUndelegation struct {
	// staker_id is the staker id.
	StakerID string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// asset_id is the asset id.
	AssetID string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// amount is the slashed amount from the undelegation.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *SlashFromUndelegation) Reset()         { *m = SlashFromUndelegation{} }
func (m *SlashFromUndelegation) String() string { return proto.CompactTextString(m) }
func (*SlashFromUndelegation) ProtoMessage()    {}
func (*SlashFromUndelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{6}
}
func (m *SlashFromUndelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashFromUndelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashFromUndelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashFromUndelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashFromUndelegation.Merge(m, src)
}
func (m *SlashFromUndelegation) XXX_Size() int {
	return m.Size()
}
func (m *SlashFromUndelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashFromUndelegation.DiscardUnknown(m)
}

var xxx_messageInfo_SlashFromUndelegation proto.InternalMessageInfo

func (m *SlashFromUndelegation) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *SlashFromUndelegation) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

// SlashFromAssetsPool records the slash detail from the operator assets pool
type SlashFromAssetsPool struct {
	AssetID string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// amount is the slashed amount from the assets pool.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *SlashFromAssetsPool) Reset()         { *m = SlashFromAssetsPool{} }
func (m *SlashFromAssetsPool) String() string { return proto.CompactTextString(m) }
func (*SlashFromAssetsPool) ProtoMessage()    {}
func (*SlashFromAssetsPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{7}
}
func (m *SlashFromAssetsPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashFromAssetsPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashFromAssetsPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashFromAssetsPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashFromAssetsPool.Merge(m, src)
}
func (m *SlashFromAssetsPool) XXX_Size() int {
	return m.Size()
}
func (m *SlashFromAssetsPool) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashFromAssetsPool.DiscardUnknown(m)
}

var xxx_messageInfo_SlashFromAssetsPool proto.InternalMessageInfo

func (m *SlashFromAssetsPool) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

// SlashAssetsInfo is the slashed assets information
type SlashExecutionInfo struct {
	// slash_proportion is the new calculated proportion when execute the slash
	SlashProportion github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=slash_proportion,json=slashProportion,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_proportion"`
	// slash_value is the usd value of all slashed assets
	SlashValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=slash_value,json=slashValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_value"`
	// SlashUndelegations records all slash info related to the undelegation
	SlashUndelegations []*SlashFromUndelegation `protobuf:"bytes,3,rep,name=slash_undelegations,json=slashUndelegations,proto3" json:"slash_undelegations,omitempty"`
	// SlashFromAssetsPool records all slash info related to the assets pool
	SlashAssetsPool []*SlashFromAssetsPool `protobuf:"bytes,4,rep,name=slash_assets_pool,json=slashAssetsPool,proto3" json:"slash_assets_pool,omitempty"`
}

func (m *SlashExecutionInfo) Reset()         { *m = SlashExecutionInfo{} }
func (m *SlashExecutionInfo) String() string { return proto.CompactTextString(m) }
func (*SlashExecutionInfo) ProtoMessage()    {}
func (*SlashExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{8}
}
func (m *SlashExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashExecutionInfo.Merge(m, src)
}
func (m *SlashExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *SlashExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SlashExecutionInfo proto.InternalMessageInfo

func (m *SlashExecutionInfo) GetSlashUndelegations() []*SlashFromUndelegation {
	if m != nil {
		return m.SlashUndelegations
	}
	return nil
}

func (m *SlashExecutionInfo) GetSlashAssetsPool() []*SlashFromAssetsPool {
	if m != nil {
		return m.SlashAssetsPool
	}
	return nil
}

// OperatorSlashInfo is the slash info of operator
type OperatorSlashInfo struct {
	// slash_contract is the address of slash contract
	SlashContract string `protobuf:"bytes,1,opt,name=slash_contract,json=slashContract,proto3" json:"slash_contract,omitempty"`
	// submitted_height is the exocore block height at which the slash event is submitted
	SubmittedHeight int64 `protobuf:"varint,2,opt,name=submitted_height,json=submittedHeight,proto3" json:"submitted_height,omitempty"`
	// event_height is the exocore block height at which the slash event occurs
	EventHeight int64 `protobuf:"varint,3,opt,name=event_height,json=eventHeight,proto3" json:"event_height,omitempty"`
	// is_vetoed is a flag to indicate if this slash is vetoed
	IsVetoed bool `protobuf:"varint,4,opt,name=is_vetoed,json=isVetoed,proto3" json:"is_vetoed,omitempty"`
	// slash_proportion is the proportion of assets that need to be slashed
	SlashProportion github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=slash_proportion,json=slashProportion,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_proportion"`
	// slash_type indicates the slash type of specified AVS.
	SlashType uint32 `protobuf:"varint,6,opt,name=slash_type,json=slashType,proto3" json:"slash_type,omitempty"`
	// SlashExecutionInfo stores the slashed execution information
	ExecutionInfo *SlashExecutionInfo `protobuf:"bytes,7,opt,name=execution_info,json=executionInfo,proto3" json:"execution_info,omitempty"`
}

func (m *OperatorSlashInfo) Reset()         { *m = OperatorSlashInfo{} }
func (m *OperatorSlashInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorSlashInfo) ProtoMessage()    {}
func (*OperatorSlashInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{9}
}
func (m *OperatorSlashInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorSlashInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorSlashInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorSlashInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorSlashInfo.Merge(m, src)
}
func (m *OperatorSlashInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorSlashInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorSlashInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorSlashInfo proto.InternalMessageInfo

func (m *OperatorSlashInfo) GetSlashContract() string {
	if m != nil {
		return m.SlashContract
	}
	return ""
}

func (m *OperatorSlashInfo) GetSubmittedHeight() int64 {
	if m != nil {
		return m.SubmittedHeight
	}
	return 0
}

func (m *OperatorSlashInfo) GetEventHeight() int64 {
	if m != nil {
		return m.EventHeight
	}
	return 0
}

func (m *OperatorSlashInfo) GetIsVetoed() bool {
	if m != nil {
		return m.IsVetoed
	}
	return false
}

func (m *OperatorSlashInfo) GetSlashType() uint32 {
	if m != nil {
		return m.SlashType
	}
	return 0
}

func (m *OperatorSlashInfo) GetExecutionInfo() *SlashExecutionInfo {
	if m != nil {
		return m.ExecutionInfo
	}
	return nil
}

// RegisterOperatorReq is the request to register a new operator.
type RegisterOperatorReq struct {
	// from_address is the address of the operator (sdk.AccAddress).
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// info is the operator info.
	Info *OperatorInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RegisterOperatorReq) Reset()         { *m = RegisterOperatorReq{} }
func (m *RegisterOperatorReq) String() string { return proto.CompactTextString(m) }
func (*RegisterOperatorReq) ProtoMessage()    {}
func (*RegisterOperatorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{10}
}
func (m *RegisterOperatorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOperatorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOperatorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOperatorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOperatorReq.Merge(m, src)
}
func (m *RegisterOperatorReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOperatorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOperatorReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOperatorReq proto.InternalMessageInfo

// RegisterOperatorResponse is the response to a register operator request.
type RegisterOperatorResponse struct {
}

func (m *RegisterOperatorResponse) Reset()         { *m = RegisterOperatorResponse{} }
func (m *RegisterOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterOperatorResponse) ProtoMessage()    {}
func (*RegisterOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{11}
}
func (m *RegisterOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOperatorResponse.Merge(m, src)
}
func (m *RegisterOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOperatorResponse proto.InternalMessageInfo

// OptInToCosmosChainRequest defines the OptInToCosmosChain request.
type OptInToCosmosChainRequest struct {
	// address is the operator address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// chain_id is the identifier for the chain that wants to opt in.
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// `{"@type":"/cosmos.crypto.ed25519.PubKey","key":"Ui5Gf1+mtWUdH8u3xlmzdKID+F3PK0sfXZ73GZ6q6is="}`
	// there is no need to check for knowledge of the corresponding private key since this is ED25519
	// and not BLS key, where a rogue key attack can take place. however, we should still check for
	// overlap with another operator's key.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *OptInToCosmosChainRequest) Reset()         { *m = OptInToCosmosChainRequest{} }
func (m *OptInToCosmosChainRequest) String() string { return proto.CompactTextString(m) }
func (*OptInToCosmosChainRequest) ProtoMessage()    {}
func (*OptInToCosmosChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{12}
}
func (m *OptInToCosmosChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptInToCosmosChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptInToCosmosChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptInToCosmosChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptInToCosmosChainRequest.Merge(m, src)
}
func (m *OptInToCosmosChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *OptInToCosmosChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OptInToCosmosChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OptInToCosmosChainRequest proto.InternalMessageInfo

func (m *OptInToCosmosChainRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OptInToCosmosChainRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *OptInToCosmosChainRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

// OptInToCosmosChainResponse defines the OptInToCosmosChain response.
type OptInToCosmosChainResponse struct {
}

func (m *OptInToCosmosChainResponse) Reset()         { *m = OptInToCosmosChainResponse{} }
func (m *OptInToCosmosChainResponse) String() string { return proto.CompactTextString(m) }
func (*OptInToCosmosChainResponse) ProtoMessage()    {}
func (*OptInToCosmosChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{13}
}
func (m *OptInToCosmosChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptInToCosmosChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptInToCosmosChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptInToCosmosChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptInToCosmosChainResponse.Merge(m, src)
}
func (m *OptInToCosmosChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *OptInToCosmosChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OptInToCosmosChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OptInToCosmosChainResponse proto.InternalMessageInfo

// InitOptOutFromCosmosChainRequest defines the InitOptOutFromCosmosChain request.
type InitOptOutFromCosmosChainRequest struct {
	// address is the operator address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// chain_id is the identifier for the chain that wants to opt out.
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *InitOptOutFromCosmosChainRequest) Reset()         { *m = InitOptOutFromCosmosChainRequest{} }
func (m *InitOptOutFromCosmosChainRequest) String() string { return proto.CompactTextString(m) }
func (*InitOptOutFromCosmosChainRequest) ProtoMessage()    {}
func (*InitOptOutFromCosmosChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{14}
}
func (m *InitOptOutFromCosmosChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitOptOutFromCosmosChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitOptOutFromCosmosChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitOptOutFromCosmosChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitOptOutFromCosmosChainRequest.Merge(m, src)
}
func (m *InitOptOutFromCosmosChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitOptOutFromCosmosChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitOptOutFromCosmosChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitOptOutFromCosmosChainRequest proto.InternalMessageInfo

func (m *InitOptOutFromCosmosChainRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *InitOptOutFromCosmosChainRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// InitOptOutFromCosmosChainResponse defines the InitOptOutFromCosmosChain response.
type InitOptOutFromCosmosChainResponse struct {
}

func (m *InitOptOutFromCosmosChainResponse) Reset()         { *m = InitOptOutFromCosmosChainResponse{} }
func (m *InitOptOutFromCosmosChainResponse) String() string { return proto.CompactTextString(m) }
func (*InitOptOutFromCosmosChainResponse) ProtoMessage()    {}
func (*InitOptOutFromCosmosChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{15}
}
func (m *InitOptOutFromCosmosChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitOptOutFromCosmosChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitOptOutFromCosmosChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitOptOutFromCosmosChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitOptOutFromCosmosChainResponse.Merge(m, src)
}
func (m *InitOptOutFromCosmosChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitOptOutFromCosmosChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitOptOutFromCosmosChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitOptOutFromCosmosChainResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("exocore.operator.v1.SlashType", SlashType_name, SlashType_value)
	proto.RegisterType((*DecValueField)(nil), "exocore.operator.v1.DecValueField")
	proto.RegisterType((*ClientChainEarningAddrList)(nil), "exocore.operator.v1.ClientChainEarningAddrList")
	proto.RegisterType((*ClientChainEarningAddrInfo)(nil), "exocore.operator.v1.ClientChainEarningAddrInfo")
	proto.RegisterType((*OperatorInfo)(nil), "exocore.operator.v1.OperatorInfo")
	proto.RegisterType((*OptedInfo)(nil), "exocore.operator.v1.OptedInfo")
	proto.RegisterType((*OptedInAssetState)(nil), "exocore.operator.v1.OptedInAssetState")
	proto.RegisterType((*SlashFromUndelegation)(nil), "exocore.operator.v1.SlashFromUndelegation")
	proto.RegisterType((*SlashFromAssetsPool)(nil), "exocore.operator.v1.SlashFromAssetsPool")
	proto.RegisterType((*SlashExecutionInfo)(nil), "exocore.operator.v1.SlashExecutionInfo")
	proto.RegisterType((*OperatorSlashInfo)(nil), "exocore.operator.v1.OperatorSlashInfo")
	proto.RegisterType((*RegisterOperatorReq)(nil), "exocore.operator.v1.RegisterOperatorReq")
	proto.RegisterType((*RegisterOperatorResponse)(nil), "exocore.operator.v1.RegisterOperatorResponse")
	proto.RegisterType((*OptInToCosmosChainRequest)(nil), "exocore.operator.v1.OptInToCosmosChainRequest")
	proto.RegisterType((*OptInToCosmosChainResponse)(nil), "exocore.operator.v1.OptInToCosmosChainResponse")
	proto.RegisterType((*InitOptOutFromCosmosChainRequest)(nil), "exocore.operator.v1.InitOptOutFromCosmosChainRequest")
	proto.RegisterType((*InitOptOutFromCosmosChainResponse)(nil), "exocore.operator.v1.InitOptOutFromCosmosChainResponse")
}

func init() { proto.RegisterFile("exocore/operator/v1/tx.proto", fileDescriptor_b229d5663e4df167) }

var fileDescriptor_b229d5663e4df167 = []byte{
	// 1312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xc6, 0xf9, 0xf2, 0xb3, 0xd3, 0x38, 0x93, 0xd2, 0x3a, 0xa6, 0x8d, 0x93, 0x2d, 0x2d,
	0x69, 0x44, 0x6c, 0xb5, 0x50, 0x24, 0x0a, 0x07, 0x92, 0xd8, 0x51, 0x57, 0xa4, 0x76, 0xb4, 0x76,
	0x2b, 0x41, 0x85, 0x56, 0x9b, 0xf5, 0xd4, 0x59, 0xb2, 0xde, 0xd9, 0xee, 0x8c, 0xd3, 0xa4, 0x12,
	0x12, 0x70, 0x42, 0x08, 0x09, 0x24, 0x4e, 0x48, 0x1c, 0x7a, 0xe4, 0xd8, 0x43, 0xaf, 0x08, 0xb8,
	0xf5, 0x58, 0xf5, 0x84, 0x38, 0x44, 0x28, 0x3d, 0x94, 0x7f, 0x02, 0x09, 0xcd, 0xc7, 0x3a, 0x9b,
	0x76, 0x53, 0x5a, 0x35, 0x5c, 0xda, 0xcc, 0x7b, 0xbf, 0xf7, 0xfd, 0x9b, 0x37, 0x5e, 0x38, 0x85,
	0xb7, 0x89, 0x43, 0x42, 0x5c, 0x21, 0x01, 0x0e, 0x6d, 0x46, 0xc2, 0xca, 0xd6, 0x85, 0x0a, 0xdb,
	0x2e, 0x07, 0x21, 0x61, 0x04, 0x4d, 0x2a, 0x6d, 0x39, 0xd2, 0x96, 0xb7, 0x2e, 0x14, 0x27, 0xec,
	0xae, 0xeb, 0x93, 0x8a, 0xf8, 0x57, 0xe2, 0x8a, 0x27, 0x1d, 0x42, 0xbb, 0x84, 0x56, 0xba, 0xb4,
	0xc3, 0xed, 0xbb, 0xb4, 0xa3, 0x14, 0x6f, 0x28, 0x05, 0x65, 0xf6, 0xa6, 0xeb, 0x73, 0xe5, 0x3a,
	0x66, 0xf6, 0x85, 0xe8, 0xac, 0x50, 0x53, 0x12, 0x65, 0x89, 0x53, 0x45, 0x1e, 0x94, 0xea, 0x78,
	0x87, 0x74, 0x88, 0x94, 0xf3, 0xbf, 0xa4, 0x54, 0xc7, 0x30, 0x56, 0xc5, 0xce, 0x75, 0xdb, 0xeb,
	0xe1, 0x15, 0x17, 0x7b, 0x6d, 0xd4, 0x82, 0x61, 0xbb, 0x4b, 0x7a, 0x3e, 0x2b, 0x68, 0x33, 0xda,
	0x5c, 0x66, 0xe9, 0x83, 0x07, 0xbb, 0xa5, 0xd4, 0x9f, 0xbb, 0xa5, 0x73, 0x1d, 0x97, 0x6d, 0xf4,
	0xd6, 0xcb, 0x0e, 0xe9, 0x2a, 0xbf, 0xea, 0xbf, 0x05, 0xda, 0xde, 0xac, 0xb0, 0x9d, 0x00, 0xd3,
	0x72, 0x15, 0x3b, 0x8f, 0xee, 0x2f, 0x80, 0x0a, 0x5b, 0xc5, 0x8e, 0xa9, 0x7c, 0xe9, 0x3b, 0x50,
	0x5c, 0xf6, 0x5c, 0xec, 0xb3, 0xe5, 0x0d, 0xdb, 0xf5, 0x6b, 0x76, 0xe8, 0xbb, 0x7e, 0x67, 0xb1,
	0xdd, 0x0e, 0x57, 0x5d, 0xca, 0xd0, 0x0d, 0x98, 0xc0, 0x52, 0x64, 0xb9, 0xfe, 0x4d, 0x62, 0x79,
	0x2e, 0xe5, 0xe1, 0xd3, 0x73, 0xd9, 0x8b, 0x95, 0x72, 0x42, 0xe3, 0xca, 0xc9, 0xbe, 0x0c, 0xff,
	0x26, 0x31, 0xc7, 0x95, 0x27, 0x7e, 0xe0, 0xce, 0xf5, 0x1f, 0xb5, 0xc3, 0x62, 0x73, 0x08, 0xfa,
	0x10, 0x90, 0x77, 0xc7, 0x72, 0x04, 0xc0, 0x72, 0x38, 0xc2, 0x72, 0xdb, 0xa2, 0xf6, 0xc1, 0xa5,
	0xc9, 0xbd, 0xdd, 0xd2, 0xf8, 0xea, 0x9d, 0x98, 0xb5, 0x51, 0x35, 0xc7, 0xbd, 0x03, 0x82, 0x36,
	0x7a, 0x0f, 0xa6, 0x0e, 0x98, 0x47, 0xa5, 0xd8, 0xed, 0x76, 0x58, 0x18, 0xe0, 0x4d, 0x34, 0x4f,
	0x38, 0x89, 0x09, 0xe8, 0xbf, 0x0f, 0x40, 0xae, 0xa1, 0xea, 0x12, 0xd9, 0x9c, 0x81, 0x31, 0x65,
	0x4e, 0xa5, 0xbd, 0x18, 0x82, 0x99, 0x8b, 0x84, 0xdc, 0x0a, 0xcd, 0x42, 0xce, 0x0e, 0x82, 0x90,
	0x6c, 0xe1, 0x78, 0x8c, 0xac, 0x92, 0x09, 0xc8, 0x5b, 0x80, 0xa2, 0x7e, 0x59, 0x5d, 0xcc, 0x6c,
	0xd1, 0xd7, 0x42, 0x5a, 0x00, 0xf3, 0x91, 0xe6, 0x2a, 0x66, 0xb6, 0x88, 0xea, 0x41, 0x31, 0xa9,
	0x02, 0x95, 0xc2, 0xe0, 0x8c, 0xf6, 0x92, 0x83, 0xe0, 0x7d, 0x37, 0x4f, 0x3e, 0x5b, 0xb3, 0x4c,
	0xff, 0x2a, 0x80, 0x43, 0xba, 0x5d, 0x97, 0x52, 0x97, 0xf8, 0x85, 0x21, 0xe1, 0x5d, 0x2f, 0x2b,
	0xd2, 0x44, 0x74, 0x56, 0xf4, 0x2e, 0x2f, 0xf7, 0x91, 0x4b, 0x19, 0xce, 0xc4, 0x9f, 0x9f, 0xdc,
	0x9b, 0xd7, 0xcc, 0x98, 0x03, 0xfd, 0x27, 0x0d, 0x32, 0x8d, 0x80, 0xe1, 0xb6, 0x28, 0xe5, 0x2c,
	0x1c, 0xa3, 0x9e, 0x4d, 0x37, 0x2c, 0x87, 0xf8, 0x2c, 0xb4, 0x1d, 0x45, 0x63, 0x73, 0x4c, 0x48,
	0x97, 0x95, 0x10, 0x9d, 0x83, 0x71, 0xc2, 0x6d, 0x2c, 0xd7, 0xb7, 0x36, 0xb0, 0xdb, 0xd9, 0x60,
	0xa2, 0x8b, 0x83, 0xe6, 0x18, 0x91, 0xae, 0xae, 0x08, 0x21, 0x9a, 0x83, 0xbc, 0xc4, 0x91, 0x1e,
	0x8b, 0x80, 0x69, 0x01, 0x3c, 0x26, 0xe4, 0x8d, 0x1e, 0x53, 0xc8, 0x13, 0x30, 0xfc, 0x99, 0xed,
	0x7a, 0xb8, 0x2d, 0xfa, 0x35, 0x6a, 0xaa, 0x93, 0xfe, 0x8b, 0x06, 0x13, 0x2a, 0xbd, 0x45, 0x4a,
	0x31, 0x6b, 0x32, 0x9b, 0xe1, 0x57, 0xba, 0x65, 0x86, 0xcf, 0x62, 0xb7, 0xcc, 0xf0, 0x59, 0x74,
	0xcb, 0x90, 0x09, 0x43, 0x5b, 0xfc, 0x26, 0x4b, 0x46, 0xbc, 0xe2, 0xd5, 0x95, 0xae, 0xf4, 0xdf,
	0x34, 0x78, 0xad, 0xc9, 0x7b, 0xb7, 0x12, 0x92, 0xee, 0x35, 0xbf, 0x8d, 0x3d, 0xdc, 0xb1, 0x99,
	0x4b, 0x7c, 0x74, 0x1e, 0x32, 0x7c, 0x5a, 0x38, 0x8c, 0x2e, 0x4c, 0x66, 0x29, 0xb7, 0xb7, 0x5b,
	0x1a, 0x6d, 0x0a, 0xa1, 0x51, 0x35, 0x47, 0xa5, 0xda, 0x68, 0xa3, 0x73, 0x30, 0x6a, 0xf3, 0xe2,
	0x39, 0x52, 0xe6, 0x96, 0xdd, 0xdb, 0x2d, 0x8d, 0x88, 0x86, 0x18, 0x55, 0x73, 0x44, 0x28, 0x8d,
	0xf8, 0xf2, 0x49, 0x1f, 0x5d, 0x5b, 0xf4, 0x1f, 0x34, 0x98, 0xec, 0x97, 0x20, 0x62, 0xd2, 0x35,
	0x42, 0xbc, 0x03, 0x59, 0x69, 0x2f, 0x94, 0xd5, 0xc0, 0x11, 0x66, 0xf5, 0x5d, 0x1a, 0x90, 0xc8,
	0xaa, 0xb6, 0x8d, 0x9d, 0x1e, 0xef, 0xa8, 0x20, 0x70, 0x07, 0xf2, 0x92, 0xc0, 0x41, 0x48, 0x02,
	0x12, 0x72, 0xf9, 0x91, 0x6c, 0xe2, 0x71, 0xe1, 0x75, 0xad, 0xef, 0x14, 0x7d, 0x0a, 0x59, 0x19,
	0xe8, 0xe8, 0x28, 0x03, 0xc2, 0xa1, 0x78, 0x4c, 0xd0, 0x0d, 0x98, 0x94, 0xee, 0x7b, 0x31, 0xce,
	0xd0, 0x42, 0x5a, 0x6c, 0xf5, 0xf9, 0xc4, 0x65, 0x92, 0x48, 0x33, 0x13, 0x09, 0x37, 0x71, 0x11,
	0x45, 0x2d, 0x98, 0x90, 0xce, 0xc5, 0x88, 0xa8, 0x15, 0x10, 0xe2, 0x15, 0x06, 0x85, 0xeb, 0xb9,
	0xe7, 0xbb, 0xde, 0x1f, 0xbf, 0xea, 0xc8, 0xbe, 0x40, 0xff, 0x67, 0x80, 0x5f, 0x55, 0x69, 0x24,
	0x0c, 0x5e, 0x66, 0xa3, 0x9c, 0x87, 0x3c, 0xed, 0xad, 0x77, 0x5d, 0xc6, 0xb7, 0x45, 0x6c, 0xa5,
	0xa4, 0xcd, 0xf1, 0xbe, 0x5c, 0xad, 0x8a, 0x59, 0xc8, 0xe1, 0x2d, 0xbe, 0x6d, 0x63, 0x0b, 0x25,
	0x6d, 0x66, 0x85, 0x4c, 0x41, 0x5e, 0x87, 0x8c, 0x4b, 0xad, 0x2d, 0xcc, 0x48, 0x7f, 0xa1, 0x8c,
	0xba, 0xf4, 0xba, 0x38, 0x27, 0x52, 0x64, 0xe8, 0xff, 0xa0, 0xc8, 0x69, 0x90, 0x13, 0xb5, 0xb8,
	0x45, 0x61, 0x78, 0x46, 0x9b, 0x1b, 0x33, 0x33, 0x42, 0xd2, 0xda, 0x09, 0x30, 0xaa, 0xc3, 0x31,
	0x1c, 0x71, 0x57, 0x3e, 0x30, 0x23, 0x62, 0x99, 0xbf, 0x79, 0xf8, 0x08, 0x0e, 0x70, 0xdd, 0x1c,
	0xc3, 0xf1, 0xa3, 0xfe, 0xab, 0x06, 0x93, 0x26, 0xee, 0xb8, 0x94, 0xe1, 0x30, 0x9a, 0x83, 0x89,
	0x6f, 0xa1, 0xf7, 0x21, 0x77, 0x33, 0x24, 0x5d, 0xf1, 0x1a, 0x61, 0x4a, 0xd5, 0x75, 0x28, 0x3c,
	0xba, 0xbf, 0x70, 0x5c, 0x65, 0xbf, 0x28, 0x35, 0x4d, 0x16, 0xba, 0x7e, 0xc7, 0xcc, 0x72, 0xb4,
	0x12, 0xa1, 0x4b, 0x30, 0x28, 0x52, 0x1b, 0x10, 0xa9, 0xcd, 0x26, 0xa6, 0x16, 0x7f, 0x82, 0x4d,
	0x01, 0xbf, 0xfc, 0xce, 0xd7, 0x77, 0x4b, 0xa9, 0xbf, 0xef, 0x96, 0x52, 0x5f, 0x3d, 0xb9, 0x37,
	0x9f, 0x5d, 0xd9, 0x77, 0xf8, 0xcd, 0x93, 0x7b, 0xf3, 0x27, 0x63, 0xcd, 0x8c, 0xdb, 0xea, 0x45,
	0x28, 0x3c, 0x5b, 0x00, 0x0d, 0x88, 0x4f, 0xb1, 0xfe, 0x39, 0x4c, 0x35, 0x02, 0x66, 0xf8, 0x2d,
	0xb2, 0x2c, 0xac, 0xc5, 0xc3, 0x68, 0xe2, 0x5b, 0x3d, 0x4c, 0x19, 0x2a, 0xc0, 0xc8, 0x81, 0xea,
	0xcc, 0xe8, 0x88, 0xa6, 0x60, 0xb4, 0xff, 0xab, 0x44, 0x3e, 0xf4, 0x23, 0x8e, 0xfa, 0xe1, 0x71,
	0x1a, 0x20, 0xe8, 0xad, 0x7b, 0xae, 0x63, 0x6d, 0xe2, 0x1d, 0xf5, 0xb8, 0x67, 0xa4, 0xe4, 0x23,
	0xbc, 0x73, 0x39, 0xc7, 0x53, 0x8f, 0xfc, 0xe8, 0xa7, 0xa0, 0x98, 0x14, 0x5e, 0x25, 0x87, 0x61,
	0xc6, 0xf0, 0x5d, 0xd6, 0x08, 0x58, 0xa3, 0xc7, 0x78, 0xb5, 0x47, 0x94, 0xe3, 0x53, 0x49, 0x9c,
	0x81, 0xd9, 0xe7, 0x84, 0x91, 0xb9, 0xcc, 0x7b, 0x90, 0x69, 0xf6, 0x39, 0x56, 0x84, 0x13, 0xcd,
	0xd5, 0xc5, 0xe6, 0x15, 0xab, 0xf5, 0xf1, 0x5a, 0xcd, 0xba, 0x56, 0x6f, 0xae, 0xd5, 0x96, 0x8d,
	0x15, 0xa3, 0x56, 0xcd, 0xa7, 0xd0, 0x29, 0x28, 0xc4, 0x74, 0x46, 0xbd, 0xd9, 0x5a, 0xac, 0xb7,
	0x2c, 0x21, 0xca, 0x6b, 0xe8, 0x2c, 0xcc, 0xc6, 0xb4, 0xf5, 0x46, 0x04, 0x58, 0xac, 0xd7, 0x1a,
	0xd7, 0x9a, 0x0a, 0x36, 0x70, 0xf1, 0xcb, 0x34, 0xa4, 0xaf, 0xd2, 0x0e, 0xda, 0x84, 0xfc, 0xd3,
	0xa3, 0x43, 0xc9, 0xbb, 0x24, 0x81, 0xa2, 0xc5, 0x85, 0x17, 0x44, 0xca, 0x12, 0xd1, 0x6d, 0x40,
	0xcf, 0x0e, 0x03, 0x95, 0x0f, 0x21, 0xe7, 0x21, 0xa4, 0x29, 0x56, 0x5e, 0x18, 0xaf, 0xa6, 0x9c,
	0x42, 0xdf, 0x6a, 0x30, 0x75, 0xe8, 0x04, 0xd0, 0xa5, 0x44, 0x87, 0xff, 0x45, 0x8c, 0xe2, 0xbb,
	0x2f, 0x6b, 0x16, 0xa5, 0x53, 0x1c, 0xfa, 0x82, 0xff, 0x9c, 0x5b, 0x5a, 0x7d, 0xb0, 0x37, 0xad,
	0x3d, 0xdc, 0x9b, 0xd6, 0xfe, 0xda, 0x9b, 0xd6, 0xbe, 0x7f, 0x3c, 0x9d, 0x7a, 0xf8, 0x78, 0x3a,
	0xf5, 0xc7, 0xe3, 0xe9, 0xd4, 0x27, 0x17, 0x63, 0x8b, 0xac, 0x26, 0x83, 0xd4, 0x31, 0xbb, 0x4d,
	0xc2, 0xcd, 0x4a, 0xf4, 0xb9, 0xb5, 0xbd, 0xff, 0xc1, 0x25, 0x16, 0xdb, 0xfa, 0xb0, 0xf8, 0xb2,
	0x79, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xd0, 0x41, 0x68, 0x91, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterOperator registers a new operator.
	RegisterOperator(ctx context.Context, in *RegisterOperatorReq, opts ...grpc.CallOption) (*RegisterOperatorResponse, error)
	// add services for dogfood
	// OptInToCosmosChain acts as opt in method for an operator to
	// start validatring on a chain. The operator must sign the request with
	// the key with which they registered in the system.
	OptInToCosmosChain(ctx context.Context, in *OptInToCosmosChainRequest, opts ...grpc.CallOption) (*OptInToCosmosChainResponse, error)
	// InitOptOutFromCosmosChain is a method with which an operator can initiate
	// the opt out process from a chain. The operator must sign the request with
	// the key with which they registered in the system. The opt-out process takes
	// as long as the chain's unbonding period to complete, plus some loose change
	// for message relaying across chains.
	InitOptOutFromCosmosChain(ctx context.Context, in *InitOptOutFromCosmosChainRequest, opts ...grpc.CallOption) (*InitOptOutFromCosmosChainResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOperator(ctx context.Context, in *RegisterOperatorReq, opts ...grpc.CallOption) (*RegisterOperatorResponse, error) {
	out := new(RegisterOperatorResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Msg/RegisterOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OptInToCosmosChain(ctx context.Context, in *OptInToCosmosChainRequest, opts ...grpc.CallOption) (*OptInToCosmosChainResponse, error) {
	out := new(OptInToCosmosChainResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Msg/OptInToCosmosChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitOptOutFromCosmosChain(ctx context.Context, in *InitOptOutFromCosmosChainRequest, opts ...grpc.CallOption) (*InitOptOutFromCosmosChainResponse, error) {
	out := new(InitOptOutFromCosmosChainResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Msg/InitOptOutFromCosmosChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterOperator registers a new operator.
	RegisterOperator(context.Context, *RegisterOperatorReq) (*RegisterOperatorResponse, error)
	// add services for dogfood
	// OptInToCosmosChain acts as opt in method for an operator to
	// start validatring on a chain. The operator must sign the request with
	// the key with which they registered in the system.
	OptInToCosmosChain(context.Context, *OptInToCosmosChainRequest) (*OptInToCosmosChainResponse, error)
	// InitOptOutFromCosmosChain is a method with which an operator can initiate
	// the opt out process from a chain. The operator must sign the request with
	// the key with which they registered in the system. The opt-out process takes
	// as long as the chain's unbonding period to complete, plus some loose change
	// for message relaying across chains.
	InitOptOutFromCosmosChain(context.Context, *InitOptOutFromCosmosChainRequest) (*InitOptOutFromCosmosChainResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOperator(ctx context.Context, req *RegisterOperatorReq) (*RegisterOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOperator not implemented")
}
func (*UnimplementedMsgServer) OptInToCosmosChain(ctx context.Context, req *OptInToCosmosChainRequest) (*OptInToCosmosChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptInToCosmosChain not implemented")
}
func (*UnimplementedMsgServer) InitOptOutFromCosmosChain(ctx context.Context, req *InitOptOutFromCosmosChainRequest) (*InitOptOutFromCosmosChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitOptOutFromCosmosChain not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Msg/RegisterOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOperator(ctx, req.(*RegisterOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OptInToCosmosChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptInToCosmosChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OptInToCosmosChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Msg/OptInToCosmosChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OptInToCosmosChain(ctx, req.(*OptInToCosmosChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitOptOutFromCosmosChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitOptOutFromCosmosChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitOptOutFromCosmosChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Msg/InitOptOutFromCosmosChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitOptOutFromCosmosChain(ctx, req.(*InitOptOutFromCosmosChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.operator.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOperator",
			Handler:    _Msg_RegisterOperator_Handler,
		},
		{
			MethodName: "OptInToCosmosChain",
			Handler:    _Msg_OptInToCosmosChain_Handler,
		},
		{
			MethodName: "InitOptOutFromCosmosChain",
			Handler:    _Msg_InitOptOutFromCosmosChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/operator/v1/tx.proto",
}

func (m *DecValueField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecValueField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecValueField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientChainEarningAddrList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainEarningAddrList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainEarningAddrList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EarningInfoList) > 0 {
		for iNdEx := len(m.EarningInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EarningInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientChainEarningAddrInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainEarningAddrInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainEarningAddrInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientChainEarningAddr) > 0 {
		i -= len(m.ClientChainEarningAddr)
		copy(dAtA[i:], m.ClientChainEarningAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientChainEarningAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.LzClientChainID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LzClientChainID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ClientChainEarningsAddr != nil {
		{
			size, err := m.ClientChainEarningsAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorMetaInfo) > 0 {
		i -= len(m.OperatorMetaInfo)
		copy(dAtA[i:], m.OperatorMetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorMetaInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApproveAddr) > 0 {
		i -= len(m.ApproveAddr)
		copy(dAtA[i:], m.ApproveAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApproveAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EarningsAddr) > 0 {
		i -= len(m.EarningsAddr)
		copy(dAtA[i:], m.EarningsAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EarningsAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.OptedOutHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OptedOutHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.OptedInHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OptedInHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SlashContract) > 0 {
		i -= len(m.SlashContract)
		copy(dAtA[i:], m.SlashContract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SlashContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptedInAssetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptedInAssetState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptedInAssetState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SlashFromUndelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashFromUndelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashFromUndelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlashFromAssetsPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashFromAssetsPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashFromAssetsPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlashExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SlashAssetsPool) > 0 {
		for iNdEx := len(m.SlashAssetsPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SlashAssetsPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SlashUndelegations) > 0 {
		for iNdEx := len(m.SlashUndelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SlashUndelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.SlashValue.Size()
		i -= size
		if _, err := m.SlashValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.SlashProportion.Size()
		i -= size
		if _, err := m.SlashProportion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperatorSlashInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorSlashInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorSlashInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionInfo != nil {
		{
			size, err := m.ExecutionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SlashType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SlashType))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.SlashProportion.Size()
		i -= size
		if _, err := m.SlashProportion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.IsVetoed {
		i--
		if m.IsVetoed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.EventHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EventHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.SubmittedHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubmittedHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SlashContract) > 0 {
		i -= len(m.SlashContract)
		copy(dAtA[i:], m.SlashContract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SlashContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOperatorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOperatorReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOperatorReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OptInToCosmosChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptInToCosmosChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptInToCosmosChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptInToCosmosChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptInToCosmosChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptInToCosmosChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InitOptOutFromCosmosChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitOptOutFromCosmosChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitOptOutFromCosmosChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitOptOutFromCosmosChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitOptOutFromCosmosChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitOptOutFromCosmosChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DecValueField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *ClientChainEarningAddrList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EarningInfoList) > 0 {
		for _, e := range m.EarningInfoList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ClientChainEarningAddrInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LzClientChainID != 0 {
		n += 1 + sovTx(uint64(m.LzClientChainID))
	}
	l = len(m.ClientChainEarningAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OperatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EarningsAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ApproveAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorMetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClientChainEarningsAddr != nil {
		l = m.ClientChainEarningsAddr.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Commission.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *OptedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlashContract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OptedInHeight != 0 {
		n += 1 + sovTx(uint64(m.OptedInHeight))
	}
	if m.OptedOutHeight != 0 {
		n += 1 + sovTx(uint64(m.OptedOutHeight))
	}
	if m.Jailed {
		n += 2
	}
	return n
}

func (m *OptedInAssetState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *SlashFromUndelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *SlashFromAssetsPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *SlashExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SlashProportion.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.SlashValue.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.SlashUndelegations) > 0 {
		for _, e := range m.SlashUndelegations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.SlashAssetsPool) > 0 {
		for _, e := range m.SlashAssetsPool {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *OperatorSlashInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlashContract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubmittedHeight != 0 {
		n += 1 + sovTx(uint64(m.SubmittedHeight))
	}
	if m.EventHeight != 0 {
		n += 1 + sovTx(uint64(m.EventHeight))
	}
	if m.IsVetoed {
		n += 2
	}
	l = m.SlashProportion.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.SlashType != 0 {
		n += 1 + sovTx(uint64(m.SlashType))
	}
	if m.ExecutionInfo != nil {
		l = m.ExecutionInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterOperatorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OptInToCosmosChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OptInToCosmosChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitOptOutFromCosmosChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *InitOptOutFromCosmosChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DecValueField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecValueField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecValueField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainEarningAddrList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientChainEarningAddrList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientChainEarningAddrList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarningInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarningInfoList = append(m.EarningInfoList, &ClientChainEarningAddrInfo{})
			if err := m.EarningInfoList[len(m.EarningInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainEarningAddrInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientChainEarningAddrInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientChainEarningAddrInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LzClientChainID", wireType)
			}
			m.LzClientChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LzClientChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainEarningAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChainEarningAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarningsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarningsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorMetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorMetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainEarningsAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientChainEarningsAddr == nil {
				m.ClientChainEarningsAddr = &ClientChainEarningAddrList{}
			}
			if err := m.ClientChainEarningsAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptedInHeight", wireType)
			}
			m.OptedInHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptedInHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptedOutHeight", wireType)
			}
			m.OptedOutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptedOutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptedInAssetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptedInAssetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptedInAssetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashFromUndelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashFromUndelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashFromUndelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashFromAssetsPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashFromAssetsPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashFromAssetsPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashProportion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashProportion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashUndelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashUndelegations = append(m.SlashUndelegations, &SlashFromUndelegation{})
			if err := m.SlashUndelegations[len(m.SlashUndelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashAssetsPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashAssetsPool = append(m.SlashAssetsPool, &SlashFromAssetsPool{})
			if err := m.SlashAssetsPool[len(m.SlashAssetsPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorSlashInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorSlashInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorSlashInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedHeight", wireType)
			}
			m.SubmittedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmittedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventHeight", wireType)
			}
			m.EventHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVetoed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVetoed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashProportion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashProportion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashType", wireType)
			}
			m.SlashType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionInfo == nil {
				m.ExecutionInfo = &SlashExecutionInfo{}
			}
			if err := m.ExecutionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOperatorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOperatorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOperatorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OperatorInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptInToCosmosChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptInToCosmosChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptInToCosmosChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptInToCosmosChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptInToCosmosChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptInToCosmosChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitOptOutFromCosmosChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitOptOutFromCosmosChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitOptOutFromCosmosChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitOptOutFromCosmosChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitOptOutFromCosmosChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitOptOutFromCosmosChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
