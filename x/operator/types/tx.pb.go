// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/operator/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientChainEarningAddrList struct {
	EarningInfoList []*ClientChainEarningAddrInfo `protobuf:"bytes,1,rep,name=EarningInfoList,proto3" json:"EarningInfoList,omitempty"`
}

func (m *ClientChainEarningAddrList) Reset()         { *m = ClientChainEarningAddrList{} }
func (m *ClientChainEarningAddrList) String() string { return proto.CompactTextString(m) }
func (*ClientChainEarningAddrList) ProtoMessage()    {}
func (*ClientChainEarningAddrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{0}
}
func (m *ClientChainEarningAddrList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainEarningAddrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainEarningAddrList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainEarningAddrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainEarningAddrList.Merge(m, src)
}
func (m *ClientChainEarningAddrList) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainEarningAddrList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainEarningAddrList.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainEarningAddrList proto.InternalMessageInfo

func (m *ClientChainEarningAddrList) GetEarningInfoList() []*ClientChainEarningAddrInfo {
	if m != nil {
		return m.EarningInfoList
	}
	return nil
}

type ClientChainEarningAddrInfo struct {
	LzClientChainId        uint64 `protobuf:"varint,1,opt,name=lzClientChainId,proto3" json:"lzClientChainId,omitempty"`
	ClientChainEarningAddr string `protobuf:"bytes,2,opt,name=clientChainEarningAddr,proto3" json:"clientChainEarningAddr,omitempty"`
}

func (m *ClientChainEarningAddrInfo) Reset()         { *m = ClientChainEarningAddrInfo{} }
func (m *ClientChainEarningAddrInfo) String() string { return proto.CompactTextString(m) }
func (*ClientChainEarningAddrInfo) ProtoMessage()    {}
func (*ClientChainEarningAddrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{1}
}
func (m *ClientChainEarningAddrInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainEarningAddrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainEarningAddrInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainEarningAddrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainEarningAddrInfo.Merge(m, src)
}
func (m *ClientChainEarningAddrInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainEarningAddrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainEarningAddrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainEarningAddrInfo proto.InternalMessageInfo

func (m *ClientChainEarningAddrInfo) GetLzClientChainId() uint64 {
	if m != nil {
		return m.LzClientChainId
	}
	return 0
}

func (m *ClientChainEarningAddrInfo) GetClientChainEarningAddr() string {
	if m != nil {
		return m.ClientChainEarningAddr
	}
	return ""
}

type OperatorInfo struct {
	EarningsAddr            string                      `protobuf:"bytes,1,opt,name=EarningsAddr,proto3" json:"EarningsAddr,omitempty"`
	ApproveAddr             string                      `protobuf:"bytes,2,opt,name=ApproveAddr,proto3" json:"ApproveAddr,omitempty"`
	OperatorMetaInfo        string                      `protobuf:"bytes,3,opt,name=OperatorMetaInfo,proto3" json:"OperatorMetaInfo,omitempty"`
	ClientChainEarningsAddr *ClientChainEarningAddrList `protobuf:"bytes,4,opt,name=ClientChainEarningsAddr,proto3" json:"ClientChainEarningsAddr,omitempty"`
}

func (m *OperatorInfo) Reset()         { *m = OperatorInfo{} }
func (m *OperatorInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorInfo) ProtoMessage()    {}
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{2}
}
func (m *OperatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorInfo.Merge(m, src)
}
func (m *OperatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorInfo proto.InternalMessageInfo

func (m *OperatorInfo) GetEarningsAddr() string {
	if m != nil {
		return m.EarningsAddr
	}
	return ""
}

func (m *OperatorInfo) GetApproveAddr() string {
	if m != nil {
		return m.ApproveAddr
	}
	return ""
}

func (m *OperatorInfo) GetOperatorMetaInfo() string {
	if m != nil {
		return m.OperatorMetaInfo
	}
	return ""
}

func (m *OperatorInfo) GetClientChainEarningsAddr() *ClientChainEarningAddrList {
	if m != nil {
		return m.ClientChainEarningsAddr
	}
	return nil
}

type OptedInfo struct {
	SlashContract  string `protobuf:"bytes,1,opt,name=SlashContract,proto3" json:"SlashContract,omitempty"`
	OptedInHeight  uint64 `protobuf:"varint,2,opt,name=OptedInHeight,proto3" json:"OptedInHeight,omitempty"`
	OptedOutHeight uint64 `protobuf:"varint,3,opt,name=OptedOutHeight,proto3" json:"OptedOutHeight,omitempty"`
}

func (m *OptedInfo) Reset()         { *m = OptedInfo{} }
func (m *OptedInfo) String() string { return proto.CompactTextString(m) }
func (*OptedInfo) ProtoMessage()    {}
func (*OptedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{3}
}
func (m *OptedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OptedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OptedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OptedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptedInfo.Merge(m, src)
}
func (m *OptedInfo) XXX_Size() int {
	return m.Size()
}
func (m *OptedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OptedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OptedInfo proto.InternalMessageInfo

func (m *OptedInfo) GetSlashContract() string {
	if m != nil {
		return m.SlashContract
	}
	return ""
}

func (m *OptedInfo) GetOptedInHeight() uint64 {
	if m != nil {
		return m.OptedInHeight
	}
	return 0
}

func (m *OptedInfo) GetOptedOutHeight() uint64 {
	if m != nil {
		return m.OptedOutHeight
	}
	return 0
}

type AssetOptedInState struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=Amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"Amount"`
	Value  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=Value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"Value"`
}

func (m *AssetOptedInState) Reset()         { *m = AssetOptedInState{} }
func (m *AssetOptedInState) String() string { return proto.CompactTextString(m) }
func (*AssetOptedInState) ProtoMessage()    {}
func (*AssetOptedInState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{4}
}
func (m *AssetOptedInState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetOptedInState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetOptedInState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetOptedInState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetOptedInState.Merge(m, src)
}
func (m *AssetOptedInState) XXX_Size() int {
	return m.Size()
}
func (m *AssetOptedInState) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetOptedInState.DiscardUnknown(m)
}

var xxx_messageInfo_AssetOptedInState proto.InternalMessageInfo

type ValueField struct {
	Amount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=Amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"Amount"`
}

func (m *ValueField) Reset()         { *m = ValueField{} }
func (m *ValueField) String() string { return proto.CompactTextString(m) }
func (*ValueField) ProtoMessage()    {}
func (*ValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{5}
}
func (m *ValueField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueField.Merge(m, src)
}
func (m *ValueField) XXX_Size() int {
	return m.Size()
}
func (m *ValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueField.DiscardUnknown(m)
}

var xxx_messageInfo_ValueField proto.InternalMessageInfo

type OperatorSlashInfo struct {
	SlashContract   string                                 `protobuf:"bytes,1,opt,name=SlashContract,proto3" json:"SlashContract,omitempty"`
	SlashHeight     int64                                  `protobuf:"varint,2,opt,name=SlashHeight,proto3" json:"SlashHeight,omitempty"`
	OccurredHeight  int64                                  `protobuf:"varint,3,opt,name=OccurredHeight,proto3" json:"OccurredHeight,omitempty"`
	ExecuteHeight   int64                                  `protobuf:"varint,4,opt,name=ExecuteHeight,proto3" json:"ExecuteHeight,omitempty"`
	IsVeto          bool                                   `protobuf:"varint,5,opt,name=IsVeto,proto3" json:"IsVeto,omitempty"`
	SlashProportion github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=SlashProportion,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"SlashProportion"`
}

func (m *OperatorSlashInfo) Reset()         { *m = OperatorSlashInfo{} }
func (m *OperatorSlashInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorSlashInfo) ProtoMessage()    {}
func (*OperatorSlashInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{6}
}
func (m *OperatorSlashInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorSlashInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorSlashInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorSlashInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorSlashInfo.Merge(m, src)
}
func (m *OperatorSlashInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorSlashInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorSlashInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorSlashInfo proto.InternalMessageInfo

func (m *OperatorSlashInfo) GetSlashContract() string {
	if m != nil {
		return m.SlashContract
	}
	return ""
}

func (m *OperatorSlashInfo) GetSlashHeight() int64 {
	if m != nil {
		return m.SlashHeight
	}
	return 0
}

func (m *OperatorSlashInfo) GetOccurredHeight() int64 {
	if m != nil {
		return m.OccurredHeight
	}
	return 0
}

func (m *OperatorSlashInfo) GetExecuteHeight() int64 {
	if m != nil {
		return m.ExecuteHeight
	}
	return 0
}

func (m *OperatorSlashInfo) GetIsVeto() bool {
	if m != nil {
		return m.IsVeto
	}
	return false
}

type RegisterOperatorReq struct {
	FromAddress string        `protobuf:"bytes,1,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`
	Info        *OperatorInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RegisterOperatorReq) Reset()         { *m = RegisterOperatorReq{} }
func (m *RegisterOperatorReq) String() string { return proto.CompactTextString(m) }
func (*RegisterOperatorReq) ProtoMessage()    {}
func (*RegisterOperatorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{7}
}
func (m *RegisterOperatorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOperatorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOperatorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOperatorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOperatorReq.Merge(m, src)
}
func (m *RegisterOperatorReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOperatorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOperatorReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOperatorReq proto.InternalMessageInfo

type RegisterOperatorResponse struct {
}

func (m *RegisterOperatorResponse) Reset()         { *m = RegisterOperatorResponse{} }
func (m *RegisterOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterOperatorResponse) ProtoMessage()    {}
func (*RegisterOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b229d5663e4df167, []int{8}
}
func (m *RegisterOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOperatorResponse.Merge(m, src)
}
func (m *RegisterOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOperatorResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientChainEarningAddrList)(nil), "exocore.operator.v1.clientChainEarningAddrList")
	proto.RegisterType((*ClientChainEarningAddrInfo)(nil), "exocore.operator.v1.clientChainEarningAddrInfo")
	proto.RegisterType((*OperatorInfo)(nil), "exocore.operator.v1.OperatorInfo")
	proto.RegisterType((*OptedInfo)(nil), "exocore.operator.v1.OptedInfo")
	proto.RegisterType((*AssetOptedInState)(nil), "exocore.operator.v1.AssetOptedInState")
	proto.RegisterType((*ValueField)(nil), "exocore.operator.v1.ValueField")
	proto.RegisterType((*OperatorSlashInfo)(nil), "exocore.operator.v1.OperatorSlashInfo")
	proto.RegisterType((*RegisterOperatorReq)(nil), "exocore.operator.v1.RegisterOperatorReq")
	proto.RegisterType((*RegisterOperatorResponse)(nil), "exocore.operator.v1.RegisterOperatorResponse")
}

func init() { proto.RegisterFile("exocore/operator/v1/tx.proto", fileDescriptor_b229d5663e4df167) }

var fileDescriptor_b229d5663e4df167 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x4f, 0x13, 0x4f,
	0x14, 0xef, 0xd2, 0xd2, 0x7c, 0x79, 0xe5, 0x2b, 0x30, 0x10, 0x58, 0x1b, 0xd3, 0xd6, 0xd5, 0x90,
	0xa6, 0x49, 0xbb, 0x01, 0x7f, 0x1c, 0x88, 0x1e, 0x4a, 0x81, 0xd8, 0x44, 0x82, 0x19, 0x0c, 0x89,
	0x5e, 0xcc, 0xb2, 0x1d, 0xb6, 0x1b, 0xda, 0x9d, 0x75, 0x66, 0x8a, 0xc5, 0x83, 0x1a, 0x4f, 0xc6,
	0x93, 0x7f, 0x02, 0x57, 0x6f, 0x1c, 0xb8, 0xea, 0x99, 0x23, 0xe1, 0x64, 0x3c, 0x10, 0x03, 0x07,
	0x4c, 0xfc, 0x27, 0xcc, 0xce, 0x4e, 0xc3, 0xf6, 0x07, 0x89, 0x44, 0x2f, 0xb0, 0xf3, 0x79, 0x9f,
	0xf7, 0x79, 0x6f, 0xde, 0x67, 0xa6, 0x03, 0x37, 0x48, 0x9b, 0xda, 0x94, 0x11, 0x93, 0xfa, 0x84,
	0x59, 0x82, 0x32, 0x73, 0x67, 0xce, 0x14, 0xed, 0x92, 0xcf, 0xa8, 0xa0, 0x68, 0x52, 0x45, 0x4b,
	0x9d, 0x68, 0x69, 0x67, 0x2e, 0x3d, 0x63, 0x53, 0xde, 0xa4, 0xdc, 0x6c, 0x72, 0x27, 0x20, 0x37,
	0xb9, 0x13, 0xb2, 0xd3, 0xd7, 0xc3, 0xc0, 0x0b, 0xb9, 0x32, 0xc3, 0x85, 0x0a, 0x4d, 0x39, 0xd4,
	0xa1, 0x21, 0x1e, 0x7c, 0x29, 0x74, 0xc2, 0x6a, 0xba, 0x1e, 0x35, 0xe5, 0xdf, 0x10, 0x32, 0x5e,
	0x41, 0xda, 0x6e, 0xb8, 0xc4, 0x13, 0x95, 0xba, 0xe5, 0x7a, 0xcb, 0x16, 0xf3, 0x5c, 0xcf, 0x29,
	0xd7, 0x6a, 0xec, 0xb1, 0xcb, 0x05, 0x7a, 0x06, 0x63, 0x0a, 0xaa, 0x7a, 0x5b, 0x34, 0x80, 0x74,
	0x2d, 0x17, 0xcf, 0xa7, 0xe6, 0xcd, 0xd2, 0x80, 0x4e, 0x4b, 0x83, 0x95, 0x82, 0x54, 0xdc, 0xab,
	0x63, 0xbc, 0xb9, 0xac, 0x70, 0xc0, 0x40, 0x79, 0x18, 0x6b, 0xbc, 0xae, 0x5c, 0xc4, 0xab, 0x35,
	0x5d, 0xcb, 0x69, 0xf9, 0x04, 0xee, 0x85, 0xd1, 0x7d, 0x98, 0x1e, 0xac, 0xa3, 0x0f, 0xe5, 0xb4,
	0xfc, 0x08, 0xbe, 0x24, 0x6a, 0xfc, 0xd2, 0x60, 0x74, 0x4d, 0xf5, 0x2e, 0x4b, 0x1a, 0x30, 0xaa,
	0xe2, 0x5c, 0xa6, 0x6b, 0x32, 0xbd, 0x0b, 0x43, 0x39, 0x48, 0x95, 0x7d, 0x9f, 0xd1, 0x1d, 0x12,
	0xa9, 0x10, 0x85, 0x50, 0x01, 0xc6, 0x3b, 0xaa, 0xab, 0x44, 0x58, 0x81, 0xb2, 0x1e, 0x97, 0xb4,
	0x3e, 0x1c, 0xb9, 0x30, 0x53, 0xe9, 0x6b, 0x2e, 0x2c, 0x9e, 0xc8, 0x69, 0x57, 0x9c, 0x72, 0x30,
	0x54, 0x7c, 0x99, 0x9e, 0xf1, 0x16, 0x46, 0xd6, 0x7c, 0x41, 0x6a, 0xb2, 0xee, 0x6d, 0xf8, 0x7f,
	0xbd, 0x61, 0xf1, 0x7a, 0x85, 0x7a, 0x82, 0x59, 0xb6, 0x50, 0x5b, 0xed, 0x06, 0x03, 0x96, 0x4a,
	0x79, 0x44, 0x5c, 0xa7, 0x2e, 0xe4, 0x6e, 0x13, 0xb8, 0x1b, 0x44, 0xb3, 0x70, 0x4d, 0x02, 0x6b,
	0x2d, 0xa1, 0x68, 0x71, 0x49, 0xeb, 0x41, 0x8d, 0x2f, 0x1a, 0x4c, 0x94, 0x39, 0x27, 0x42, 0xa5,
	0xaf, 0x0b, 0x4b, 0x10, 0xf4, 0x14, 0x92, 0xe5, 0x26, 0x6d, 0x79, 0xaa, 0x85, 0xc5, 0x07, 0x87,
	0x27, 0xd9, 0xd8, 0xf7, 0x93, 0xec, 0xac, 0xe3, 0x8a, 0x7a, 0x6b, 0xb3, 0x64, 0xd3, 0xa6, 0x3a,
	0xd7, 0xea, 0x5f, 0x91, 0xd7, 0xb6, 0x4d, 0xb1, 0xeb, 0x13, 0x5e, 0xaa, 0x7a, 0xe2, 0xf8, 0xa0,
	0x08, 0xea, 0xd8, 0x57, 0x3d, 0x81, 0x95, 0x16, 0xc2, 0x30, 0xbc, 0x61, 0x35, 0x5a, 0x24, 0xf4,
	0xe7, 0x4a, 0xa2, 0x4b, 0xc4, 0x8e, 0x88, 0x2e, 0x11, 0x1b, 0x87, 0x52, 0xc6, 0x26, 0x80, 0xfc,
	0x58, 0x71, 0x49, 0xa3, 0xf6, 0x57, 0x7d, 0xf7, 0x97, 0x50, 0x5a, 0xc6, 0xe7, 0x21, 0x98, 0xe8,
	0x1c, 0x12, 0xe9, 0xc5, 0x15, 0xdc, 0xca, 0x41, 0x4a, 0x02, 0x11, 0xaf, 0xe2, 0x38, 0x0a, 0x49,
	0xa7, 0x6c, 0xbb, 0xc5, 0x18, 0xa9, 0x45, 0x9c, 0x8a, 0xe3, 0x1e, 0x34, 0xa8, 0xb7, 0xdc, 0x26,
	0x76, 0x4b, 0x10, 0x45, 0x4b, 0x48, 0x5a, 0x37, 0x88, 0xa6, 0x21, 0x59, 0xe5, 0x1b, 0x44, 0x50,
	0x7d, 0x38, 0xa7, 0xe5, 0xff, 0xc3, 0x6a, 0x85, 0xb6, 0x60, 0x4c, 0x16, 0x7d, 0xc2, 0xa8, 0x4f,
	0x99, 0x70, 0xa9, 0xa7, 0x27, 0xff, 0xc1, 0x88, 0x7a, 0x45, 0x8d, 0xaf, 0x1a, 0x4c, 0x62, 0xe2,
	0xb8, 0x5c, 0x10, 0xd6, 0x99, 0x19, 0x26, 0x2f, 0xd1, 0x02, 0xa4, 0x56, 0x18, 0x6d, 0x06, 0x87,
	0x9e, 0x70, 0xae, 0xec, 0xd1, 0x8f, 0x0f, 0x8a, 0x53, 0x4a, 0x4d, 0x45, 0xd6, 0x05, 0x73, 0x3d,
	0x07, 0x47, 0xc9, 0xe8, 0x1e, 0x24, 0xdc, 0xe0, 0xbe, 0x0e, 0xc9, 0xcb, 0x77, 0x73, 0xe0, 0xe5,
	0x8b, 0xfe, 0x64, 0x60, 0x49, 0x5f, 0xb8, 0xfb, 0x61, 0x2f, 0x1b, 0xfb, 0xb9, 0x97, 0x8d, 0xbd,
	0x3f, 0xdf, 0x2f, 0x44, 0x05, 0x3f, 0x9e, 0xef, 0x17, 0x66, 0x22, 0x9b, 0x8b, 0xe6, 0x1a, 0x69,
	0xd0, 0xfb, 0xfb, 0xe7, 0x3e, 0xf5, 0x38, 0x99, 0xdf, 0x85, 0xf8, 0x2a, 0x77, 0xd0, 0x36, 0x8c,
	0xf7, 0x52, 0x50, 0x7e, 0x60, 0x57, 0x03, 0x26, 0x91, 0x2e, 0xfe, 0x21, 0x33, 0xac, 0x99, 0x1e,
	0x7e, 0x77, 0xbe, 0x5f, 0xd0, 0x16, 0x1f, 0x1e, 0x9e, 0x66, 0xb4, 0xa3, 0xd3, 0x8c, 0xf6, 0xe3,
	0x34, 0xa3, 0x7d, 0x3a, 0xcb, 0xc4, 0x8e, 0xce, 0x32, 0xb1, 0x6f, 0x67, 0x99, 0xd8, 0xf3, 0x5b,
	0x11, 0xe3, 0x3a, 0x8f, 0x58, 0xfb, 0xe2, 0x19, 0x93, 0xce, 0x6d, 0x26, 0xe5, 0xab, 0x72, 0xe7,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xf3, 0x0e, 0xcc, 0xe7, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateClawbackVestingAccount creats a vesting account that is subject to clawback.
	RegisterOperator(ctx context.Context, in *RegisterOperatorReq, opts ...grpc.CallOption) (*RegisterOperatorResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOperator(ctx context.Context, in *RegisterOperatorReq, opts ...grpc.CallOption) (*RegisterOperatorResponse, error) {
	out := new(RegisterOperatorResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Msg/RegisterOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateClawbackVestingAccount creats a vesting account that is subject to clawback.
	RegisterOperator(context.Context, *RegisterOperatorReq) (*RegisterOperatorResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOperator(ctx context.Context, req *RegisterOperatorReq) (*RegisterOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOperator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Msg/RegisterOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOperator(ctx, req.(*RegisterOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.operator.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOperator",
			Handler:    _Msg_RegisterOperator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/operator/v1/tx.proto",
}

func (m *ClientChainEarningAddrList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainEarningAddrList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainEarningAddrList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EarningInfoList) > 0 {
		for iNdEx := len(m.EarningInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EarningInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientChainEarningAddrInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainEarningAddrInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainEarningAddrInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientChainEarningAddr) > 0 {
		i -= len(m.ClientChainEarningAddr)
		copy(dAtA[i:], m.ClientChainEarningAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientChainEarningAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.LzClientChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LzClientChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientChainEarningsAddr != nil {
		{
			size, err := m.ClientChainEarningsAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorMetaInfo) > 0 {
		i -= len(m.OperatorMetaInfo)
		copy(dAtA[i:], m.OperatorMetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorMetaInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApproveAddr) > 0 {
		i -= len(m.ApproveAddr)
		copy(dAtA[i:], m.ApproveAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApproveAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EarningsAddr) > 0 {
		i -= len(m.EarningsAddr)
		copy(dAtA[i:], m.EarningsAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EarningsAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OptedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OptedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptedOutHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OptedOutHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.OptedInHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OptedInHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SlashContract) > 0 {
		i -= len(m.SlashContract)
		copy(dAtA[i:], m.SlashContract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SlashContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetOptedInState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetOptedInState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetOptedInState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ValueField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OperatorSlashInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorSlashInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorSlashInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SlashProportion.Size()
		i -= size
		if _, err := m.SlashProportion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.IsVeto {
		i--
		if m.IsVeto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ExecuteHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecuteHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.OccurredHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OccurredHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.SlashHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SlashHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SlashContract) > 0 {
		i -= len(m.SlashContract)
		copy(dAtA[i:], m.SlashContract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SlashContract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOperatorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOperatorReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOperatorReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientChainEarningAddrList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EarningInfoList) > 0 {
		for _, e := range m.EarningInfoList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ClientChainEarningAddrInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LzClientChainId != 0 {
		n += 1 + sovTx(uint64(m.LzClientChainId))
	}
	l = len(m.ClientChainEarningAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OperatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EarningsAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ApproveAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorMetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClientChainEarningsAddr != nil {
		l = m.ClientChainEarningsAddr.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OptedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlashContract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OptedInHeight != 0 {
		n += 1 + sovTx(uint64(m.OptedInHeight))
	}
	if m.OptedOutHeight != 0 {
		n += 1 + sovTx(uint64(m.OptedOutHeight))
	}
	return n
}

func (m *AssetOptedInState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *ValueField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *OperatorSlashInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlashContract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SlashHeight != 0 {
		n += 1 + sovTx(uint64(m.SlashHeight))
	}
	if m.OccurredHeight != 0 {
		n += 1 + sovTx(uint64(m.OccurredHeight))
	}
	if m.ExecuteHeight != 0 {
		n += 1 + sovTx(uint64(m.ExecuteHeight))
	}
	if m.IsVeto {
		n += 2
	}
	l = m.SlashProportion.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *RegisterOperatorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientChainEarningAddrList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clientChainEarningAddrList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clientChainEarningAddrList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarningInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarningInfoList = append(m.EarningInfoList, &ClientChainEarningAddrInfo{})
			if err := m.EarningInfoList[len(m.EarningInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainEarningAddrInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clientChainEarningAddrInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clientChainEarningAddrInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LzClientChainId", wireType)
			}
			m.LzClientChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LzClientChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainEarningAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChainEarningAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarningsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarningsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorMetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorMetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainEarningsAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientChainEarningsAddr == nil {
				m.ClientChainEarningsAddr = &ClientChainEarningAddrList{}
			}
			if err := m.ClientChainEarningsAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OptedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptedInHeight", wireType)
			}
			m.OptedInHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptedInHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptedOutHeight", wireType)
			}
			m.OptedOutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OptedOutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetOptedInState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetOptedInState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetOptedInState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorSlashInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorSlashInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorSlashInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashHeight", wireType)
			}
			m.SlashHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OccurredHeight", wireType)
			}
			m.OccurredHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OccurredHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteHeight", wireType)
			}
			m.ExecuteHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVeto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVeto = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashProportion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashProportion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOperatorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOperatorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOperatorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OperatorInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
