// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/operator/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOperatorInfoReq is the request to obtain the operator information.
type GetOperatorInfoReq struct {
	// operator_addr is the operator address,its type should be a sdk.AccAddress
	OperatorAddr string `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
}

func (m *GetOperatorInfoReq) Reset()         { *m = GetOperatorInfoReq{} }
func (m *GetOperatorInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetOperatorInfoReq) ProtoMessage()    {}
func (*GetOperatorInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{0}
}
func (m *GetOperatorInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOperatorInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOperatorInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOperatorInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperatorInfoReq.Merge(m, src)
}
func (m *GetOperatorInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetOperatorInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperatorInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperatorInfoReq proto.InternalMessageInfo

func (m *GetOperatorInfoReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

// QueryAllOperatorsRequest is the request to obtain all operators.
type QueryAllOperatorsRequest struct {
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorsRequest) Reset()         { *m = QueryAllOperatorsRequest{} }
func (m *QueryAllOperatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorsRequest) ProtoMessage()    {}
func (*QueryAllOperatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{1}
}
func (m *QueryAllOperatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorsRequest.Merge(m, src)
}
func (m *QueryAllOperatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorsRequest proto.InternalMessageInfo

func (m *QueryAllOperatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllOperatorsResponse is the response containing all operator account addresses.
type QueryAllOperatorsResponse struct {
	// operators is a list of all operators.
	OperatorAccAddrs []string `protobuf:"bytes,1,rep,name=operator_acc_addrs,json=operatorAccAddrs,proto3" json:"operator_acc_addrs,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorsResponse) Reset()         { *m = QueryAllOperatorsResponse{} }
func (m *QueryAllOperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorsResponse) ProtoMessage()    {}
func (*QueryAllOperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{2}
}
func (m *QueryAllOperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorsResponse.Merge(m, src)
}
func (m *QueryAllOperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorsResponse proto.InternalMessageInfo

func (m *QueryAllOperatorsResponse) GetOperatorAccAddrs() []string {
	if m != nil {
		return m.OperatorAccAddrs
	}
	return nil
}

func (m *QueryAllOperatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// AddressInfo includes the address of operator and AVS
type AddressInfo struct {
	// operator_addr is the operator address,its type should be a sdk.AccAddress
	OperatorAddr string `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	// avs_address is the AVS address opted-in by the operator
	AVSAddress string `protobuf:"bytes,2,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
}

func (m *AddressInfo) Reset()         { *m = AddressInfo{} }
func (m *AddressInfo) String() string { return proto.CompactTextString(m) }
func (*AddressInfo) ProtoMessage()    {}
func (*AddressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{3}
}
func (m *AddressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressInfo.Merge(m, src)
}
func (m *AddressInfo) XXX_Size() int {
	return m.Size()
}
func (m *AddressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AddressInfo proto.InternalMessageInfo

func (m *AddressInfo) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *AddressInfo) GetAVSAddress() string {
	if m != nil {
		return m.AVSAddress
	}
	return ""
}

// QueryOperatorConsKeyRequest is a request to obtain the consensus public key of the operator.
// QueryOperatorUSDValueRequest is the request to obtain the USD value for operator.
type QueryOperatorUSDValueRequest struct {
	// address_info is the operator and AVS address
	AddressInfo *AddressInfo `protobuf:"bytes,1,opt,name=address_info,json=addressInfo,proto3" json:"address_info,omitempty"`
}

func (m *QueryOperatorUSDValueRequest) Reset()         { *m = QueryOperatorUSDValueRequest{} }
func (m *QueryOperatorUSDValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorUSDValueRequest) ProtoMessage()    {}
func (*QueryOperatorUSDValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{4}
}
func (m *QueryOperatorUSDValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorUSDValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorUSDValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorUSDValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorUSDValueRequest.Merge(m, src)
}
func (m *QueryOperatorUSDValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorUSDValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorUSDValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorUSDValueRequest proto.InternalMessageInfo

func (m *QueryOperatorUSDValueRequest) GetAddressInfo() *AddressInfo {
	if m != nil {
		return m.AddressInfo
	}
	return nil
}

// QueryAVSUSDValueRequest is the request to obtain the USD value for AVS.
type QueryAVSUSDValueRequest struct {
	// avs_address is the AVS address opted-in by the operator
	AVSAddress string `protobuf:"bytes,1,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
}

func (m *QueryAVSUSDValueRequest) Reset()         { *m = QueryAVSUSDValueRequest{} }
func (m *QueryAVSUSDValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAVSUSDValueRequest) ProtoMessage()    {}
func (*QueryAVSUSDValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{5}
}
func (m *QueryAVSUSDValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAVSUSDValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAVSUSDValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAVSUSDValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAVSUSDValueRequest.Merge(m, src)
}
func (m *QueryAVSUSDValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAVSUSDValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAVSUSDValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAVSUSDValueRequest proto.InternalMessageInfo

func (m *QueryAVSUSDValueRequest) GetAVSAddress() string {
	if m != nil {
		return m.AVSAddress
	}
	return ""
}

// QueryOperatorSlashInfoRequest is the request to obtain the slash information for the specified
// operator and AVS
type QueryOperatorSlashInfoRequest struct {
	// address_info is the operator and AVS address
	AddressInfo *AddressInfo `protobuf:"bytes,1,opt,name=address_info,json=addressInfo,proto3" json:"address_info,omitempty"`
}

func (m *QueryOperatorSlashInfoRequest) Reset()         { *m = QueryOperatorSlashInfoRequest{} }
func (m *QueryOperatorSlashInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorSlashInfoRequest) ProtoMessage()    {}
func (*QueryOperatorSlashInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{6}
}
func (m *QueryOperatorSlashInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorSlashInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorSlashInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorSlashInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorSlashInfoRequest.Merge(m, src)
}
func (m *QueryOperatorSlashInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorSlashInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorSlashInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorSlashInfoRequest proto.InternalMessageInfo

func (m *QueryOperatorSlashInfoRequest) GetAddressInfo() *AddressInfo {
	if m != nil {
		return m.AddressInfo
	}
	return nil
}

// QueryOperatorSlashInfoResponse is the response for GetOperatorSlashInfoRequest
type QueryOperatorSlashInfoResponse struct {
	// AllSlashInfo the key is slashID, the value is the specified slash information
	// It's okay to use a map here, because it won't be used to store state, only in
	// the response to an RPC call
	AllSlashInfo map[string]*OperatorSlashInfo `protobuf:"bytes,1,rep,name=all_slash_info,json=allSlashInfo,proto3" json:"all_slash_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryOperatorSlashInfoResponse) Reset()         { *m = QueryOperatorSlashInfoResponse{} }
func (m *QueryOperatorSlashInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorSlashInfoResponse) ProtoMessage()    {}
func (*QueryOperatorSlashInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{7}
}
func (m *QueryOperatorSlashInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorSlashInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorSlashInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorSlashInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorSlashInfoResponse.Merge(m, src)
}
func (m *QueryOperatorSlashInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorSlashInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorSlashInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorSlashInfoResponse proto.InternalMessageInfo

func (m *QueryOperatorSlashInfoResponse) GetAllSlashInfo() map[string]*OperatorSlashInfo {
	if m != nil {
		return m.AllSlashInfo
	}
	return nil
}

// QueryOperatorConsKeyRequest is the request to obtain the consensus public key of the operator
type QueryOperatorConsKeyRequest struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// chain is the id of the chain served by the operator. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *QueryOperatorConsKeyRequest) Reset()         { *m = QueryOperatorConsKeyRequest{} }
func (m *QueryOperatorConsKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsKeyRequest) ProtoMessage()    {}
func (*QueryOperatorConsKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{8}
}
func (m *QueryOperatorConsKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsKeyRequest.Merge(m, src)
}
func (m *QueryOperatorConsKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsKeyRequest proto.InternalMessageInfo

func (m *QueryOperatorConsKeyRequest) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *QueryOperatorConsKeyRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// QueryOperatorConsKeyResponse is the response for QueryOperatorConsKeyRequest.
type QueryOperatorConsKeyResponse struct {
	// public_key is the consensus public key of the operator.
	PublicKey crypto.PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,2,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *QueryOperatorConsKeyResponse) Reset()         { *m = QueryOperatorConsKeyResponse{} }
func (m *QueryOperatorConsKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsKeyResponse) ProtoMessage()    {}
func (*QueryOperatorConsKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{9}
}
func (m *QueryOperatorConsKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsKeyResponse.Merge(m, src)
}
func (m *QueryOperatorConsKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsKeyResponse proto.InternalMessageInfo

func (m *QueryOperatorConsKeyResponse) GetPublicKey() crypto.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return crypto.PublicKey{}
}

func (m *QueryOperatorConsKeyResponse) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

// QueryOperatorConsAddressRequest is the request to obtain the consensus address of the operator
// for a specific chain ID.
type QueryOperatorConsAddressRequest struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// chain is the id of the chain served by the operator. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *QueryOperatorConsAddressRequest) Reset()         { *m = QueryOperatorConsAddressRequest{} }
func (m *QueryOperatorConsAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsAddressRequest) ProtoMessage()    {}
func (*QueryOperatorConsAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{10}
}
func (m *QueryOperatorConsAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsAddressRequest.Merge(m, src)
}
func (m *QueryOperatorConsAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsAddressRequest proto.InternalMessageInfo

func (m *QueryOperatorConsAddressRequest) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *QueryOperatorConsAddressRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// QueryOperatorConsAddressResponse is the response for QueryOperatorConsAddressRequest.
type QueryOperatorConsAddressResponse struct {
	// cons_addr is the consensus address corresponding to the consensus public key
	// currently in use by the operator.
	ConsAddr string `protobuf:"bytes,1,opt,name=cons_addr,json=consAddr,proto3" json:"cons_addr,omitempty"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,2,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *QueryOperatorConsAddressResponse) Reset()         { *m = QueryOperatorConsAddressResponse{} }
func (m *QueryOperatorConsAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsAddressResponse) ProtoMessage()    {}
func (*QueryOperatorConsAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{11}
}
func (m *QueryOperatorConsAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsAddressResponse.Merge(m, src)
}
func (m *QueryOperatorConsAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsAddressResponse proto.InternalMessageInfo

func (m *QueryOperatorConsAddressResponse) GetConsAddr() string {
	if m != nil {
		return m.ConsAddr
	}
	return ""
}

func (m *QueryOperatorConsAddressResponse) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

// QueryAllOperatorConsKeysByChainIDRequest is the request to obtain all operator addresses
// and consensus keys for a specific chain ID, with pagination.
type QueryAllOperatorConsKeysByChainIDRequest struct {
	// chain for which the cons keys are being queried. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) Reset() {
	*m = QueryAllOperatorConsKeysByChainIDRequest{}
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorConsKeysByChainIDRequest) ProtoMessage()    {}
func (*QueryAllOperatorConsKeysByChainIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{12}
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest.Merge(m, src)
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest proto.InternalMessageInfo

func (m *QueryAllOperatorConsKeysByChainIDRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllOperatorConsKeysByChainIDResponse is the response that includes a list of all operators
// and their consensus keys for a specified chain ID.
type QueryAllOperatorConsKeysByChainIDResponse struct {
	// operator_cons_keys is a list of operator addresses and their consensus public keys.
	OperatorConsKeys []*OperatorConsKeyPair `protobuf:"bytes,1,rep,name=operator_cons_keys,json=operatorConsKeys,proto3" json:"operator_cons_keys,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) Reset() {
	*m = QueryAllOperatorConsKeysByChainIDResponse{}
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllOperatorConsKeysByChainIDResponse) ProtoMessage() {}
func (*QueryAllOperatorConsKeysByChainIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{13}
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse.Merge(m, src)
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse proto.InternalMessageInfo

func (m *QueryAllOperatorConsKeysByChainIDResponse) GetOperatorConsKeys() []*OperatorConsKeyPair {
	if m != nil {
		return m.OperatorConsKeys
	}
	return nil
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OperatorConsKeyPair holds the operator address and the consensus public key currently in
// use by the operator.
type OperatorConsKeyPair struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// public_key is the consensus public key of the operator.
	PublicKey *crypto.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,3,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *OperatorConsKeyPair) Reset()         { *m = OperatorConsKeyPair{} }
func (m *OperatorConsKeyPair) String() string { return proto.CompactTextString(m) }
func (*OperatorConsKeyPair) ProtoMessage()    {}
func (*OperatorConsKeyPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{14}
}
func (m *OperatorConsKeyPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorConsKeyPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorConsKeyPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorConsKeyPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorConsKeyPair.Merge(m, src)
}
func (m *OperatorConsKeyPair) XXX_Size() int {
	return m.Size()
}
func (m *OperatorConsKeyPair) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorConsKeyPair.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorConsKeyPair proto.InternalMessageInfo

func (m *OperatorConsKeyPair) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *OperatorConsKeyPair) GetPublicKey() *crypto.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *OperatorConsKeyPair) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

// QueryAllOperatorConsAddrsByChainIDRequest is the request to obtain all operator addresses
// and consensus addresses for a specific chain ID, with pagination.
type QueryAllOperatorConsAddrsByChainIDRequest struct {
	// chain for which the cons addrs are being queried. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) Reset() {
	*m = QueryAllOperatorConsAddrsByChainIDRequest{}
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllOperatorConsAddrsByChainIDRequest) ProtoMessage() {}
func (*QueryAllOperatorConsAddrsByChainIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{15}
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest.Merge(m, src)
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest proto.InternalMessageInfo

func (m *QueryAllOperatorConsAddrsByChainIDRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllOperatorConsAddrsByChainIDResponse is the response that includes a list of all operators
// and their consensus addresses for a specified chain ID.
type QueryAllOperatorConsAddrsByChainIDResponse struct {
	// operator_cons_addrs is a list of operator account addresses and the consensus addresses.
	OperatorConsAddrs []*OperatorConsAddrPair `protobuf:"bytes,1,rep,name=operator_cons_addrs,json=operatorConsAddrs,proto3" json:"operator_cons_addrs,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) Reset() {
	*m = QueryAllOperatorConsAddrsByChainIDResponse{}
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllOperatorConsAddrsByChainIDResponse) ProtoMessage() {}
func (*QueryAllOperatorConsAddrsByChainIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{16}
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse.Merge(m, src)
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse proto.InternalMessageInfo

func (m *QueryAllOperatorConsAddrsByChainIDResponse) GetOperatorConsAddrs() []*OperatorConsAddrPair {
	if m != nil {
		return m.OperatorConsAddrs
	}
	return nil
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OperatorConsAddrPair holds the operator address and the corresponding consensus address.
type OperatorConsAddrPair struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// cons_addr is the consensus address corresponding to the consensus public key
	// currently in use by the operator.
	ConsAddr string `protobuf:"bytes,2,opt,name=cons_addr,json=consAddr,proto3" json:"cons_addr,omitempty"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,3,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *OperatorConsAddrPair) Reset()         { *m = OperatorConsAddrPair{} }
func (m *OperatorConsAddrPair) String() string { return proto.CompactTextString(m) }
func (*OperatorConsAddrPair) ProtoMessage()    {}
func (*OperatorConsAddrPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{17}
}
func (m *OperatorConsAddrPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorConsAddrPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorConsAddrPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorConsAddrPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorConsAddrPair.Merge(m, src)
}
func (m *OperatorConsAddrPair) XXX_Size() int {
	return m.Size()
}
func (m *OperatorConsAddrPair) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorConsAddrPair.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorConsAddrPair proto.InternalMessageInfo

func (m *OperatorConsAddrPair) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *OperatorConsAddrPair) GetConsAddr() string {
	if m != nil {
		return m.ConsAddr
	}
	return ""
}

func (m *OperatorConsAddrPair) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

func init() {
	proto.RegisterType((*GetOperatorInfoReq)(nil), "exocore.operator.v1.GetOperatorInfoReq")
	proto.RegisterType((*QueryAllOperatorsRequest)(nil), "exocore.operator.v1.QueryAllOperatorsRequest")
	proto.RegisterType((*QueryAllOperatorsResponse)(nil), "exocore.operator.v1.QueryAllOperatorsResponse")
	proto.RegisterType((*AddressInfo)(nil), "exocore.operator.v1.AddressInfo")
	proto.RegisterType((*QueryOperatorUSDValueRequest)(nil), "exocore.operator.v1.QueryOperatorUSDValueRequest")
	proto.RegisterType((*QueryAVSUSDValueRequest)(nil), "exocore.operator.v1.QueryAVSUSDValueRequest")
	proto.RegisterType((*QueryOperatorSlashInfoRequest)(nil), "exocore.operator.v1.QueryOperatorSlashInfoRequest")
	proto.RegisterType((*QueryOperatorSlashInfoResponse)(nil), "exocore.operator.v1.QueryOperatorSlashInfoResponse")
	proto.RegisterMapType((map[string]*OperatorSlashInfo)(nil), "exocore.operator.v1.QueryOperatorSlashInfoResponse.AllSlashInfoEntry")
	proto.RegisterType((*QueryOperatorConsKeyRequest)(nil), "exocore.operator.v1.QueryOperatorConsKeyRequest")
	proto.RegisterType((*QueryOperatorConsKeyResponse)(nil), "exocore.operator.v1.QueryOperatorConsKeyResponse")
	proto.RegisterType((*QueryOperatorConsAddressRequest)(nil), "exocore.operator.v1.QueryOperatorConsAddressRequest")
	proto.RegisterType((*QueryOperatorConsAddressResponse)(nil), "exocore.operator.v1.QueryOperatorConsAddressResponse")
	proto.RegisterType((*QueryAllOperatorConsKeysByChainIDRequest)(nil), "exocore.operator.v1.QueryAllOperatorConsKeysByChainIDRequest")
	proto.RegisterType((*QueryAllOperatorConsKeysByChainIDResponse)(nil), "exocore.operator.v1.QueryAllOperatorConsKeysByChainIDResponse")
	proto.RegisterType((*OperatorConsKeyPair)(nil), "exocore.operator.v1.OperatorConsKeyPair")
	proto.RegisterType((*QueryAllOperatorConsAddrsByChainIDRequest)(nil), "exocore.operator.v1.QueryAllOperatorConsAddrsByChainIDRequest")
	proto.RegisterType((*QueryAllOperatorConsAddrsByChainIDResponse)(nil), "exocore.operator.v1.QueryAllOperatorConsAddrsByChainIDResponse")
	proto.RegisterType((*OperatorConsAddrPair)(nil), "exocore.operator.v1.OperatorConsAddrPair")
}

func init() { proto.RegisterFile("exocore/operator/v1/query.proto", fileDescriptor_f91e795a3cecbdbf) }

var fileDescriptor_f91e795a3cecbdbf = []byte{
	// 1200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xef, 0xa4, 0x14, 0x6d, 0x5e, 0xba, 0x4b, 0x3b, 0x2d, 0xd0, 0xcd, 0x76, 0xd3, 0xae, 0x05,
	0xdb, 0x6e, 0x69, 0x6d, 0x9a, 0x76, 0x11, 0xda, 0x3f, 0xa0, 0xa6, 0x7f, 0x56, 0xbb, 0x45, 0x6c,
	0x71, 0x44, 0x25, 0x38, 0x10, 0x39, 0xce, 0x6c, 0x6a, 0xd5, 0xf5, 0xa4, 0x1e, 0x27, 0x34, 0x5a,
	0x15, 0x21, 0x4e, 0x70, 0x43, 0xec, 0x11, 0xc1, 0x81, 0xcf, 0x80, 0xe0, 0x2b, 0xec, 0x81, 0x43,
	0x81, 0x0b, 0xa7, 0x82, 0x5a, 0x3e, 0x03, 0x67, 0xe4, 0xf1, 0x38, 0xb1, 0x1d, 0x27, 0x71, 0x4b,
	0xc5, 0x2d, 0xb6, 0xe7, 0xbd, 0xf7, 0xfb, 0xfd, 0xde, 0x9b, 0xf7, 0x9e, 0x02, 0x53, 0xe4, 0x80,
	0xea, 0xd4, 0x26, 0x0a, 0xad, 0x11, 0x5b, 0x73, 0xa8, 0xad, 0x34, 0x16, 0x95, 0xfd, 0x3a, 0xb1,
	0x9b, 0x72, 0xcd, 0xa6, 0x0e, 0xc5, 0x63, 0xe2, 0x80, 0xec, 0x1f, 0x90, 0x1b, 0x8b, 0xd9, 0x39,
	0x9d, 0xb2, 0x3d, 0xca, 0x94, 0xb2, 0xc6, 0x88, 0x77, 0x5a, 0x69, 0x2c, 0x96, 0x89, 0xa3, 0x2d,
	0x2a, 0x35, 0xad, 0x6a, 0x58, 0x9a, 0x63, 0x50, 0xcb, 0x73, 0x90, 0xbd, 0xea, 0x9d, 0x2d, 0xf1,
	0x27, 0xc5, 0x7b, 0x10, 0x9f, 0x26, 0xe3, 0x82, 0x3b, 0x07, 0xe2, 0xeb, 0x78, 0x95, 0x56, 0xa9,
	0x67, 0xe5, 0xfe, 0xf2, 0x6d, 0xaa, 0x94, 0x56, 0x4d, 0xa2, 0x68, 0x35, 0x43, 0xd1, 0x2c, 0x8b,
	0x3a, 0x3c, 0x56, 0xcb, 0xa3, 0x43, 0xac, 0x0a, 0xb1, 0xf7, 0x0c, 0xcb, 0x51, 0x74, 0xbb, 0x59,
	0x73, 0xa8, 0xb2, 0x4b, 0x9a, 0xe2, 0xab, 0x54, 0x04, 0xfc, 0x80, 0x38, 0x8f, 0x45, 0xb0, 0x87,
	0xd6, 0x13, 0xaa, 0x92, 0x7d, 0x7c, 0x1f, 0x2e, 0xfb, 0xf1, 0x4b, 0x5a, 0xa5, 0x62, 0x4f, 0xa0,
	0x69, 0x34, 0x9b, 0x2e, 0x4c, 0xfc, 0xf6, 0xe3, 0xc2, 0xb8, 0x80, 0xbb, 0x52, 0xa9, 0xd8, 0x84,
	0xb1, 0xa2, 0x63, 0x1b, 0x56, 0x55, 0x1d, 0xf6, 0x8f, 0xbb, 0xaf, 0xa5, 0x32, 0x4c, 0x7c, 0xe0,
	0x2a, 0xb0, 0x62, 0x9a, 0xbe, 0x67, 0xa6, 0x92, 0xfd, 0x3a, 0x61, 0x0e, 0xde, 0x00, 0x68, 0xeb,
	0xc1, 0xfd, 0x66, 0xf2, 0x37, 0x65, 0xe1, 0xd4, 0x15, 0x4f, 0xf6, 0xa4, 0x16, 0xe2, 0xc9, 0x5b,
	0x5a, 0x95, 0x08, 0x5b, 0x35, 0x60, 0x29, 0x7d, 0x83, 0xe0, 0x6a, 0x4c, 0x10, 0x56, 0xa3, 0x16,
	0x23, 0x78, 0x1e, 0x70, 0x9b, 0x80, 0xae, 0x73, 0x12, 0x6c, 0x02, 0x4d, 0x0f, 0xce, 0xa6, 0xd5,
	0x91, 0x16, 0x56, 0x5d, 0x77, 0xe1, 0x32, 0xfc, 0x20, 0x84, 0x29, 0xc5, 0x31, 0xcd, 0xf4, 0xc5,
	0xe4, 0x85, 0x0a, 0x81, 0x3a, 0x84, 0x8c, 0xd0, 0xc5, 0x55, 0xf2, 0x3f, 0xca, 0x88, 0x15, 0xc8,
	0x68, 0x0d, 0xc6, 0x2d, 0x09, 0x63, 0x1c, 0x57, 0xba, 0x70, 0xe5, 0xe4, 0x78, 0x0a, 0x56, 0xb6,
	0x8b, 0xc2, 0x50, 0x05, 0xad, 0xc1, 0xc4, 0x6f, 0x49, 0x87, 0x49, 0x2e, 0x89, 0xaf, 0xc7, 0x87,
	0xc5, 0xb5, 0x6d, 0xcd, 0xac, 0xfb, 0xfa, 0xe1, 0x55, 0x18, 0x16, 0xce, 0x4a, 0x86, 0xf5, 0x84,
	0x0a, 0xf5, 0xa7, 0xe5, 0x98, 0x7a, 0x96, 0x03, 0x3c, 0xd4, 0x8c, 0xd6, 0x7e, 0x90, 0x1e, 0xc1,
	0xab, 0x9e, 0xee, 0xdb, 0xc5, 0xa8, 0xff, 0x08, 0x60, 0xd4, 0x17, 0x70, 0x05, 0xae, 0x87, 0x00,
	0x17, 0x4d, 0x8d, 0xed, 0x88, 0x22, 0xbc, 0x38, 0xc4, 0xff, 0x20, 0xc8, 0x75, 0x0b, 0x23, 0xea,
	0x65, 0x17, 0xae, 0x68, 0xa6, 0x59, 0x62, 0xee, 0x07, 0x3f, 0xd2, 0xe0, 0x6c, 0x26, 0xbf, 0x1e,
	0x1b, 0xa9, 0xb7, 0x33, 0x79, 0xc5, 0x34, 0x5b, 0x2f, 0xd7, 0x2d, 0xc7, 0x6e, 0xaa, 0xc3, 0x5a,
	0xe0, 0x55, 0xb6, 0x0a, 0xa3, 0x1d, 0x47, 0xf0, 0x08, 0x0c, 0xee, 0x92, 0xa6, 0xa7, 0x99, 0xea,
	0xfe, 0xc4, 0xf7, 0x60, 0xa8, 0xe1, 0xaa, 0x2b, 0x0a, 0xf2, 0x66, 0x2c, 0x94, 0x4e, 0x14, 0x9e,
	0xd1, 0x9d, 0xd4, 0xdb, 0x48, 0x2a, 0xc1, 0xb5, 0x10, 0xd4, 0x55, 0x6a, 0xb1, 0x4d, 0xd2, 0xf4,
	0xc5, 0x9d, 0x83, 0xd1, 0x8e, 0x4b, 0x22, 0x00, 0xbc, 0x14, 0xb9, 0x23, 0x78, 0x1c, 0x86, 0xf4,
	0x1d, 0xcd, 0xf0, 0x6e, 0x47, 0x5a, 0xf5, 0x1e, 0xa4, 0xcf, 0x51, 0xa4, 0xe2, 0x5a, 0x11, 0x84,
	0xae, 0x2b, 0x00, 0xb5, 0x7a, 0xd9, 0x34, 0xf4, 0x92, 0x4f, 0x2e, 0x93, 0x9f, 0x94, 0xdb, 0x1d,
	0x49, 0xf6, 0x3a, 0x92, 0xbc, 0xc5, 0x0f, 0x6d, 0x92, 0x66, 0xe1, 0x85, 0xe7, 0xc7, 0x53, 0x03,
	0x6a, 0xba, 0xe6, 0xbf, 0xc0, 0xd7, 0x01, 0x68, 0xcd, 0x31, 0xac, 0x6a, 0x89, 0xd6, 0x1d, 0x1e,
	0xfe, 0x92, 0x9a, 0xf6, 0xde, 0x3c, 0xae, 0x3b, 0x92, 0x0e, 0x53, 0x1d, 0x08, 0xfc, 0x52, 0xbb,
	0x30, 0x9e, 0x9f, 0xc0, 0x74, 0xf7, 0x20, 0x82, 0xea, 0x35, 0x48, 0xeb, 0xd4, 0x62, 0x41, 0xef,
	0x97, 0x74, 0x71, 0xae, 0x1f, 0x89, 0x2f, 0x11, 0xcc, 0x46, 0x9b, 0x99, 0x90, 0x92, 0x15, 0x9a,
	0xab, 0x2e, 0x86, 0x87, 0x6b, 0x3e, 0x9d, 0x16, 0x44, 0x14, 0x80, 0x18, 0xe9, 0xab, 0xa9, 0x73,
	0xf7, 0xd5, 0x5f, 0x10, 0xdc, 0x4a, 0x00, 0x45, 0x90, 0xde, 0x0e, 0xf4, 0x59, 0xce, 0xde, 0x1d,
	0x2d, 0xe2, 0xee, 0xcc, 0xf6, 0x2c, 0x58, 0xe1, 0x73, 0x4b, 0x33, 0xec, 0x76, 0x47, 0xf6, 0x03,
	0x5d, 0x5c, 0x47, 0xfe, 0x0e, 0xc1, 0x58, 0x4c, 0xc8, 0x33, 0xd5, 0xc4, 0xdd, 0x50, 0x11, 0xa7,
	0xfa, 0x17, 0x71, 0xf7, 0xf2, 0x1d, 0x8c, 0x66, 0xfe, 0xab, 0x2e, 0x72, 0xf3, 0xc1, 0xf4, 0x3f,
	0xa7, 0xfe, 0x08, 0xc1, 0x5c, 0x12, 0x2c, 0x22, 0xf7, 0x1f, 0xc1, 0x58, 0x38, 0xf7, 0xed, 0x21,
	0x9b, 0xc9, 0xdf, 0xea, 0x9b, 0x7c, 0xd7, 0x2b, 0xcf, 0xfe, 0x28, 0x8d, 0xc6, 0xba, 0xb8, 0xf4,
	0x7f, 0x06, 0xe3, 0x71, 0x31, 0xcf, 0x94, 0xfe, 0xd0, 0xc5, 0x4e, 0xf5, 0xbc, 0xd8, 0xd1, 0xf4,
	0xe6, 0x7f, 0xbe, 0x0c, 0x43, 0x5c, 0x52, 0xfc, 0x2d, 0x82, 0xd1, 0x50, 0x0f, 0xe1, 0x1b, 0xc2,
	0x4c, 0xac, 0x4c, 0x9d, 0x1b, 0x59, 0xf6, 0x46, 0x4f, 0x3d, 0xf9, 0x98, 0xbb, 0xf3, 0xc5, 0xef,
	0x7f, 0x3f, 0x4b, 0x2d, 0xe3, 0xbc, 0x12, 0xb7, 0x43, 0xb6, 0xe8, 0xba, 0xd3, 0x4d, 0x79, 0x1a,
	0xda, 0x4b, 0x0e, 0xf1, 0xf7, 0x3e, 0xba, 0xe0, 0x36, 0x85, 0x17, 0xba, 0x4f, 0xbf, 0x98, 0xd5,
	0x2e, 0x2b, 0x27, 0x3d, 0xee, 0x25, 0x4a, 0x9a, 0xe3, 0x80, 0x5f, 0xc3, 0x52, 0x2c, 0x60, 0x77,
	0x1e, 0xd3, 0x16, 0x94, 0x5f, 0xa3, 0x33, 0x5c, 0x5c, 0xe6, 0x0d, 0x6a, 0x8b, 0xba, 0xc4, 0x6f,
	0xf6, 0x9f, 0xd5, 0xe1, 0x01, 0x98, 0x5d, 0x3c, 0x83, 0x85, 0xc0, 0xfc, 0x88, 0x63, 0x5e, 0xc3,
	0x85, 0xde, 0x22, 0xfb, 0xbd, 0x30, 0x28, 0xb4, 0x28, 0xb3, 0x43, 0xe5, 0x29, 0xbf, 0xb6, 0x87,
	0xf8, 0x18, 0x81, 0xd4, 0x6d, 0xac, 0x04, 0x78, 0x2d, 0x27, 0x43, 0x19, 0x1e, 0x7a, 0xd9, 0xdb,
	0x67, 0xb4, 0x12, 0xfc, 0x36, 0x39, 0xbf, 0x75, 0xbc, 0x9a, 0x80, 0x9f, 0xcb, 0xa6, 0x27, 0xc1,
	0x3f, 0x11, 0xdc, 0xe8, 0x3b, 0x4b, 0xf0, 0xfd, 0x44, 0x65, 0xd3, 0x6d, 0x1c, 0x66, 0xdf, 0x39,
	0xaf, 0xb9, 0x60, 0x7c, 0x97, 0x33, 0xbe, 0x8d, 0x97, 0xfa, 0x56, 0x61, 0x7b, 0xc2, 0xb5, 0x18,
	0xfe, 0x80, 0xe0, 0xe5, 0xd8, 0x95, 0x1b, 0x27, 0xa8, 0xad, 0xc8, 0xfa, 0x9c, 0x95, 0x62, 0x4d,
	0xd6, 0x88, 0xce, 0x4f, 0x6d, 0x18, 0xc4, 0xac, 0x48, 0x79, 0x8e, 0x76, 0x1e, 0xcf, 0xc5, 0xa2,
	0x8d, 0x87, 0xf2, 0x0c, 0xc1, 0x48, 0x74, 0x65, 0xc7, 0xf3, 0x3d, 0x64, 0xeb, 0xd8, 0xec, 0x13,
	0x41, 0x5b, 0xe0, 0xd0, 0x66, 0xf0, 0xeb, 0xdd, 0xa1, 0x05, 0x01, 0xfc, 0x84, 0xe0, 0x95, 0xf8,
	0x45, 0x1a, 0xe7, 0xcf, 0xb4, 0x75, 0x7b, 0x08, 0x97, 0xce, 0xb1, 0xa9, 0x4b, 0x4b, 0x1c, 0xf2,
	0x02, 0x7e, 0xa3, 0xbf, 0x9a, 0x6d, 0x74, 0xa7, 0xfe, 0xb5, 0xed, 0x39, 0x26, 0x71, 0xf2, 0xba,
	0x8c, 0x9d, 0xf5, 0xd9, 0x77, 0xcf, 0x6d, 0x2f, 0xc8, 0xdd, 0xe3, 0xe4, 0xde, 0xc2, 0xcb, 0x09,
	0x0b, 0x9b, 0x8f, 0x6f, 0xbf, 0xb2, 0x0b, 0xef, 0x3d, 0x3f, 0xc9, 0xa1, 0xa3, 0x93, 0x1c, 0xfa,
	0xeb, 0x24, 0x87, 0xbe, 0x3e, 0xcd, 0x0d, 0x1c, 0x9d, 0xe6, 0x06, 0xfe, 0x38, 0xcd, 0x0d, 0x7c,
	0x9c, 0xaf, 0x1a, 0xce, 0x4e, 0xbd, 0x2c, 0xeb, 0x74, 0x4f, 0x59, 0xf7, 0x3c, 0xbf, 0x4f, 0x9c,
	0x4f, 0xa9, 0xbd, 0xdb, 0x0a, 0x74, 0xd0, 0x0e, 0xe5, 0x34, 0x6b, 0x84, 0x95, 0x5f, 0xe4, 0xff,
	0x36, 0x2c, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x45, 0xa4, 0x16, 0x4e, 0x5c, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryOperatorInfo queries the operator information.
	QueryOperatorInfo(ctx context.Context, in *GetOperatorInfoReq, opts ...grpc.CallOption) (*OperatorInfo, error)
	// QueryAllOperators queries all operators.
	QueryAllOperators(ctx context.Context, in *QueryAllOperatorsRequest, opts ...grpc.CallOption) (*QueryAllOperatorsResponse, error)
	// QueryOperatorConsKeyForChainID queries the consensus public key for the operator
	QueryOperatorConsKeyForChainID(ctx context.Context, in *QueryOperatorConsKeyRequest, opts ...grpc.CallOption) (*QueryOperatorConsKeyResponse, error)
	// QueryOperatorConsAddressForChainID queries the consensus address for the operator.
	QueryOperatorConsAddressForChainID(ctx context.Context, in *QueryOperatorConsAddressRequest, opts ...grpc.CallOption) (*QueryOperatorConsAddressResponse, error)
	// QueryAllOperatorConsKeysByChainID queries all operators and their consensus public keys
	// for a specific chain ID
	QueryAllOperatorConsKeysByChainID(ctx context.Context, in *QueryAllOperatorConsKeysByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsKeysByChainIDResponse, error)
	// QueryOperatorUSDValue queries the opted-in USD value for the operator
	QueryOperatorUSDValue(ctx context.Context, in *QueryOperatorUSDValueRequest, opts ...grpc.CallOption) (*DecValueField, error)
	// QueryAVSUSDValue queries the USD value for the AVS
	QueryAVSUSDValue(ctx context.Context, in *QueryAVSUSDValueRequest, opts ...grpc.CallOption) (*DecValueField, error)
	// QueryOperatorSlashInfo queries the slash information for the specified operator and AVS
	QueryOperatorSlashInfo(ctx context.Context, in *QueryOperatorSlashInfoRequest, opts ...grpc.CallOption) (*QueryOperatorSlashInfoResponse, error)
	// QueryAllOperatorConsAddrsByChainID queries all operators and their consensus addresses
	// for a specific chain ID
	QueryAllOperatorConsAddrsByChainID(ctx context.Context, in *QueryAllOperatorConsAddrsByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsAddrsByChainIDResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryOperatorInfo(ctx context.Context, in *GetOperatorInfoReq, opts ...grpc.CallOption) (*OperatorInfo, error) {
	out := new(OperatorInfo)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllOperators(ctx context.Context, in *QueryAllOperatorsRequest, opts ...grpc.CallOption) (*QueryAllOperatorsResponse, error) {
	out := new(QueryAllOperatorsResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorConsKeyForChainID(ctx context.Context, in *QueryOperatorConsKeyRequest, opts ...grpc.CallOption) (*QueryOperatorConsKeyResponse, error) {
	out := new(QueryOperatorConsKeyResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorConsKeyForChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorConsAddressForChainID(ctx context.Context, in *QueryOperatorConsAddressRequest, opts ...grpc.CallOption) (*QueryOperatorConsAddressResponse, error) {
	out := new(QueryOperatorConsAddressResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorConsAddressForChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllOperatorConsKeysByChainID(ctx context.Context, in *QueryAllOperatorConsKeysByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsKeysByChainIDResponse, error) {
	out := new(QueryAllOperatorConsKeysByChainIDResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllOperatorConsKeysByChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorUSDValue(ctx context.Context, in *QueryOperatorUSDValueRequest, opts ...grpc.CallOption) (*DecValueField, error) {
	out := new(DecValueField)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorUSDValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAVSUSDValue(ctx context.Context, in *QueryAVSUSDValueRequest, opts ...grpc.CallOption) (*DecValueField, error) {
	out := new(DecValueField)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAVSUSDValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorSlashInfo(ctx context.Context, in *QueryOperatorSlashInfoRequest, opts ...grpc.CallOption) (*QueryOperatorSlashInfoResponse, error) {
	out := new(QueryOperatorSlashInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorSlashInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllOperatorConsAddrsByChainID(ctx context.Context, in *QueryAllOperatorConsAddrsByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsAddrsByChainIDResponse, error) {
	out := new(QueryAllOperatorConsAddrsByChainIDResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllOperatorConsAddrsByChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryOperatorInfo queries the operator information.
	QueryOperatorInfo(context.Context, *GetOperatorInfoReq) (*OperatorInfo, error)
	// QueryAllOperators queries all operators.
	QueryAllOperators(context.Context, *QueryAllOperatorsRequest) (*QueryAllOperatorsResponse, error)
	// QueryOperatorConsKeyForChainID queries the consensus public key for the operator
	QueryOperatorConsKeyForChainID(context.Context, *QueryOperatorConsKeyRequest) (*QueryOperatorConsKeyResponse, error)
	// QueryOperatorConsAddressForChainID queries the consensus address for the operator.
	QueryOperatorConsAddressForChainID(context.Context, *QueryOperatorConsAddressRequest) (*QueryOperatorConsAddressResponse, error)
	// QueryAllOperatorConsKeysByChainID queries all operators and their consensus public keys
	// for a specific chain ID
	QueryAllOperatorConsKeysByChainID(context.Context, *QueryAllOperatorConsKeysByChainIDRequest) (*QueryAllOperatorConsKeysByChainIDResponse, error)
	// QueryOperatorUSDValue queries the opted-in USD value for the operator
	QueryOperatorUSDValue(context.Context, *QueryOperatorUSDValueRequest) (*DecValueField, error)
	// QueryAVSUSDValue queries the USD value for the AVS
	QueryAVSUSDValue(context.Context, *QueryAVSUSDValueRequest) (*DecValueField, error)
	// QueryOperatorSlashInfo queries the slash information for the specified operator and AVS
	QueryOperatorSlashInfo(context.Context, *QueryOperatorSlashInfoRequest) (*QueryOperatorSlashInfoResponse, error)
	// QueryAllOperatorConsAddrsByChainID queries all operators and their consensus addresses
	// for a specific chain ID
	QueryAllOperatorConsAddrsByChainID(context.Context, *QueryAllOperatorConsAddrsByChainIDRequest) (*QueryAllOperatorConsAddrsByChainIDResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryOperatorInfo(ctx context.Context, req *GetOperatorInfoReq) (*OperatorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorInfo not implemented")
}
func (*UnimplementedQueryServer) QueryAllOperators(ctx context.Context, req *QueryAllOperatorsRequest) (*QueryAllOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllOperators not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorConsKeyForChainID(ctx context.Context, req *QueryOperatorConsKeyRequest) (*QueryOperatorConsKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorConsKeyForChainID not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorConsAddressForChainID(ctx context.Context, req *QueryOperatorConsAddressRequest) (*QueryOperatorConsAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorConsAddressForChainID not implemented")
}
func (*UnimplementedQueryServer) QueryAllOperatorConsKeysByChainID(ctx context.Context, req *QueryAllOperatorConsKeysByChainIDRequest) (*QueryAllOperatorConsKeysByChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllOperatorConsKeysByChainID not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorUSDValue(ctx context.Context, req *QueryOperatorUSDValueRequest) (*DecValueField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorUSDValue not implemented")
}
func (*UnimplementedQueryServer) QueryAVSUSDValue(ctx context.Context, req *QueryAVSUSDValueRequest) (*DecValueField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAVSUSDValue not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorSlashInfo(ctx context.Context, req *QueryOperatorSlashInfoRequest) (*QueryOperatorSlashInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorSlashInfo not implemented")
}
func (*UnimplementedQueryServer) QueryAllOperatorConsAddrsByChainID(ctx context.Context, req *QueryAllOperatorConsAddrsByChainIDRequest) (*QueryAllOperatorConsAddrsByChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllOperatorConsAddrsByChainID not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryOperatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorInfo(ctx, req.(*GetOperatorInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllOperators(ctx, req.(*QueryAllOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorConsKeyForChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorConsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorConsKeyForChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorConsKeyForChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorConsKeyForChainID(ctx, req.(*QueryOperatorConsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorConsAddressForChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorConsAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorConsAddressForChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorConsAddressForChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorConsAddressForChainID(ctx, req.(*QueryOperatorConsAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllOperatorConsKeysByChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorConsKeysByChainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllOperatorConsKeysByChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllOperatorConsKeysByChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllOperatorConsKeysByChainID(ctx, req.(*QueryAllOperatorConsKeysByChainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorUSDValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorUSDValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorUSDValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorUSDValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorUSDValue(ctx, req.(*QueryOperatorUSDValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAVSUSDValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAVSUSDValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAVSUSDValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAVSUSDValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAVSUSDValue(ctx, req.(*QueryAVSUSDValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorSlashInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorSlashInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorSlashInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorSlashInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorSlashInfo(ctx, req.(*QueryOperatorSlashInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllOperatorConsAddrsByChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorConsAddrsByChainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllOperatorConsAddrsByChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllOperatorConsAddrsByChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllOperatorConsAddrsByChainID(ctx, req.(*QueryAllOperatorConsAddrsByChainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.operator.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOperatorInfo",
			Handler:    _Query_QueryOperatorInfo_Handler,
		},
		{
			MethodName: "QueryAllOperators",
			Handler:    _Query_QueryAllOperators_Handler,
		},
		{
			MethodName: "QueryOperatorConsKeyForChainID",
			Handler:    _Query_QueryOperatorConsKeyForChainID_Handler,
		},
		{
			MethodName: "QueryOperatorConsAddressForChainID",
			Handler:    _Query_QueryOperatorConsAddressForChainID_Handler,
		},
		{
			MethodName: "QueryAllOperatorConsKeysByChainID",
			Handler:    _Query_QueryAllOperatorConsKeysByChainID_Handler,
		},
		{
			MethodName: "QueryOperatorUSDValue",
			Handler:    _Query_QueryOperatorUSDValue_Handler,
		},
		{
			MethodName: "QueryAVSUSDValue",
			Handler:    _Query_QueryAVSUSDValue_Handler,
		},
		{
			MethodName: "QueryOperatorSlashInfo",
			Handler:    _Query_QueryOperatorSlashInfo_Handler,
		},
		{
			MethodName: "QueryAllOperatorConsAddrsByChainID",
			Handler:    _Query_QueryAllOperatorConsAddrsByChainID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/operator/v1/query.proto",
}

func (m *GetOperatorInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperatorInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOperatorInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddrs) > 0 {
		for iNdEx := len(m.OperatorAccAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OperatorAccAddrs[iNdEx])
			copy(dAtA[i:], m.OperatorAccAddrs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AVSAddress) > 0 {
		i -= len(m.AVSAddress)
		copy(dAtA[i:], m.AVSAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AVSAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorUSDValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorUSDValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorUSDValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressInfo != nil {
		{
			size, err := m.AddressInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAVSUSDValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAVSUSDValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAVSUSDValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AVSAddress) > 0 {
		i -= len(m.AVSAddress)
		copy(dAtA[i:], m.AVSAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AVSAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorSlashInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorSlashInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorSlashInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressInfo != nil {
		{
			size, err := m.AddressInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorSlashInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorSlashInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorSlashInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllSlashInfo) > 0 {
		for k := range m.AllSlashInfo {
			v := m.AllSlashInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConsAddr) > 0 {
		i -= len(m.ConsAddr)
		copy(dAtA[i:], m.ConsAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorConsKeys) > 0 {
		for iNdEx := len(m.OperatorConsKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorConsKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorConsKeyPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorConsKeyPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorConsKeyPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PublicKey != nil {
		{
			size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorConsAddrs) > 0 {
		for iNdEx := len(m.OperatorConsAddrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorConsAddrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorConsAddrPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorConsAddrPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorConsAddrPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConsAddr) > 0 {
		i -= len(m.ConsAddr)
		copy(dAtA[i:], m.ConsAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetOperatorInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorAccAddrs) > 0 {
		for _, s := range m.OperatorAccAddrs {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AddressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AVSAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorUSDValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressInfo != nil {
		l = m.AddressInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAVSUSDValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AVSAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorSlashInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressInfo != nil {
		l = m.AddressInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorSlashInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllSlashInfo) > 0 {
		for k, v := range m.AllSlashInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryOperatorConsKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorConsKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PublicKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.OptingOut {
		n += 2
	}
	return n
}

func (m *QueryOperatorConsAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorConsAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OptingOut {
		n += 2
	}
	return n
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorConsKeys) > 0 {
		for _, e := range m.OperatorConsKeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OperatorConsKeyPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OptingOut {
		n += 2
	}
	return n
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorConsAddrs) > 0 {
		for _, e := range m.OperatorConsAddrs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OperatorConsAddrPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConsAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OptingOut {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetOperatorInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperatorInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperatorInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddrs = append(m.OperatorAccAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVSAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AVSAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorUSDValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorUSDValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorUSDValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressInfo == nil {
				m.AddressInfo = &AddressInfo{}
			}
			if err := m.AddressInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAVSUSDValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAVSUSDValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAVSUSDValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVSAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AVSAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorSlashInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressInfo == nil {
				m.AddressInfo = &AddressInfo{}
			}
			if err := m.AddressInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorSlashInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSlashInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllSlashInfo == nil {
				m.AllSlashInfo = make(map[string]*OperatorSlashInfo)
			}
			var mapkey string
			var mapvalue *OperatorSlashInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OperatorSlashInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllSlashInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorConsKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorConsKeys = append(m.OperatorConsKeys, &OperatorConsKeyPair{})
			if err := m.OperatorConsKeys[len(m.OperatorConsKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorConsKeyPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorConsKeyPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorConsKeyPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKey == nil {
				m.PublicKey = &crypto.PublicKey{}
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorConsAddrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorConsAddrs = append(m.OperatorConsAddrs, &OperatorConsAddrPair{})
			if err := m.OperatorConsAddrs[len(m.OperatorConsAddrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorConsAddrPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorConsAddrPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorConsAddrPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
