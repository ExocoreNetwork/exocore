// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/dogfood/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// EpochsUntilUnbonded is the number of epochs after which an unbonding
	// is released. Note that it starts from the beginning of the next epoch
	// in which the unbonding request was received. At that point, the vote
	// power is reduced by the amount of the unbonding operation.
	EpochsUntilUnbonded uint32 `protobuf:"varint,1,opt,name=epochs_until_unbonded,json=epochsUntilUnbonded,proto3" json:"epochs_until_unbonded,omitempty"`
	// EpochIdentifier is the identifier of the epoch (week, hour, day).
	EpochIdentifier string `protobuf:"bytes,2,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	// MaxValidators is the maximum number of validators.
	MaxValidators uint32 `protobuf:"varint,3,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty"`
	// HistoricalEntries is the number of historical entries to persist.
	HistoricalEntries uint32 `protobuf:"varint,4,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty"`
	// AssetIDs is the ids of the assets which will be accepted by the module.
	// It must be within the list of assets supported by the restaking module.
	// The typical format of these IDs is
	// lower(assetAddress) + _ + hex(clientChainLzID)
	AssetIDs []string `protobuf:"bytes,5,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
	// MinSelfDelegation is the minimum self delegation in USD required to be a validator.
	MinSelfDelegation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_self_delegation"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8747fb70c97d97f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEpochsUntilUnbonded() uint32 {
	if m != nil {
		return m.EpochsUntilUnbonded
	}
	return 0
}

func (m *Params) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *Params) GetMaxValidators() uint32 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *Params) GetHistoricalEntries() uint32 {
	if m != nil {
		return m.HistoricalEntries
	}
	return 0
}

func (m *Params) GetAssetIDs() []string {
	if m != nil {
		return m.AssetIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "exocore.dogfood.v1.Params")
}

func init() { proto.RegisterFile("exocore/dogfood/v1/params.proto", fileDescriptor_e8747fb70c97d97f) }

var fileDescriptor_e8747fb70c97d97f = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x6a, 0xd4, 0x40,
	0x1c, 0xc6, 0x93, 0xb6, 0x2e, 0xdd, 0xc1, 0xaa, 0x9d, 0x2a, 0xc4, 0x1e, 0x92, 0x45, 0x50, 0xb6,
	0x87, 0x4d, 0x58, 0xbd, 0x89, 0x17, 0x97, 0xf6, 0x10, 0x04, 0x91, 0x48, 0x3d, 0x78, 0x19, 0x66,
	0x33, 0x93, 0xec, 0xd0, 0x64, 0xfe, 0x61, 0x66, 0x76, 0x8d, 0x6f, 0xe1, 0xd1, 0xa3, 0x0f, 0xe1,
	0x43, 0xf4, 0x58, 0x3c, 0x89, 0xc8, 0x22, 0xd9, 0x17, 0x91, 0x4c, 0x62, 0xec, 0x69, 0x66, 0x7e,
	0xdf, 0xc7, 0xf7, 0x1f, 0xfe, 0x1f, 0x0a, 0x78, 0x0d, 0x29, 0x28, 0x1e, 0x31, 0xc8, 0x33, 0x00,
	0x16, 0x6d, 0xe6, 0x51, 0x45, 0x15, 0x2d, 0x75, 0x58, 0x29, 0x30, 0x80, 0x71, 0x6f, 0x08, 0x7b,
	0x43, 0xb8, 0x99, 0x9f, 0x3e, 0x4e, 0x41, 0x97, 0xa0, 0x89, 0x75, 0x44, 0xdd, 0xa3, 0xb3, 0x9f,
	0x3e, 0xcc, 0x21, 0x87, 0x8e, 0xb7, 0xb7, 0x8e, 0x3e, 0xf9, 0xbd, 0x87, 0x46, 0xef, 0x6c, 0x2a,
	0x7e, 0x8e, 0x1e, 0xf1, 0x0a, 0xd2, 0x95, 0x26, 0x6b, 0x69, 0x44, 0x41, 0xd6, 0x72, 0x09, 0x92,
	0x71, 0xe6, 0xb9, 0x13, 0x77, 0x7a, 0x94, 0x9c, 0x74, 0xe2, 0x65, 0xab, 0x5d, 0xf6, 0x12, 0x3e,
	0x43, 0x0f, 0x2c, 0x26, 0x82, 0x71, 0x69, 0x44, 0x26, 0xb8, 0xf2, 0xf6, 0x26, 0xee, 0x74, 0x9c,
	0xdc, 0xb7, 0x3c, 0x1e, 0x30, 0x7e, 0x8a, 0xee, 0x95, 0xb4, 0x26, 0x1b, 0x5a, 0x08, 0x46, 0x0d,
	0x28, 0xed, 0xed, 0xdb, 0xdc, 0xa3, 0x92, 0xd6, 0x1f, 0x06, 0x88, 0x67, 0x08, 0xaf, 0x84, 0x36,
	0xa0, 0x44, 0x4a, 0x0b, 0xc2, 0xa5, 0x51, 0x82, 0x6b, 0xef, 0xc0, 0x5a, 0x8f, 0xff, 0x2b, 0x17,
	0x9d, 0x80, 0xcf, 0xd0, 0x98, 0x6a, 0xcd, 0x0d, 0x11, 0x4c, 0x7b, 0x77, 0x26, 0xfb, 0xd3, 0xf1,
	0xe2, 0x6e, 0xb3, 0x0d, 0x0e, 0x5f, 0xb7, 0x30, 0x3e, 0xd7, 0xc9, 0xa1, 0x95, 0x63, 0xa6, 0x71,
	0x81, 0x4e, 0x4a, 0x21, 0x89, 0xe6, 0x45, 0x46, 0x18, 0x2f, 0x78, 0x4e, 0x8d, 0x00, 0xe9, 0x8d,
	0xda, 0xef, 0x2e, 0x5e, 0x5d, 0x6f, 0x03, 0xe7, 0xd7, 0x36, 0x78, 0x96, 0x0b, 0xb3, 0x5a, 0x2f,
	0xc3, 0x14, 0xca, 0x7e, 0x7d, 0xfd, 0x31, 0xd3, 0xec, 0x2a, 0x32, 0x9f, 0x2b, 0xae, 0xc3, 0x58,
	0x9a, 0x1f, 0xdf, 0x67, 0xa8, 0xdf, 0x6e, 0x2c, 0x4d, 0x72, 0x5c, 0x0a, 0xf9, 0x9e, 0x17, 0xd9,
	0xf9, 0x10, 0xfb, 0xf2, 0xe0, 0xeb, 0xb7, 0xc0, 0x59, 0xbc, 0xb9, 0x6e, 0x7c, 0xf7, 0xa6, 0xf1,
	0xdd, 0x3f, 0x8d, 0xef, 0x7e, 0xd9, 0xf9, 0xce, 0xcd, 0xce, 0x77, 0x7e, 0xee, 0x7c, 0xe7, 0xe3,
	0xfc, 0xd6, 0xa0, 0x8b, 0xae, 0xc8, 0xb7, 0xdc, 0x7c, 0x02, 0x75, 0x15, 0xfd, 0x2b, 0xbe, 0x1e,
	0xaa, 0xb7, 0x73, 0x97, 0x23, 0x5b, 0xd9, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x66, 0xdc,
	0x76, 0x8e, 0x1a, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.AssetIDs) > 0 {
		for iNdEx := len(m.AssetIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssetIDs[iNdEx])
			copy(dAtA[i:], m.AssetIDs[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AssetIDs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxValidators != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochsUntilUnbonded != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EpochsUntilUnbonded))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochsUntilUnbonded != 0 {
		n += 1 + sovParams(uint64(m.EpochsUntilUnbonded))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MaxValidators != 0 {
		n += 1 + sovParams(uint64(m.MaxValidators))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovParams(uint64(m.HistoricalEntries))
	}
	if len(m.AssetIDs) > 0 {
		for _, s := range m.AssetIDs {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochsUntilUnbonded", wireType)
			}
			m.EpochsUntilUnbonded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochsUntilUnbonded |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetIDs = append(m.AssetIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
