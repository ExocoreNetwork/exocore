// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/delegation/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the delegation module's state. It needs to encompass
// all of the state that is required to start the chain from the genesis
// or in the event of a restart. At this point, it is only built with
// the former in mind.
type GenesisState struct {
	// there are no parameters in this module.
	// delegations_by_staker_asset_operator is a list of all delegations by staker,
	// asset and operator
	DelegationsByStakerAssetOperator []DelegationByStakerAssetOperator `protobuf:"bytes,1,rep,name=delegations_by_staker_asset_operator,json=delegationsByStakerAssetOperator,proto3" json:"delegations_by_staker_asset_operator"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetDelegationsByStakerAssetOperator() []DelegationByStakerAssetOperator {
	if m != nil {
		return m.DelegationsByStakerAssetOperator
	}
	return nil
}

// DelegationByStakerAssetOperator stores the staker_id and all delegations
// made by that staker, indexed by asset_id and then the operator address.
type DelegationByStakerAssetOperator struct {
	// staker_id is the staker's address + hex encoded l0 chain id
	StakerID string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// delegations_by_asset_operator is a list of all delegations made by the staker
	// for a specific asset and operator
	DelegationsByAssetOperator []DelegationByAssetOperator `protobuf:"bytes,2,rep,name=delegations_by_asset_operator,json=delegationsByAssetOperator,proto3" json:"delegations_by_asset_operator"`
}

func (m *DelegationByStakerAssetOperator) Reset()         { *m = DelegationByStakerAssetOperator{} }
func (m *DelegationByStakerAssetOperator) String() string { return proto.CompactTextString(m) }
func (*DelegationByStakerAssetOperator) ProtoMessage()    {}
func (*DelegationByStakerAssetOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{1}
}
func (m *DelegationByStakerAssetOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationByStakerAssetOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationByStakerAssetOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationByStakerAssetOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationByStakerAssetOperator.Merge(m, src)
}
func (m *DelegationByStakerAssetOperator) XXX_Size() int {
	return m.Size()
}
func (m *DelegationByStakerAssetOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationByStakerAssetOperator.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationByStakerAssetOperator proto.InternalMessageInfo

func (m *DelegationByStakerAssetOperator) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *DelegationByStakerAssetOperator) GetDelegationsByAssetOperator() []DelegationByAssetOperator {
	if m != nil {
		return m.DelegationsByAssetOperator
	}
	return nil
}

// DelegationByAssetOperator stores the asset_id and all delegations
// denominated in that asset, indexed by operator address.
type DelegationByAssetOperator struct {
	// asset_id is the asset's identifier
	AssetID string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// delegations_by_operator is a list of all delegations denominated
	// in that asset, indexed by the operator address.
	DelegationsByOperator []DelegationByOperator `protobuf:"bytes,2,rep,name=delegations_by_operator,json=delegationsByOperator,proto3" json:"delegations_by_operator"`
}

func (m *DelegationByAssetOperator) Reset()         { *m = DelegationByAssetOperator{} }
func (m *DelegationByAssetOperator) String() string { return proto.CompactTextString(m) }
func (*DelegationByAssetOperator) ProtoMessage()    {}
func (*DelegationByAssetOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{2}
}
func (m *DelegationByAssetOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationByAssetOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationByAssetOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationByAssetOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationByAssetOperator.Merge(m, src)
}
func (m *DelegationByAssetOperator) XXX_Size() int {
	return m.Size()
}
func (m *DelegationByAssetOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationByAssetOperator.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationByAssetOperator proto.InternalMessageInfo

func (m *DelegationByAssetOperator) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

func (m *DelegationByAssetOperator) GetDelegationsByOperator() []DelegationByOperator {
	if m != nil {
		return m.DelegationsByOperator
	}
	return nil
}

// DelegationByOperator stores the operator address and the delegated amount.
type DelegationByOperator struct {
	// operator_address is the operator's address
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// amount is the amount of the asset delegated to the operator.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *DelegationByOperator) Reset()         { *m = DelegationByOperator{} }
func (m *DelegationByOperator) String() string { return proto.CompactTextString(m) }
func (*DelegationByOperator) ProtoMessage()    {}
func (*DelegationByOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{3}
}
func (m *DelegationByOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationByOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationByOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationByOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationByOperator.Merge(m, src)
}
func (m *DelegationByOperator) XXX_Size() int {
	return m.Size()
}
func (m *DelegationByOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationByOperator.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationByOperator proto.InternalMessageInfo

func (m *DelegationByOperator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "exocore.delegation.v1.GenesisState")
	proto.RegisterType((*DelegationByStakerAssetOperator)(nil), "exocore.delegation.v1.DelegationByStakerAssetOperator")
	proto.RegisterType((*DelegationByAssetOperator)(nil), "exocore.delegation.v1.DelegationByAssetOperator")
	proto.RegisterType((*DelegationByOperator)(nil), "exocore.delegation.v1.DelegationByOperator")
}

func init() {
	proto.RegisterFile("exocore/delegation/v1/genesis.proto", fileDescriptor_c26dd0d733927603)
}

var fileDescriptor_c26dd0d733927603 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0xee, 0xd2, 0x40,
	0x14, 0xc5, 0x3b, 0x7f, 0x0d, 0x1f, 0x03, 0x89, 0x66, 0x02, 0x11, 0x48, 0x6c, 0x09, 0x1a, 0x02,
	0x31, 0xb4, 0xa2, 0xc6, 0x95, 0x1b, 0x1a, 0x8c, 0xe9, 0x06, 0x93, 0xe2, 0xca, 0x4d, 0x53, 0xe8,
	0xa4, 0x36, 0x48, 0x87, 0x74, 0x06, 0xa4, 0xef, 0xe0, 0xc2, 0x9d, 0x2b, 0x5f, 0xc1, 0x95, 0xef,
	0x20, 0x4b, 0xe2, 0xca, 0xb8, 0x68, 0x4c, 0x79, 0x11, 0xc3, 0x4c, 0xf9, 0x6a, 0x6a, 0xfe, 0xac,
	0x60, 0xe6, 0x9e, 0x7b, 0xee, 0xf9, 0x35, 0x73, 0xe1, 0x23, 0xbc, 0x26, 0x53, 0x12, 0x60, 0xcd,
	0xc1, 0x1f, 0xb1, 0x6b, 0x33, 0x8f, 0xf8, 0xda, 0xaa, 0xaf, 0xb9, 0xd8, 0xc7, 0xd4, 0xa3, 0xea,
	0x22, 0x20, 0x8c, 0xa0, 0x6a, 0x22, 0x52, 0x4f, 0x22, 0x75, 0xd5, 0x6f, 0x54, 0x5c, 0xe2, 0x12,
	0xae, 0xd0, 0xf6, 0xff, 0x84, 0xb8, 0x51, 0x9f, 0x12, 0x3a, 0x27, 0xd4, 0x12, 0x05, 0x71, 0x10,
	0xa5, 0xd6, 0x37, 0x00, 0xcb, 0x6f, 0x84, 0xf3, 0x98, 0xd9, 0x0c, 0xa3, 0xcf, 0x00, 0x3e, 0x3e,
	0x79, 0x52, 0x6b, 0x12, 0x5a, 0x94, 0xd9, 0x33, 0x1c, 0x58, 0x36, 0xa5, 0x98, 0x59, 0x64, 0x81,
	0x03, 0x9b, 0x91, 0xa0, 0x06, 0x9a, 0x77, 0x3a, 0xa5, 0x67, 0x2f, 0xd5, 0xcc, 0x20, 0xea, 0xf0,
	0x78, 0xd2, 0xc3, 0x31, 0xef, 0x1f, 0xec, 0xdb, 0xdf, 0x26, 0xdd, 0xfa, 0xdd, 0x4d, 0xa4, 0x48,
	0x66, 0xf3, 0x6c, 0x52, 0xa6, 0xae, 0xf5, 0x13, 0x40, 0xe5, 0x16, 0x2f, 0xd4, 0x85, 0xc5, 0x24,
	0xa2, 0xe7, 0xd4, 0x40, 0x13, 0x74, 0x8a, 0x7a, 0x39, 0x8e, 0x94, 0x82, 0xd0, 0x1a, 0x43, 0xb3,
	0x20, 0xca, 0x86, 0x83, 0x42, 0xf8, 0x30, 0x05, 0x97, 0xa2, 0xba, 0xe1, 0x54, 0x4f, 0xaf, 0xa0,
	0xca, 0xe2, 0x69, 0x5c, 0xf0, 0x5c, 0x92, 0x7c, 0x07, 0xb0, 0xfe, 0xdf, 0x7e, 0xd4, 0x86, 0x05,
	0x91, 0xe4, 0x88, 0x50, 0x8a, 0x23, 0x25, 0xcf, 0x45, 0xc6, 0xd0, 0xcc, 0xf3, 0xa2, 0xe1, 0x20,
	0x0f, 0x3e, 0x48, 0x01, 0xa4, 0xa2, 0x3f, 0xb9, 0x22, 0x7a, 0x2a, 0x75, 0xf5, 0x22, 0xf5, 0x31,
	0xf0, 0x57, 0x00, 0x2b, 0x59, 0x5d, 0xa8, 0x0b, 0xef, 0x1f, 0x86, 0x5a, 0xb6, 0xe3, 0x04, 0x98,
	0x52, 0x91, 0xd9, 0xbc, 0x77, 0xb8, 0x1f, 0x88, 0x6b, 0xf4, 0x0e, 0xe6, 0xec, 0x39, 0x59, 0xfa,
	0xac, 0x76, 0xc3, 0xa1, 0x5e, 0xed, 0x07, 0xfe, 0x89, 0x94, 0xb6, 0xeb, 0xb1, 0x0f, 0xcb, 0x89,
	0x3a, 0x25, 0xf3, 0xe4, 0x3d, 0x26, 0x3f, 0x3d, 0xea, 0xcc, 0x34, 0x16, 0x2e, 0x30, 0x55, 0x0d,
	0x9f, 0xfd, 0xfa, 0xd1, 0x83, 0xc9, 0x73, 0x35, 0x7c, 0x66, 0x26, 0x5e, 0xfa, 0x68, 0x13, 0xcb,
	0x60, 0x1b, 0xcb, 0xe0, 0x6f, 0x2c, 0x83, 0x2f, 0x3b, 0x59, 0xda, 0xee, 0x64, 0xe9, 0xf7, 0x4e,
	0x96, 0xde, 0xbf, 0x38, 0xf3, 0x7d, 0x2d, 0xbe, 0xc3, 0x08, 0xb3, 0x4f, 0x24, 0x98, 0x69, 0x87,
	0xad, 0x5a, 0x9f, 0xef, 0x15, 0x9f, 0x34, 0xc9, 0xf1, 0x5d, 0x78, 0xfe, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xb3, 0x22, 0x45, 0xd8, 0x7a, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationsByStakerAssetOperator) > 0 {
		for iNdEx := len(m.DelegationsByStakerAssetOperator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationsByStakerAssetOperator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationByStakerAssetOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationByStakerAssetOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationByStakerAssetOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationsByAssetOperator) > 0 {
		for iNdEx := len(m.DelegationsByAssetOperator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationsByAssetOperator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationByAssetOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationByAssetOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationByAssetOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationsByOperator) > 0 {
		for iNdEx := len(m.DelegationsByOperator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationsByOperator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationByOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationByOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationByOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationsByStakerAssetOperator) > 0 {
		for _, e := range m.DelegationsByStakerAssetOperator {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DelegationByStakerAssetOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DelegationsByAssetOperator) > 0 {
		for _, e := range m.DelegationsByAssetOperator {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DelegationByAssetOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DelegationsByOperator) > 0 {
		for _, e := range m.DelegationsByOperator {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DelegationByOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationsByStakerAssetOperator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationsByStakerAssetOperator = append(m.DelegationsByStakerAssetOperator, DelegationByStakerAssetOperator{})
			if err := m.DelegationsByStakerAssetOperator[len(m.DelegationsByStakerAssetOperator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationByStakerAssetOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationByStakerAssetOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationByStakerAssetOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationsByAssetOperator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationsByAssetOperator = append(m.DelegationsByAssetOperator, DelegationByAssetOperator{})
			if err := m.DelegationsByAssetOperator[len(m.DelegationsByAssetOperator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationByAssetOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationByAssetOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationByAssetOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationsByOperator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationsByOperator = append(m.DelegationsByOperator, DelegationByOperator{})
			if err := m.DelegationsByOperator[len(m.DelegationsByOperator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationByOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationByOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationByOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
