// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/delegation/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValueField is a field that holds a value of sdk.Int type.
type ValueField struct {
	// amount is the amount of the asset, as an sdk.Int.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *ValueField) Reset()         { *m = ValueField{} }
func (m *ValueField) String() string { return proto.CompactTextString(m) }
func (*ValueField) ProtoMessage()    {}
func (*ValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{0}
}
func (m *ValueField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueField.Merge(m, src)
}
func (m *ValueField) XXX_Size() int {
	return m.Size()
}
func (m *ValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueField.DiscardUnknown(m)
}

var xxx_messageInfo_ValueField proto.InternalMessageInfo

// DelegatedSingleAssetInfo is a single asset info that is delegated by a staker.
type DelegatedSingleAssetInfo struct {
	// asset_id is the asset id.
	AssetID string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// since Cosmos uses an IAVL+ tree where the order of insertion affects the state root (even
	// if the items are unrelated), and deserializing a protobuf map into Golang does not
	// guarantee order, we cannot use a map here. Instead, we use a repeated field of key-value
	// pairs.
	PerOperatorAmounts []KeyValue `protobuf:"bytes,3,rep,name=per_operator_amounts,json=perOperatorAmounts,proto3" json:"per_operator_amounts"`
}

func (m *DelegatedSingleAssetInfo) Reset()         { *m = DelegatedSingleAssetInfo{} }
func (m *DelegatedSingleAssetInfo) String() string { return proto.CompactTextString(m) }
func (*DelegatedSingleAssetInfo) ProtoMessage()    {}
func (*DelegatedSingleAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{1}
}
func (m *DelegatedSingleAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatedSingleAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatedSingleAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatedSingleAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatedSingleAssetInfo.Merge(m, src)
}
func (m *DelegatedSingleAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegatedSingleAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatedSingleAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatedSingleAssetInfo proto.InternalMessageInfo

func (m *DelegatedSingleAssetInfo) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

func (m *DelegatedSingleAssetInfo) GetPerOperatorAmounts() []KeyValue {
	if m != nil {
		return m.PerOperatorAmounts
	}
	return nil
}

// KeyValue is a key-value pair. It is a helper struct to represent a map in Protobuf.
type KeyValue struct {
	// key is the key of the key-value pair.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value is the value of the key-value pair.
	Value *ValueField `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{2}
}
func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(m, src)
}
func (m *KeyValue) XXX_Size() int {
	return m.Size()
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() *ValueField {
	if m != nil {
		return m.Value
	}
	return nil
}

// DelegationApproveInfo is the delegation approve info.
type DelegationApproveInfo struct {
	// signature of the delegation approve info.
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// salt within the signature.
	Salt string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *DelegationApproveInfo) Reset()         { *m = DelegationApproveInfo{} }
func (m *DelegationApproveInfo) String() string { return proto.CompactTextString(m) }
func (*DelegationApproveInfo) ProtoMessage()    {}
func (*DelegationApproveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{3}
}
func (m *DelegationApproveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationApproveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationApproveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationApproveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationApproveInfo.Merge(m, src)
}
func (m *DelegationApproveInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegationApproveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationApproveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationApproveInfo proto.InternalMessageInfo

func (m *DelegationApproveInfo) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *DelegationApproveInfo) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

// DelegationIncOrDecInfo is the delegation increase or decrease info.
type DelegationIncOrDecInfo struct {
	// from_address is the staker address
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// per_operator_amounts is the amount of the asset delegated to each operator.
	PerOperatorAmounts []KeyValue `protobuf:"bytes,2,rep,name=per_operator_amounts,json=perOperatorAmounts,proto3" json:"per_operator_amounts"`
}

func (m *DelegationIncOrDecInfo) Reset()         { *m = DelegationIncOrDecInfo{} }
func (m *DelegationIncOrDecInfo) String() string { return proto.CompactTextString(m) }
func (*DelegationIncOrDecInfo) ProtoMessage()    {}
func (*DelegationIncOrDecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{4}
}
func (m *DelegationIncOrDecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationIncOrDecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationIncOrDecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationIncOrDecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationIncOrDecInfo.Merge(m, src)
}
func (m *DelegationIncOrDecInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegationIncOrDecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationIncOrDecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationIncOrDecInfo proto.InternalMessageInfo

// MsgDelegation is the delegation Msg.
type MsgDelegation struct {
	// asset_id is the asset id.
	AssetID string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// base_info is the delegation increase or decrease request container.
	BaseInfo *DelegationIncOrDecInfo `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
	// approved_info is the delegation increase or decrease response container.
	ApprovedInfo *DelegationApproveInfo `protobuf:"bytes,3,opt,name=approved_info,json=approvedInfo,proto3" json:"approved_info,omitempty"`
}

func (m *MsgDelegation) Reset()         { *m = MsgDelegation{} }
func (m *MsgDelegation) String() string { return proto.CompactTextString(m) }
func (*MsgDelegation) ProtoMessage()    {}
func (*MsgDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{5}
}
func (m *MsgDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegation.Merge(m, src)
}
func (m *MsgDelegation) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegation proto.InternalMessageInfo

func (m *MsgDelegation) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

func (m *MsgDelegation) GetBaseInfo() *DelegationIncOrDecInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *MsgDelegation) GetApprovedInfo() *DelegationApproveInfo {
	if m != nil {
		return m.ApprovedInfo
	}
	return nil
}

// UndelegationRecord is the undelegation record, keyed by a RecordKey.
type UndelegationRecord struct {
	// staker_id is the staker id.
	StakerID string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// asset_id is the asset id.
	AssetID string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// operator_addr is the operator address.
	OperatorAddr string `protobuf:"bytes,3,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	// tx_hash is the transaction hash on the client chain.
	TxHash string `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// is_pending is the flag to indicate if the undelegation is pending.
	IsPending bool `protobuf:"varint,5,opt,name=is_pending,json=isPending,proto3" json:"is_pending,omitempty"`
	// block_number is the block number on Exocore.
	BlockNumber uint64 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// complete_block_number is the block number on Exocore at which the undelegation
	// should be completed.
	CompleteBlockNumber uint64 `protobuf:"varint,7,opt,name=complete_block_number,json=completeBlockNumber,proto3" json:"complete_block_number,omitempty"`
	// lz_tx_nonce is the nonce of the transaction on the client chain.
	LzTxNonce uint64 `protobuf:"varint,8,opt,name=lz_tx_nonce,json=lzTxNonce,proto3" json:"lz_tx_nonce,omitempty"`
	// amount is the amount of the asset to be undelegated.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// actual_completed_amount is the actual amount of the asset that has been
	// undelegated so far. it may be lower than the amount in the case of slashing.
	ActualCompletedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=actual_completed_amount,json=actualCompletedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"actual_completed_amount"`
}

func (m *UndelegationRecord) Reset()         { *m = UndelegationRecord{} }
func (m *UndelegationRecord) String() string { return proto.CompactTextString(m) }
func (*UndelegationRecord) ProtoMessage()    {}
func (*UndelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{6}
}
func (m *UndelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationRecord.Merge(m, src)
}
func (m *UndelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationRecord proto.InternalMessageInfo

func (m *UndelegationRecord) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *UndelegationRecord) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

func (m *UndelegationRecord) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *UndelegationRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *UndelegationRecord) GetIsPending() bool {
	if m != nil {
		return m.IsPending
	}
	return false
}

func (m *UndelegationRecord) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *UndelegationRecord) GetCompleteBlockNumber() uint64 {
	if m != nil {
		return m.CompleteBlockNumber
	}
	return 0
}

func (m *UndelegationRecord) GetLzTxNonce() uint64 {
	if m != nil {
		return m.LzTxNonce
	}
	return 0
}

// UndelegationRecordKeyList is the list of undelegation records.
type UndelegationRecordKeyList struct {
	// key_list is the list of undelegation record keys.
	KeyList []string `protobuf:"bytes,1,rep,name=key_list,json=keyList,proto3" json:"key_list,omitempty"`
}

func (m *UndelegationRecordKeyList) Reset()         { *m = UndelegationRecordKeyList{} }
func (m *UndelegationRecordKeyList) String() string { return proto.CompactTextString(m) }
func (*UndelegationRecordKeyList) ProtoMessage()    {}
func (*UndelegationRecordKeyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{7}
}
func (m *UndelegationRecordKeyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationRecordKeyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationRecordKeyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationRecordKeyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationRecordKeyList.Merge(m, src)
}
func (m *UndelegationRecordKeyList) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationRecordKeyList) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationRecordKeyList.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationRecordKeyList proto.InternalMessageInfo

func (m *UndelegationRecordKeyList) GetKeyList() []string {
	if m != nil {
		return m.KeyList
	}
	return nil
}

// DelegationResponse is the response to a delegation request.
type DelegationResponse struct {
}

func (m *DelegationResponse) Reset()         { *m = DelegationResponse{} }
func (m *DelegationResponse) String() string { return proto.CompactTextString(m) }
func (*DelegationResponse) ProtoMessage()    {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{8}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

// MsgUndelegation is the undelegation Msg.
type MsgUndelegation struct {
	// base_info is the delegation increase or decrease request container.
	AssetID  string                  `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	BaseInfo *DelegationIncOrDecInfo `protobuf:"bytes,2,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
}

func (m *MsgUndelegation) Reset()         { *m = MsgUndelegation{} }
func (m *MsgUndelegation) String() string { return proto.CompactTextString(m) }
func (*MsgUndelegation) ProtoMessage()    {}
func (*MsgUndelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{9}
}
func (m *MsgUndelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUndelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUndelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUndelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUndelegation.Merge(m, src)
}
func (m *MsgUndelegation) XXX_Size() int {
	return m.Size()
}
func (m *MsgUndelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUndelegation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUndelegation proto.InternalMessageInfo

func (m *MsgUndelegation) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

func (m *MsgUndelegation) GetBaseInfo() *DelegationIncOrDecInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

// UndelegationResponse is the response to an undelegation request.
type UndelegationResponse struct {
}

func (m *UndelegationResponse) Reset()         { *m = UndelegationResponse{} }
func (m *UndelegationResponse) String() string { return proto.CompactTextString(m) }
func (*UndelegationResponse) ProtoMessage()    {}
func (*UndelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{10}
}
func (m *UndelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationResponse.Merge(m, src)
}
func (m *UndelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValueField)(nil), "exocore.delegation.v1.ValueField")
	proto.RegisterType((*DelegatedSingleAssetInfo)(nil), "exocore.delegation.v1.DelegatedSingleAssetInfo")
	proto.RegisterType((*KeyValue)(nil), "exocore.delegation.v1.KeyValue")
	proto.RegisterType((*DelegationApproveInfo)(nil), "exocore.delegation.v1.DelegationApproveInfo")
	proto.RegisterType((*DelegationIncOrDecInfo)(nil), "exocore.delegation.v1.DelegationIncOrDecInfo")
	proto.RegisterType((*MsgDelegation)(nil), "exocore.delegation.v1.MsgDelegation")
	proto.RegisterType((*UndelegationRecord)(nil), "exocore.delegation.v1.UndelegationRecord")
	proto.RegisterType((*UndelegationRecordKeyList)(nil), "exocore.delegation.v1.UndelegationRecordKeyList")
	proto.RegisterType((*DelegationResponse)(nil), "exocore.delegation.v1.DelegationResponse")
	proto.RegisterType((*MsgUndelegation)(nil), "exocore.delegation.v1.MsgUndelegation")
	proto.RegisterType((*UndelegationResponse)(nil), "exocore.delegation.v1.UndelegationResponse")
}

func init() { proto.RegisterFile("exocore/delegation/v1/tx.proto", fileDescriptor_16596a15a828f109) }

var fileDescriptor_16596a15a828f109 = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0x8f, 0x9b, 0xb4, 0x49, 0x5e, 0x52, 0x7d, 0xbf, 0x0c, 0xe9, 0xd6, 0x0d, 0x90, 0x64, 0x2d,
	0xa8, 0xb2, 0x85, 0x26, 0xda, 0x82, 0x40, 0xe2, 0xc7, 0x21, 0x21, 0xac, 0x08, 0x4b, 0xbb, 0xe0,
	0x76, 0x41, 0xe2, 0x62, 0x39, 0xf6, 0xd4, 0x35, 0xb1, 0x3d, 0xd6, 0xcc, 0xa4, 0x24, 0x7b, 0x42,
	0x48, 0x48, 0x88, 0x13, 0x77, 0x2e, 0xcb, 0x7f, 0xd0, 0xc3, 0xfe, 0x11, 0x7b, 0x5c, 0xed, 0x01,
	0x21, 0x0e, 0x15, 0x4a, 0x0f, 0xe5, 0xc0, 0x89, 0xbf, 0x00, 0x79, 0xc6, 0xae, 0x5d, 0xd1, 0xec,
	0x22, 0xb1, 0x12, 0x97, 0xc4, 0xf3, 0xde, 0x9b, 0xcf, 0xe7, 0x7d, 0xde, 0xbc, 0x79, 0x36, 0x34,
	0xf0, 0x94, 0x58, 0x84, 0xe2, 0xae, 0x8d, 0x3d, 0xec, 0x98, 0xdc, 0x25, 0x41, 0xf7, 0xf8, 0x66,
	0x97, 0x4f, 0x3b, 0x21, 0x25, 0x9c, 0xa0, 0xb5, 0xd8, 0xdf, 0x49, 0xfd, 0x9d, 0xe3, 0x9b, 0xf5,
	0xe7, 0x4c, 0xdf, 0x0d, 0x48, 0x57, 0xfc, 0xca, 0xc8, 0xfa, 0xba, 0x45, 0x98, 0x4f, 0x58, 0xd7,
	0x67, 0x4e, 0x84, 0xe0, 0x33, 0x27, 0x76, 0x6c, 0x48, 0x87, 0x21, 0x56, 0x5d, 0xb9, 0x88, 0x5d,
	0x35, 0x87, 0x38, 0x44, 0xda, 0xa3, 0x27, 0x69, 0xd5, 0x46, 0x00, 0x9f, 0x99, 0xde, 0x04, 0xdf,
	0x72, 0xb1, 0x67, 0xa3, 0x03, 0x58, 0x31, 0x7d, 0x32, 0x09, 0xb8, 0xaa, 0xb4, 0x94, 0x76, 0xb9,
	0xff, 0xee, 0xc3, 0xd3, 0x66, 0xee, 0xd7, 0xd3, 0xe6, 0xa6, 0xe3, 0xf2, 0xa3, 0xc9, 0xa8, 0x63,
	0x11, 0x3f, 0x06, 0x8d, 0xff, 0xb6, 0x99, 0x3d, 0xee, 0xf2, 0x59, 0x88, 0x59, 0x67, 0x18, 0xf0,
	0xc7, 0x0f, 0xb6, 0x21, 0xe6, 0x1c, 0x06, 0x5c, 0x8f, 0xb1, 0xb4, 0x1f, 0x15, 0x50, 0x07, 0x52,
	0x12, 0xb6, 0xf7, 0xdd, 0xc0, 0xf1, 0x70, 0x8f, 0x31, 0xcc, 0x87, 0xc1, 0x21, 0x41, 0x9b, 0x50,
	0x32, 0xa3, 0x85, 0xe1, 0xda, 0x31, 0x69, 0x65, 0x7e, 0xda, 0x2c, 0xca, 0x80, 0x81, 0x5e, 0x14,
	0xce, 0xa1, 0x8d, 0x3e, 0x87, 0x5a, 0x88, 0xa9, 0x41, 0x42, 0x4c, 0x4d, 0x4e, 0xa8, 0x21, 0xb1,
	0x99, 0x9a, 0x6f, 0xe5, 0xdb, 0x95, 0x9d, 0x66, 0xe7, 0xca, 0xda, 0x75, 0x6e, 0xe3, 0x99, 0x90,
	0xd7, 0x2f, 0x44, 0x4a, 0x74, 0x14, 0x62, 0x7a, 0x27, 0x46, 0xe8, 0x49, 0x00, 0xed, 0x2e, 0x94,
	0x92, 0x28, 0xf4, 0x7f, 0xc8, 0x8f, 0xf1, 0x4c, 0xe6, 0xa1, 0x47, 0x8f, 0xe8, 0x2d, 0x58, 0x3e,
	0x8e, 0x5c, 0xea, 0x52, 0x4b, 0x69, 0x57, 0x76, 0xae, 0x2f, 0xe0, 0x49, 0x6b, 0xa8, 0xcb, 0x78,
	0x6d, 0x08, 0x6b, 0x83, 0x8b, 0x90, 0x5e, 0x18, 0x52, 0x72, 0x8c, 0x85, 0xe0, 0x17, 0xa1, 0xcc,
	0x5c, 0x27, 0x30, 0xf9, 0x84, 0xe2, 0x98, 0x29, 0x35, 0x20, 0x04, 0x05, 0x66, 0x7a, 0x5c, 0xd0,
	0x95, 0x75, 0xf1, 0xac, 0xfd, 0xa9, 0xc0, 0xb5, 0x14, 0x6b, 0x18, 0x58, 0x77, 0xe8, 0x00, 0x5b,
	0x02, 0xec, 0x1d, 0xa8, 0x1e, 0x52, 0xe2, 0x1b, 0xa6, 0x6d, 0x53, 0xcc, 0x58, 0x5c, 0x41, 0xf5,
	0xf1, 0x83, 0xed, 0x5a, 0x7c, 0x10, 0x3d, 0xe9, 0xd9, 0xe7, 0xd4, 0x0d, 0x1c, 0xbd, 0x12, 0x45,
	0xc7, 0xa6, 0x85, 0x25, 0x5d, 0xfa, 0x97, 0x25, 0x7d, 0xbb, 0xff, 0xdd, 0xfd, 0x66, 0xee, 0xf7,
	0xfb, 0xcd, 0xdc, 0x37, 0xe7, 0x27, 0x5b, 0x59, 0xca, 0xef, 0xcf, 0x4f, 0xb6, 0x5e, 0xc9, 0x74,
	0xce, 0x2e, 0x73, 0x7a, 0xb6, 0x2d, 0xe4, 0x50, 0x6c, 0x32, 0x9c, 0xaa, 0xd4, 0x7e, 0x56, 0x60,
	0x75, 0x97, 0x39, 0xa9, 0xe5, 0x1f, 0x77, 0xca, 0x47, 0x50, 0x1e, 0x99, 0x0c, 0x1b, 0x6e, 0x70,
	0x48, 0xe2, 0x63, 0xdb, 0x5e, 0xa0, 0xe5, 0xea, 0xaa, 0xea, 0xa5, 0x68, 0xbf, 0xa8, 0xef, 0xa7,
	0xb0, 0x6a, 0xca, 0xb3, 0xb3, 0x25, 0x5e, 0x5e, 0xe0, 0xbd, 0xf6, 0x54, 0xbc, 0xcc, 0x89, 0xeb,
	0xd5, 0x04, 0x22, 0x5a, 0x69, 0x3f, 0x15, 0x00, 0xdd, 0x0d, 0xd2, 0x7d, 0x3a, 0xb6, 0x08, 0xb5,
	0xd1, 0x0d, 0x28, 0x33, 0x6e, 0x8e, 0x31, 0x4d, 0xe5, 0x55, 0xe7, 0xa7, 0xcd, 0xd2, 0xbe, 0x30,
	0x0e, 0x07, 0x7a, 0x49, 0xba, 0x87, 0xf6, 0xa5, 0x42, 0x2c, 0x3d, 0xa1, 0x10, 0xef, 0xc1, 0x6a,
	0x7a, 0xb6, 0xb6, 0x4d, 0x45, 0xf2, 0x4f, 0xea, 0x8e, 0x6a, 0x12, 0x1e, 0x99, 0xd1, 0x3a, 0x14,
	0xf9, 0xd4, 0x38, 0x32, 0xd9, 0x91, 0x5a, 0x10, 0xdd, 0xb8, 0xc2, 0xa7, 0x1f, 0x9a, 0xec, 0x08,
	0xbd, 0x04, 0xe0, 0x32, 0x23, 0xc4, 0x81, 0xed, 0x06, 0x8e, 0xba, 0xdc, 0x52, 0xda, 0x25, 0xbd,
	0xec, 0xb2, 0x4f, 0xa4, 0x01, 0x5d, 0x87, 0xea, 0xc8, 0x23, 0xd6, 0xd8, 0x08, 0x26, 0xfe, 0x08,
	0x53, 0x75, 0xa5, 0xa5, 0xb4, 0x0b, 0x7a, 0x45, 0xd8, 0xf6, 0x84, 0x09, 0xed, 0xc0, 0x9a, 0x45,
	0xfc, 0xd0, 0xc3, 0x1c, 0x1b, 0x97, 0x62, 0x8b, 0x22, 0xf6, 0xf9, 0xc4, 0xd9, 0xcf, 0xec, 0x69,
	0x40, 0xc5, 0xbb, 0x67, 0xf0, 0xa9, 0x11, 0x90, 0xc0, 0xc2, 0x6a, 0x49, 0x44, 0x96, 0xbd, 0x7b,
	0x07, 0xd3, 0xbd, 0xc8, 0x90, 0x99, 0x5d, 0xe5, 0x67, 0x37, 0xbb, 0x10, 0x87, 0x75, 0xd3, 0xe2,
	0x13, 0xd3, 0x33, 0x92, 0x9c, 0xec, 0xf8, 0x9e, 0xa8, 0xf0, 0x0c, 0x68, 0xd6, 0x24, 0xf8, 0xfb,
	0x09, 0xb6, 0xbc, 0x41, 0xda, 0x9b, 0xb0, 0xf1, 0xf7, 0x16, 0xb9, 0x8d, 0x67, 0x1f, 0xbb, 0x8c,
	0xa3, 0x0d, 0x28, 0x8d, 0xf1, 0xcc, 0xf0, 0x5c, 0x16, 0x8d, 0xe9, 0x7c, 0xbb, 0xac, 0x17, 0xc7,
	0xd2, 0xa5, 0xd5, 0x00, 0x0d, 0x32, 0xbb, 0x58, 0x48, 0x02, 0x86, 0xb5, 0x6f, 0x15, 0xf8, 0xdf,
	0x2e, 0x73, 0xb2, 0x88, 0xff, 0xc5, 0x65, 0xd2, 0xae, 0x41, 0xed, 0xb2, 0x2a, 0x99, 0xdf, 0xce,
	0x1f, 0x0a, 0xe4, 0x77, 0x99, 0x83, 0xbe, 0x84, 0xf5, 0xe4, 0x35, 0x21, 0xf2, 0x38, 0x20, 0xc9,
	0x60, 0x41, 0x2f, 0x2f, 0xe0, 0xbc, 0x34, 0x21, 0xea, 0x37, 0x9e, 0x9a, 0x59, 0xc2, 0x89, 0x28,
	0xbc, 0x70, 0x91, 0x8b, 0x64, 0xbb, 0x45, 0x89, 0x7f, 0xc1, 0xb7, 0xb9, 0x98, 0x2f, 0x2b, 0xa1,
	0xfe, 0xea, 0x82, 0xb8, 0xab, 0x74, 0xd6, 0x97, 0xbf, 0x3e, 0x3f, 0xd9, 0x52, 0xfa, 0x7b, 0x0f,
	0xe7, 0x0d, 0xe5, 0xd1, 0xbc, 0xa1, 0xfc, 0x36, 0x6f, 0x28, 0x3f, 0x9c, 0x35, 0x72, 0x8f, 0xce,
	0x1a, 0xb9, 0x5f, 0xce, 0x1a, 0xb9, 0x2f, 0xde, 0xc8, 0xf4, 0xd0, 0x07, 0x12, 0x77, 0x0f, 0xf3,
	0xaf, 0x08, 0x1d, 0x77, 0x93, 0x4f, 0x87, 0x69, 0xf6, 0xe3, 0x41, 0x74, 0xd5, 0x68, 0x45, 0xbc,
	0xc9, 0x5f, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x32, 0x57, 0x48, 0x29, 0x5f, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DelegateAssetToOperator delegates asset to operator.
	DelegateAssetToOperator(ctx context.Context, in *MsgDelegation, opts ...grpc.CallOption) (*DelegationResponse, error)
	// UndelegateAssetFromOperator undelegates asset from operator.
	UndelegateAssetFromOperator(ctx context.Context, in *MsgUndelegation, opts ...grpc.CallOption) (*UndelegationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DelegateAssetToOperator(ctx context.Context, in *MsgDelegation, opts ...grpc.CallOption) (*DelegationResponse, error) {
	out := new(DelegationResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Msg/DelegateAssetToOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UndelegateAssetFromOperator(ctx context.Context, in *MsgUndelegation, opts ...grpc.CallOption) (*UndelegationResponse, error) {
	out := new(UndelegationResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Msg/UndelegateAssetFromOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DelegateAssetToOperator delegates asset to operator.
	DelegateAssetToOperator(context.Context, *MsgDelegation) (*DelegationResponse, error)
	// UndelegateAssetFromOperator undelegates asset from operator.
	UndelegateAssetFromOperator(context.Context, *MsgUndelegation) (*UndelegationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DelegateAssetToOperator(ctx context.Context, req *MsgDelegation) (*DelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateAssetToOperator not implemented")
}
func (*UnimplementedMsgServer) UndelegateAssetFromOperator(ctx context.Context, req *MsgUndelegation) (*UndelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndelegateAssetFromOperator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DelegateAssetToOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateAssetToOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Msg/DelegateAssetToOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateAssetToOperator(ctx, req.(*MsgDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UndelegateAssetFromOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUndelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UndelegateAssetFromOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Msg/UndelegateAssetFromOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UndelegateAssetFromOperator(ctx, req.(*MsgUndelegation))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.delegation.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelegateAssetToOperator",
			Handler:    _Msg_DelegateAssetToOperator_Handler,
		},
		{
			MethodName: "UndelegateAssetFromOperator",
			Handler:    _Msg_UndelegateAssetFromOperator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/delegation/v1/tx.proto",
}

func (m *ValueField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DelegatedSingleAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatedSingleAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatedSingleAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerOperatorAmounts) > 0 {
		for iNdEx := len(m.PerOperatorAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PerOperatorAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationApproveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationApproveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationApproveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationIncOrDecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationIncOrDecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationIncOrDecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerOperatorAmounts) > 0 {
		for iNdEx := len(m.PerOperatorAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PerOperatorAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApprovedInfo != nil {
		{
			size, err := m.ApprovedInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BaseInfo != nil {
		{
			size, err := m.BaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ActualCompletedAmount.Size()
		i -= size
		if _, err := m.ActualCompletedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.LzTxNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LzTxNonce))
		i--
		dAtA[i] = 0x40
	}
	if m.CompleteBlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CompleteBlockNumber))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.IsPending {
		i--
		if m.IsPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationRecordKeyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationRecordKeyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationRecordKeyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyList) > 0 {
		for iNdEx := len(m.KeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyList[iNdEx])
			copy(dAtA[i:], m.KeyList[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.KeyList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUndelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUndelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUndelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		{
			size, err := m.BaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *DelegatedSingleAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PerOperatorAmounts) > 0 {
		for _, e := range m.PerOperatorAmounts {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *DelegationApproveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *DelegationIncOrDecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PerOperatorAmounts) > 0 {
		for _, e := range m.PerOperatorAmounts {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ApprovedInfo != nil {
		l = m.ApprovedInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *UndelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsPending {
		n += 2
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	if m.CompleteBlockNumber != 0 {
		n += 1 + sovTx(uint64(m.CompleteBlockNumber))
	}
	if m.LzTxNonce != 0 {
		n += 1 + sovTx(uint64(m.LzTxNonce))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ActualCompletedAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *UndelegationRecordKeyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyList) > 0 {
		for _, s := range m.KeyList {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUndelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *UndelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValueField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatedSingleAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatedSingleAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatedSingleAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerOperatorAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerOperatorAmounts = append(m.PerOperatorAmounts, KeyValue{})
			if err := m.PerOperatorAmounts[len(m.PerOperatorAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &ValueField{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationApproveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationApproveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationApproveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationIncOrDecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationIncOrDecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationIncOrDecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerOperatorAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerOperatorAmounts = append(m.PerOperatorAmounts, KeyValue{})
			if err := m.PerOperatorAmounts[len(m.PerOperatorAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &DelegationIncOrDecInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApprovedInfo == nil {
				m.ApprovedInfo = &DelegationApproveInfo{}
			}
			if err := m.ApprovedInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPending = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteBlockNumber", wireType)
			}
			m.CompleteBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LzTxNonce", wireType)
			}
			m.LzTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LzTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualCompletedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualCompletedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationRecordKeyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationRecordKeyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationRecordKeyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyList = append(m.KeyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUndelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUndelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUndelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &DelegationIncOrDecInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
