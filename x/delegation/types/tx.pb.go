// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/delegation/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValueField struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=Amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"Amount"`
}

func (m *ValueField) Reset()         { *m = ValueField{} }
func (m *ValueField) String() string { return proto.CompactTextString(m) }
func (*ValueField) ProtoMessage()    {}
func (*ValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{0}
}
func (m *ValueField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueField.Merge(m, src)
}
func (m *ValueField) XXX_Size() int {
	return m.Size()
}
func (m *ValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueField.DiscardUnknown(m)
}

var xxx_messageInfo_ValueField proto.InternalMessageInfo

type DelegatedSingleAssetInfo struct {
	AssetId              string                                 `protobuf:"bytes,1,opt,name=AssetId,proto3" json:"AssetId,omitempty"`
	TotalDelegatedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=TotalDelegatedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"TotalDelegatedAmount"`
	PerOperatorAmounts   map[string]*ValueField                 `protobuf:"bytes,3,rep,name=PerOperatorAmounts,proto3" json:"PerOperatorAmounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DelegatedSingleAssetInfo) Reset()         { *m = DelegatedSingleAssetInfo{} }
func (m *DelegatedSingleAssetInfo) String() string { return proto.CompactTextString(m) }
func (*DelegatedSingleAssetInfo) ProtoMessage()    {}
func (*DelegatedSingleAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{1}
}
func (m *DelegatedSingleAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatedSingleAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatedSingleAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatedSingleAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatedSingleAssetInfo.Merge(m, src)
}
func (m *DelegatedSingleAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegatedSingleAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatedSingleAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatedSingleAssetInfo proto.InternalMessageInfo

func (m *DelegatedSingleAssetInfo) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *DelegatedSingleAssetInfo) GetPerOperatorAmounts() map[string]*ValueField {
	if m != nil {
		return m.PerOperatorAmounts
	}
	return nil
}

type ClientChainEarningAddrList struct {
	EarningInfoList []*ClientChainEarningAddrInfo `protobuf:"bytes,1,rep,name=EarningInfoList,proto3" json:"EarningInfoList,omitempty"`
}

func (m *ClientChainEarningAddrList) Reset()         { *m = ClientChainEarningAddrList{} }
func (m *ClientChainEarningAddrList) String() string { return proto.CompactTextString(m) }
func (*ClientChainEarningAddrList) ProtoMessage()    {}
func (*ClientChainEarningAddrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{2}
}
func (m *ClientChainEarningAddrList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainEarningAddrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainEarningAddrList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainEarningAddrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainEarningAddrList.Merge(m, src)
}
func (m *ClientChainEarningAddrList) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainEarningAddrList) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainEarningAddrList.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainEarningAddrList proto.InternalMessageInfo

func (m *ClientChainEarningAddrList) GetEarningInfoList() []*ClientChainEarningAddrInfo {
	if m != nil {
		return m.EarningInfoList
	}
	return nil
}

type ClientChainEarningAddrInfo struct {
	LzClientChainId        uint64 `protobuf:"varint,1,opt,name=lzClientChainId,proto3" json:"lzClientChainId,omitempty"`
	ClientChainEarningAddr string `protobuf:"bytes,2,opt,name=clientChainEarningAddr,proto3" json:"clientChainEarningAddr,omitempty"`
}

func (m *ClientChainEarningAddrInfo) Reset()         { *m = ClientChainEarningAddrInfo{} }
func (m *ClientChainEarningAddrInfo) String() string { return proto.CompactTextString(m) }
func (*ClientChainEarningAddrInfo) ProtoMessage()    {}
func (*ClientChainEarningAddrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{3}
}
func (m *ClientChainEarningAddrInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainEarningAddrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainEarningAddrInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainEarningAddrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainEarningAddrInfo.Merge(m, src)
}
func (m *ClientChainEarningAddrInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainEarningAddrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainEarningAddrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainEarningAddrInfo proto.InternalMessageInfo

func (m *ClientChainEarningAddrInfo) GetLzClientChainId() uint64 {
	if m != nil {
		return m.LzClientChainId
	}
	return 0
}

func (m *ClientChainEarningAddrInfo) GetClientChainEarningAddr() string {
	if m != nil {
		return m.ClientChainEarningAddr
	}
	return ""
}

type OperatorInfo struct {
	EarningsAddr            string                      `protobuf:"bytes,1,opt,name=EarningsAddr,proto3" json:"EarningsAddr,omitempty"`
	ApproveAddr             string                      `protobuf:"bytes,2,opt,name=ApproveAddr,proto3" json:"ApproveAddr,omitempty"`
	OperatorMetaInfo        string                      `protobuf:"bytes,3,opt,name=OperatorMetaInfo,proto3" json:"OperatorMetaInfo,omitempty"`
	ClientChainEarningsAddr *ClientChainEarningAddrList `protobuf:"bytes,4,opt,name=ClientChainEarningsAddr,proto3" json:"ClientChainEarningsAddr,omitempty"`
}

func (m *OperatorInfo) Reset()         { *m = OperatorInfo{} }
func (m *OperatorInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorInfo) ProtoMessage()    {}
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{4}
}
func (m *OperatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorInfo.Merge(m, src)
}
func (m *OperatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorInfo proto.InternalMessageInfo

func (m *OperatorInfo) GetEarningsAddr() string {
	if m != nil {
		return m.EarningsAddr
	}
	return ""
}

func (m *OperatorInfo) GetApproveAddr() string {
	if m != nil {
		return m.ApproveAddr
	}
	return ""
}

func (m *OperatorInfo) GetOperatorMetaInfo() string {
	if m != nil {
		return m.OperatorMetaInfo
	}
	return ""
}

func (m *OperatorInfo) GetClientChainEarningsAddr() *ClientChainEarningAddrList {
	if m != nil {
		return m.ClientChainEarningsAddr
	}
	return nil
}

type RegisterOperatorReq struct {
	FromAddress string        `protobuf:"bytes,1,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`
	Info        *OperatorInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RegisterOperatorReq) Reset()         { *m = RegisterOperatorReq{} }
func (m *RegisterOperatorReq) String() string { return proto.CompactTextString(m) }
func (*RegisterOperatorReq) ProtoMessage()    {}
func (*RegisterOperatorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{5}
}
func (m *RegisterOperatorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOperatorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOperatorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOperatorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOperatorReq.Merge(m, src)
}
func (m *RegisterOperatorReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOperatorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOperatorReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOperatorReq proto.InternalMessageInfo

type DelegationApproveInfo struct {
	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Salt      string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *DelegationApproveInfo) Reset()         { *m = DelegationApproveInfo{} }
func (m *DelegationApproveInfo) String() string { return proto.CompactTextString(m) }
func (*DelegationApproveInfo) ProtoMessage()    {}
func (*DelegationApproveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{6}
}
func (m *DelegationApproveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationApproveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationApproveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationApproveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationApproveInfo.Merge(m, src)
}
func (m *DelegationApproveInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegationApproveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationApproveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationApproveInfo proto.InternalMessageInfo

func (m *DelegationApproveInfo) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *DelegationApproveInfo) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

type RegisterOperatorResponse struct {
}

func (m *RegisterOperatorResponse) Reset()         { *m = RegisterOperatorResponse{} }
func (m *RegisterOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterOperatorResponse) ProtoMessage()    {}
func (*RegisterOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{7}
}
func (m *RegisterOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterOperatorResponse.Merge(m, src)
}
func (m *RegisterOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterOperatorResponse proto.InternalMessageInfo

type DelegationIncOrDecInfo struct {
	FromAddress        string                 `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	PerOperatorAmounts map[string]*ValueField `protobuf:"bytes,2,rep,name=perOperatorAmounts,proto3" json:"perOperatorAmounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DelegationIncOrDecInfo) Reset()         { *m = DelegationIncOrDecInfo{} }
func (m *DelegationIncOrDecInfo) String() string { return proto.CompactTextString(m) }
func (*DelegationIncOrDecInfo) ProtoMessage()    {}
func (*DelegationIncOrDecInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{8}
}
func (m *DelegationIncOrDecInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationIncOrDecInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationIncOrDecInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationIncOrDecInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationIncOrDecInfo.Merge(m, src)
}
func (m *DelegationIncOrDecInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegationIncOrDecInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationIncOrDecInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationIncOrDecInfo proto.InternalMessageInfo

type MsgDelegation struct {
	BaseInfo     *DelegationIncOrDecInfo `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
	ApprovedInfo *DelegationApproveInfo  `protobuf:"bytes,2,opt,name=approvedInfo,proto3" json:"approvedInfo,omitempty"`
}

func (m *MsgDelegation) Reset()         { *m = MsgDelegation{} }
func (m *MsgDelegation) String() string { return proto.CompactTextString(m) }
func (*MsgDelegation) ProtoMessage()    {}
func (*MsgDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{9}
}
func (m *MsgDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegation.Merge(m, src)
}
func (m *MsgDelegation) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegation proto.InternalMessageInfo

func (m *MsgDelegation) GetBaseInfo() *DelegationIncOrDecInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

func (m *MsgDelegation) GetApprovedInfo() *DelegationApproveInfo {
	if m != nil {
		return m.ApprovedInfo
	}
	return nil
}

type UnDelegationRecord struct {
	StakerId              string                                 `protobuf:"bytes,1,opt,name=stakerId,proto3" json:"stakerId,omitempty"`
	AssetId               string                                 `protobuf:"bytes,2,opt,name=assetId,proto3" json:"assetId,omitempty"`
	OperatorAddr          string                                 `protobuf:"bytes,3,opt,name=OperatorAddr,proto3" json:"OperatorAddr,omitempty"`
	TxHash                string                                 `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
	IsPending             bool                                   `protobuf:"varint,5,opt,name=isPending,proto3" json:"isPending,omitempty"`
	BlockNumber           uint64                                 `protobuf:"varint,6,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	CompleteBlockNumber   uint64                                 `protobuf:"varint,7,opt,name=CompleteBlockNumber,proto3" json:"CompleteBlockNumber,omitempty"`
	LzTxNonce             uint64                                 `protobuf:"varint,8,opt,name=LzTxNonce,proto3" json:"LzTxNonce,omitempty"`
	Amount                github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	ActualCompletedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=actualCompletedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"actualCompletedAmount"`
}

func (m *UnDelegationRecord) Reset()         { *m = UnDelegationRecord{} }
func (m *UnDelegationRecord) String() string { return proto.CompactTextString(m) }
func (*UnDelegationRecord) ProtoMessage()    {}
func (*UnDelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{10}
}
func (m *UnDelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnDelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnDelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnDelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnDelegationRecord.Merge(m, src)
}
func (m *UnDelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *UnDelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UnDelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UnDelegationRecord proto.InternalMessageInfo

func (m *UnDelegationRecord) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

func (m *UnDelegationRecord) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *UnDelegationRecord) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *UnDelegationRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *UnDelegationRecord) GetIsPending() bool {
	if m != nil {
		return m.IsPending
	}
	return false
}

func (m *UnDelegationRecord) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *UnDelegationRecord) GetCompleteBlockNumber() uint64 {
	if m != nil {
		return m.CompleteBlockNumber
	}
	return 0
}

func (m *UnDelegationRecord) GetLzTxNonce() uint64 {
	if m != nil {
		return m.LzTxNonce
	}
	return 0
}

type UnDelegationRecordKeyList struct {
	KeyList []string `protobuf:"bytes,1,rep,name=keyList,proto3" json:"keyList,omitempty"`
}

func (m *UnDelegationRecordKeyList) Reset()         { *m = UnDelegationRecordKeyList{} }
func (m *UnDelegationRecordKeyList) String() string { return proto.CompactTextString(m) }
func (*UnDelegationRecordKeyList) ProtoMessage()    {}
func (*UnDelegationRecordKeyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{11}
}
func (m *UnDelegationRecordKeyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnDelegationRecordKeyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnDelegationRecordKeyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnDelegationRecordKeyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnDelegationRecordKeyList.Merge(m, src)
}
func (m *UnDelegationRecordKeyList) XXX_Size() int {
	return m.Size()
}
func (m *UnDelegationRecordKeyList) XXX_DiscardUnknown() {
	xxx_messageInfo_UnDelegationRecordKeyList.DiscardUnknown(m)
}

var xxx_messageInfo_UnDelegationRecordKeyList proto.InternalMessageInfo

func (m *UnDelegationRecordKeyList) GetKeyList() []string {
	if m != nil {
		return m.KeyList
	}
	return nil
}

type DelegationResponse struct {
}

func (m *DelegationResponse) Reset()         { *m = DelegationResponse{} }
func (m *DelegationResponse) String() string { return proto.CompactTextString(m) }
func (*DelegationResponse) ProtoMessage()    {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{12}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

type MsgUnDelegation struct {
	BaseInfo *DelegationIncOrDecInfo `protobuf:"bytes,1,opt,name=baseInfo,proto3" json:"baseInfo,omitempty"`
}

func (m *MsgUnDelegation) Reset()         { *m = MsgUnDelegation{} }
func (m *MsgUnDelegation) String() string { return proto.CompactTextString(m) }
func (*MsgUnDelegation) ProtoMessage()    {}
func (*MsgUnDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{13}
}
func (m *MsgUnDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnDelegation.Merge(m, src)
}
func (m *MsgUnDelegation) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnDelegation proto.InternalMessageInfo

func (m *MsgUnDelegation) GetBaseInfo() *DelegationIncOrDecInfo {
	if m != nil {
		return m.BaseInfo
	}
	return nil
}

type UnDelegationResponse struct {
}

func (m *UnDelegationResponse) Reset()         { *m = UnDelegationResponse{} }
func (m *UnDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*UnDelegationResponse) ProtoMessage()    {}
func (*UnDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16596a15a828f109, []int{14}
}
func (m *UnDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnDelegationResponse.Merge(m, src)
}
func (m *UnDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnDelegationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValueField)(nil), "exocore.delegation.v1.ValueField")
	proto.RegisterType((*DelegatedSingleAssetInfo)(nil), "exocore.delegation.v1.DelegatedSingleAssetInfo")
	proto.RegisterMapType((map[string]*ValueField)(nil), "exocore.delegation.v1.DelegatedSingleAssetInfo.PerOperatorAmountsEntry")
	proto.RegisterType((*ClientChainEarningAddrList)(nil), "exocore.delegation.v1.clientChainEarningAddrList")
	proto.RegisterType((*ClientChainEarningAddrInfo)(nil), "exocore.delegation.v1.clientChainEarningAddrInfo")
	proto.RegisterType((*OperatorInfo)(nil), "exocore.delegation.v1.OperatorInfo")
	proto.RegisterType((*RegisterOperatorReq)(nil), "exocore.delegation.v1.RegisterOperatorReq")
	proto.RegisterType((*DelegationApproveInfo)(nil), "exocore.delegation.v1.DelegationApproveInfo")
	proto.RegisterType((*RegisterOperatorResponse)(nil), "exocore.delegation.v1.RegisterOperatorResponse")
	proto.RegisterType((*DelegationIncOrDecInfo)(nil), "exocore.delegation.v1.DelegationIncOrDecInfo")
	proto.RegisterMapType((map[string]*ValueField)(nil), "exocore.delegation.v1.DelegationIncOrDecInfo.PerOperatorAmountsEntry")
	proto.RegisterType((*MsgDelegation)(nil), "exocore.delegation.v1.MsgDelegation")
	proto.RegisterType((*UnDelegationRecord)(nil), "exocore.delegation.v1.UnDelegationRecord")
	proto.RegisterType((*UnDelegationRecordKeyList)(nil), "exocore.delegation.v1.UnDelegationRecordKeyList")
	proto.RegisterType((*DelegationResponse)(nil), "exocore.delegation.v1.DelegationResponse")
	proto.RegisterType((*MsgUnDelegation)(nil), "exocore.delegation.v1.MsgUnDelegation")
	proto.RegisterType((*UnDelegationResponse)(nil), "exocore.delegation.v1.UnDelegationResponse")
}

func init() { proto.RegisterFile("exocore/delegation/v1/tx.proto", fileDescriptor_16596a15a828f109) }

var fileDescriptor_16596a15a828f109 = []byte{
	// 1081 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xf6, 0xc4, 0xd9, 0xfc, 0x94, 0x83, 0x12, 0x7a, 0xf3, 0x33, 0x3b, 0x20, 0x27, 0x0c, 0xec,
	0x2a, 0x04, 0x62, 0x93, 0xf0, 0xb3, 0xc8, 0x5a, 0x09, 0xe5, 0x6f, 0xc1, 0x62, 0xbd, 0x1b, 0xcd,
	0x06, 0x0e, 0x80, 0x84, 0xc6, 0x33, 0x9d, 0xc9, 0xe0, 0x71, 0xf7, 0x30, 0xdd, 0x0e, 0xf6, 0x1e,
	0x10, 0xe2, 0x04, 0x9c, 0x78, 0x84, 0x7d, 0x00, 0x0e, 0x39, 0xec, 0x03, 0x70, 0xdc, 0xe3, 0x6a,
	0x4f, 0x08, 0x89, 0x15, 0x4a, 0x0e, 0xe1, 0xc2, 0x03, 0xc0, 0x09, 0x4d, 0x77, 0xdb, 0x33, 0x8e,
	0x3d, 0x84, 0x48, 0x91, 0xb8, 0x24, 0xd3, 0x55, 0xd5, 0xdf, 0x57, 0x5d, 0x55, 0x5d, 0xd5, 0x86,
	0x22, 0x6e, 0x53, 0x87, 0x46, 0xb8, 0xec, 0xe2, 0x00, 0x7b, 0x36, 0xf7, 0x29, 0x29, 0x1f, 0xae,
	0x95, 0x79, 0xbb, 0x14, 0x46, 0x94, 0x53, 0x34, 0xa7, 0xf4, 0xa5, 0x44, 0x5f, 0x3a, 0x5c, 0x33,
	0x16, 0x1c, 0xca, 0x9a, 0x94, 0x95, 0x9b, 0xcc, 0x8b, 0xcd, 0x9b, 0xcc, 0x93, 0xf6, 0xc6, 0x35,
	0xa9, 0xf8, 0x5c, 0xac, 0xca, 0x72, 0xa1, 0x54, 0xb3, 0x1e, 0xf5, 0xa8, 0x94, 0xc7, 0x5f, 0x4a,
	0xfa, 0xbc, 0xdd, 0xf4, 0x09, 0x2d, 0x8b, 0xbf, 0x52, 0x64, 0xd6, 0x01, 0x3e, 0xb6, 0x83, 0x16,
	0xbe, 0xed, 0xe3, 0xc0, 0x45, 0x7b, 0x30, 0xb6, 0xd1, 0xa4, 0x2d, 0xc2, 0x75, 0x6d, 0x49, 0x5b,
	0x9e, 0xdc, 0xbc, 0xf5, 0xf8, 0xd9, 0x62, 0xee, 0xd7, 0x67, 0x8b, 0x37, 0x3c, 0x9f, 0x1f, 0xb4,
	0xea, 0x25, 0x87, 0x36, 0x15, 0x8f, 0xfa, 0xb7, 0xca, 0xdc, 0x46, 0x99, 0x77, 0x42, 0xcc, 0x4a,
	0x55, 0xc2, 0x9f, 0x3e, 0x5a, 0x05, 0xe5, 0x46, 0x95, 0x70, 0x4b, 0x61, 0x99, 0xdf, 0xe7, 0x41,
	0xdf, 0x96, 0x47, 0xc2, 0xee, 0x7d, 0x9f, 0x78, 0x01, 0xde, 0x60, 0x0c, 0xf3, 0x2a, 0xd9, 0xa7,
	0x48, 0x87, 0x71, 0xb9, 0x70, 0x25, 0xa7, 0xd5, 0x5d, 0xa2, 0x10, 0x66, 0xf7, 0x28, 0xb7, 0x83,
	0xde, 0x56, 0xe5, 0xda, 0xc8, 0x25, 0xb8, 0x36, 0x14, 0x19, 0x7d, 0x05, 0x68, 0x17, 0x47, 0xf7,
	0x42, 0x1c, 0xd9, 0x9c, 0x46, 0x52, 0xc8, 0xf4, 0xfc, 0x52, 0x7e, 0xb9, 0xb0, 0xfe, 0x7e, 0x69,
	0x68, 0x76, 0x4a, 0x59, 0x07, 0x2b, 0x0d, 0x22, 0xed, 0x10, 0x1e, 0x75, 0xac, 0x21, 0x14, 0xc6,
	0x01, 0x2c, 0x64, 0x98, 0xa3, 0x19, 0xc8, 0x37, 0x70, 0x47, 0xc5, 0x26, 0xfe, 0x44, 0x37, 0xe1,
	0xca, 0x61, 0x9c, 0x32, 0x11, 0x88, 0xc2, 0xfa, 0x4b, 0x19, 0x8e, 0x25, 0x69, 0xb5, 0xa4, 0x7d,
	0x65, 0xe4, 0x5d, 0xcd, 0xec, 0x80, 0xe1, 0x04, 0x3e, 0x26, 0x7c, 0xeb, 0xc0, 0xf6, 0xc9, 0x8e,
	0x1d, 0x11, 0x9f, 0x78, 0x1b, 0xae, 0x1b, 0xdd, 0xf1, 0x19, 0x47, 0x9f, 0xc2, 0xb4, 0x12, 0xc5,
	0x47, 0x88, 0x45, 0xba, 0x26, 0x4e, 0xbf, 0x96, 0x41, 0x32, 0x1c, 0x2b, 0xde, 0x6c, 0x9d, 0x45,
	0x32, 0xbf, 0xce, 0xa2, 0x16, 0x75, 0xb0, 0x0c, 0xd3, 0xc1, 0x83, 0xad, 0x44, 0xaf, 0xea, 0x61,
	0xd4, 0x3a, 0x2b, 0x46, 0xef, 0xc0, 0xfc, 0x70, 0x1c, 0x59, 0x19, 0x56, 0x86, 0xd6, 0xfc, 0x53,
	0x83, 0xa9, 0x6e, 0x88, 0x05, 0xa5, 0x09, 0x53, 0x4a, 0xcf, 0xc4, 0x76, 0x19, 0xe3, 0x3e, 0x19,
	0x5a, 0x82, 0xc2, 0x46, 0x18, 0x46, 0xf4, 0x10, 0xa7, 0x18, 0xd2, 0x22, 0xb4, 0x02, 0x33, 0x5d,
	0xd4, 0x1a, 0xe6, 0x76, 0x8c, 0xac, 0xe7, 0x85, 0xd9, 0x80, 0x1c, 0x35, 0x60, 0x61, 0x6b, 0xc0,
	0x39, 0x49, 0x3e, 0x2a, 0x92, 0x79, 0xb1, 0x38, 0xc7, 0x61, 0xb5, 0xb2, 0x10, 0xcd, 0x9f, 0x35,
	0xb8, 0x6a, 0x61, 0xcf, 0x67, 0x3c, 0x29, 0x2d, 0x0b, 0x7f, 0x89, 0x2a, 0x50, 0xb8, 0x1d, 0xd1,
	0x66, 0x6c, 0x83, 0x19, 0x53, 0x37, 0x5d, 0x7f, 0xfa, 0x68, 0x75, 0x56, 0x5d, 0x10, 0xa5, 0xb9,
	0xcf, 0x23, 0x9f, 0x78, 0x56, 0xda, 0x18, 0xdd, 0x84, 0x51, 0x3f, 0x3e, 0xa0, 0x2c, 0xbd, 0x97,
	0x33, 0xbc, 0x4d, 0x47, 0xd9, 0x12, 0x1b, 0x2a, 0x6f, 0x7d, 0xf7, 0x70, 0x31, 0xf7, 0xc7, 0xc3,
	0xc5, 0xdc, 0xb7, 0xa7, 0x47, 0x2b, 0x69, 0xc8, 0x1f, 0x4e, 0x8f, 0x56, 0x16, 0x52, 0x37, 0x36,
	0xbd, 0xd7, 0xac, 0xc2, 0xdc, 0x76, 0x0f, 0x59, 0x05, 0x5d, 0x04, 0xf2, 0x45, 0x98, 0x64, 0xbe,
	0x47, 0x6c, 0xde, 0x8a, 0xb0, 0xca, 0x5b, 0x22, 0x40, 0x08, 0x46, 0x99, 0x1d, 0xa8, 0x4e, 0x61,
	0x89, 0x6f, 0xd3, 0x00, 0x7d, 0x30, 0x18, 0x2c, 0xa4, 0x84, 0x61, 0xf3, 0xaf, 0x11, 0x98, 0x4f,
	0x78, 0xaa, 0xc4, 0xb9, 0x17, 0x6d, 0x63, 0x47, 0x10, 0x55, 0xa0, 0xb0, 0x7f, 0x91, 0x60, 0xa5,
	0x8c, 0x51, 0x0b, 0x50, 0x38, 0xd8, 0x4e, 0x46, 0xc4, 0x85, 0xda, 0xf9, 0xf7, 0x76, 0x72, 0xc6,
	0x8d, 0xec, 0x66, 0x12, 0xfe, 0x8f, 0xcd, 0xa4, 0xb2, 0xd9, 0x97, 0xd4, 0xfd, 0xfe, 0xa4, 0x5e,
	0x4f, 0x25, 0xb5, 0xc6, 0xe2, 0x7a, 0x15, 0xc7, 0x89, 0xb0, 0xcd, 0x70, 0x72, 0x4a, 0xf3, 0x27,
	0x0d, 0x9e, 0xab, 0x31, 0x2f, 0x91, 0xa0, 0x2a, 0x4c, 0xd4, 0x6d, 0x26, 0xf2, 0x2c, 0x3c, 0x2d,
	0xac, 0xaf, 0x5e, 0x28, 0x58, 0x56, 0x6f, 0x3b, 0xda, 0x85, 0x29, 0x5b, 0x56, 0x8d, 0x5b, 0x4d,
	0xca, 0xf6, 0xf5, 0x73, 0xe1, 0x52, 0xa5, 0x66, 0xf5, 0x21, 0x98, 0x7f, 0xe7, 0x01, 0x7d, 0x44,
	0x12, 0x4b, 0x0b, 0x3b, 0x34, 0x72, 0x91, 0x01, 0x13, 0x8c, 0xdb, 0x0d, 0x1c, 0xf5, 0xc6, 0x58,
	0x6f, 0x1d, 0x4f, 0x38, 0x5b, 0x4d, 0x38, 0x59, 0x90, 0xdd, 0x25, 0xba, 0x95, 0x34, 0x24, 0xd1,
	0x03, 0xf2, 0xe7, 0x54, 0x57, 0x9f, 0x35, 0x9a, 0x87, 0x31, 0xde, 0xfe, 0xc0, 0x66, 0x07, 0xa2,
	0x77, 0x4c, 0x5a, 0x6a, 0x15, 0xdf, 0x0d, 0x9f, 0xed, 0x62, 0xe2, 0xfa, 0xc4, 0xd3, 0xaf, 0x2c,
	0x69, 0xcb, 0x13, 0x56, 0x22, 0x88, 0x1b, 0xda, 0x66, 0x40, 0x9d, 0xc6, 0xdd, 0x56, 0xb3, 0x8e,
	0x23, 0x7d, 0x4c, 0xf4, 0xd8, 0xb4, 0x08, 0xbd, 0x01, 0x57, 0xb7, 0x68, 0x33, 0x0c, 0x30, 0xc7,
	0x69, 0xcb, 0x71, 0x61, 0x39, 0x4c, 0x15, 0x33, 0xde, 0x79, 0xb0, 0xd7, 0xbe, 0x4b, 0x89, 0x83,
	0xf5, 0x09, 0x61, 0x97, 0x08, 0xe2, 0x47, 0x85, 0x2d, 0x27, 0xf7, 0xe4, 0x65, 0x3c, 0x2a, 0x24,
	0x16, 0x8a, 0x60, 0xce, 0x76, 0x78, 0xcb, 0x0e, 0xba, 0x0e, 0x75, 0x9f, 0x07, 0x70, 0x09, 0x24,
	0xc3, 0xa1, 0xcd, 0xb7, 0xe1, 0xda, 0x60, 0xee, 0x3f, 0xc4, 0x1d, 0x31, 0x3b, 0x75, 0x18, 0x6f,
	0xc8, 0x4f, 0x31, 0x33, 0x27, 0xad, 0xee, 0xd2, 0x9c, 0x05, 0x94, 0xde, 0xa4, 0x9a, 0xce, 0x67,
	0x30, 0x5d, 0x63, 0x5e, 0x1a, 0xef, 0x12, 0x2b, 0xdf, 0x9c, 0x87, 0xd9, 0x7e, 0x57, 0x25, 0xeb,
	0xfa, 0x6f, 0x23, 0x90, 0xaf, 0x31, 0x0f, 0x51, 0x98, 0x39, 0xdb, 0x0e, 0xd1, 0x4a, 0x06, 0xd9,
	0x90, 0x21, 0x62, 0x94, 0xff, 0xb3, 0xad, 0x24, 0x46, 0x5f, 0xc0, 0x42, 0xf7, 0xa9, 0x24, 0xde,
	0x48, 0x7b, 0xb4, 0xc7, 0xfb, 0x4a, 0x06, 0x56, 0x5f, 0x5b, 0x30, 0x5e, 0x3d, 0x37, 0x14, 0x3d,
	0xae, 0x08, 0x5e, 0xe8, 0x1d, 0x5e, 0xb2, 0xc5, 0x03, 0xa7, 0xc7, 0x77, 0x23, 0x9b, 0x2f, 0x1d,
	0x33, 0xe3, 0xb5, 0x0c, 0xbb, 0x61, 0x81, 0x35, 0xae, 0x7c, 0x73, 0x7a, 0xb4, 0xa2, 0x6d, 0xbe,
	0xf7, 0xf8, 0xb8, 0xa8, 0x3d, 0x39, 0x2e, 0x6a, 0xbf, 0x1f, 0x17, 0xb5, 0x1f, 0x4f, 0x8a, 0xb9,
	0x27, 0x27, 0xc5, 0xdc, 0x2f, 0x27, 0xc5, 0xdc, 0x27, 0xd7, 0x53, 0x95, 0xd8, 0xfd, 0x21, 0xd0,
	0x4e, 0xff, 0x14, 0x10, 0xc5, 0x58, 0x1f, 0x13, 0xef, 0xf2, 0x37, 0xff, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x1a, 0xff, 0xda, 0x1e, 0x2d, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateClawbackVestingAccount creats a vesting account that is subject to clawback.
	RegisterOperator(ctx context.Context, in *RegisterOperatorReq, opts ...grpc.CallOption) (*RegisterOperatorResponse, error)
	DelegateAssetToOperator(ctx context.Context, in *MsgDelegation, opts ...grpc.CallOption) (*DelegationResponse, error)
	UnDelegateAssetFromOperator(ctx context.Context, in *MsgUnDelegation, opts ...grpc.CallOption) (*UnDelegationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOperator(ctx context.Context, in *RegisterOperatorReq, opts ...grpc.CallOption) (*RegisterOperatorResponse, error) {
	out := new(RegisterOperatorResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Msg/RegisterOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateAssetToOperator(ctx context.Context, in *MsgDelegation, opts ...grpc.CallOption) (*DelegationResponse, error) {
	out := new(DelegationResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Msg/DelegateAssetToOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnDelegateAssetFromOperator(ctx context.Context, in *MsgUnDelegation, opts ...grpc.CallOption) (*UnDelegationResponse, error) {
	out := new(UnDelegationResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Msg/UnDelegateAssetFromOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateClawbackVestingAccount creats a vesting account that is subject to clawback.
	RegisterOperator(context.Context, *RegisterOperatorReq) (*RegisterOperatorResponse, error)
	DelegateAssetToOperator(context.Context, *MsgDelegation) (*DelegationResponse, error)
	UnDelegateAssetFromOperator(context.Context, *MsgUnDelegation) (*UnDelegationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOperator(ctx context.Context, req *RegisterOperatorReq) (*RegisterOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOperator not implemented")
}
func (*UnimplementedMsgServer) DelegateAssetToOperator(ctx context.Context, req *MsgDelegation) (*DelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateAssetToOperator not implemented")
}
func (*UnimplementedMsgServer) UnDelegateAssetFromOperator(ctx context.Context, req *MsgUnDelegation) (*UnDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDelegateAssetFromOperator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Msg/RegisterOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOperator(ctx, req.(*RegisterOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateAssetToOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateAssetToOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Msg/DelegateAssetToOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateAssetToOperator(ctx, req.(*MsgDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnDelegateAssetFromOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnDelegateAssetFromOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Msg/UnDelegateAssetFromOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnDelegateAssetFromOperator(ctx, req.(*MsgUnDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.delegation.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOperator",
			Handler:    _Msg_RegisterOperator_Handler,
		},
		{
			MethodName: "DelegateAssetToOperator",
			Handler:    _Msg_DelegateAssetToOperator_Handler,
		},
		{
			MethodName: "UnDelegateAssetFromOperator",
			Handler:    _Msg_UnDelegateAssetFromOperator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/delegation/v1/tx.proto",
}

func (m *ValueField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DelegatedSingleAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatedSingleAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatedSingleAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerOperatorAmounts) > 0 {
		for k := range m.PerOperatorAmounts {
			v := m.PerOperatorAmounts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTx(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.TotalDelegatedAmount.Size()
		i -= size
		if _, err := m.TotalDelegatedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientChainEarningAddrList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainEarningAddrList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainEarningAddrList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EarningInfoList) > 0 {
		for iNdEx := len(m.EarningInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EarningInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClientChainEarningAddrInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainEarningAddrInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainEarningAddrInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientChainEarningAddr) > 0 {
		i -= len(m.ClientChainEarningAddr)
		copy(dAtA[i:], m.ClientChainEarningAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientChainEarningAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.LzClientChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LzClientChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientChainEarningsAddr != nil {
		{
			size, err := m.ClientChainEarningsAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorMetaInfo) > 0 {
		i -= len(m.OperatorMetaInfo)
		copy(dAtA[i:], m.OperatorMetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorMetaInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApproveAddr) > 0 {
		i -= len(m.ApproveAddr)
		copy(dAtA[i:], m.ApproveAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApproveAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EarningsAddr) > 0 {
		i -= len(m.EarningsAddr)
		copy(dAtA[i:], m.EarningsAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EarningsAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOperatorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOperatorReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOperatorReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationApproveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationApproveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationApproveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DelegationIncOrDecInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationIncOrDecInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationIncOrDecInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerOperatorAmounts) > 0 {
		for k := range m.PerOperatorAmounts {
			v := m.PerOperatorAmounts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTx(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApprovedInfo != nil {
		{
			size, err := m.ApprovedInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseInfo != nil {
		{
			size, err := m.BaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnDelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnDelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnDelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ActualCompletedAmount.Size()
		i -= size
		if _, err := m.ActualCompletedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.LzTxNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LzTxNonce))
		i--
		dAtA[i] = 0x40
	}
	if m.CompleteBlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CompleteBlockNumber))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.IsPending {
		i--
		if m.IsPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnDelegationRecordKeyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnDelegationRecordKeyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnDelegationRecordKeyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyList) > 0 {
		for iNdEx := len(m.KeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyList[iNdEx])
			copy(dAtA[i:], m.KeyList[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.KeyList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseInfo != nil {
		{
			size, err := m.BaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *DelegatedSingleAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TotalDelegatedAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.PerOperatorAmounts) > 0 {
		for k, v := range m.PerOperatorAmounts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTx(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClientChainEarningAddrList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EarningInfoList) > 0 {
		for _, e := range m.EarningInfoList {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ClientChainEarningAddrInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LzClientChainId != 0 {
		n += 1 + sovTx(uint64(m.LzClientChainId))
	}
	l = len(m.ClientChainEarningAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OperatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EarningsAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ApproveAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorMetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClientChainEarningsAddr != nil {
		l = m.ClientChainEarningsAddr.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterOperatorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *DelegationApproveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DelegationIncOrDecInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PerOperatorAmounts) > 0 {
		for k, v := range m.PerOperatorAmounts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTx(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ApprovedInfo != nil {
		l = m.ApprovedInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *UnDelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsPending {
		n += 2
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	if m.CompleteBlockNumber != 0 {
		n += 1 + sovTx(uint64(m.CompleteBlockNumber))
	}
	if m.LzTxNonce != 0 {
		n += 1 + sovTx(uint64(m.LzTxNonce))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ActualCompletedAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *UnDelegationRecordKeyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyList) > 0 {
		for _, s := range m.KeyList {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseInfo != nil {
		l = m.BaseInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *UnDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValueField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatedSingleAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatedSingleAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatedSingleAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegatedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDelegatedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerOperatorAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerOperatorAmounts == nil {
				m.PerOperatorAmounts = make(map[string]*ValueField)
			}
			var mapkey string
			var mapvalue *ValueField
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ValueField{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PerOperatorAmounts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainEarningAddrList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clientChainEarningAddrList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clientChainEarningAddrList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarningInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarningInfoList = append(m.EarningInfoList, &ClientChainEarningAddrInfo{})
			if err := m.EarningInfoList[len(m.EarningInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainEarningAddrInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: clientChainEarningAddrInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: clientChainEarningAddrInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LzClientChainId", wireType)
			}
			m.LzClientChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LzClientChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainEarningAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChainEarningAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarningsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EarningsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorMetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorMetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainEarningsAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientChainEarningsAddr == nil {
				m.ClientChainEarningsAddr = &ClientChainEarningAddrList{}
			}
			if err := m.ClientChainEarningsAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOperatorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOperatorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOperatorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OperatorInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationApproveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationApproveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationApproveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationIncOrDecInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationIncOrDecInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationIncOrDecInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerOperatorAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerOperatorAmounts == nil {
				m.PerOperatorAmounts = make(map[string]*ValueField)
			}
			var mapkey string
			var mapvalue *ValueField
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ValueField{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PerOperatorAmounts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &DelegationIncOrDecInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApprovedInfo == nil {
				m.ApprovedInfo = &DelegationApproveInfo{}
			}
			if err := m.ApprovedInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnDelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnDelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnDelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPending = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteBlockNumber", wireType)
			}
			m.CompleteBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LzTxNonce", wireType)
			}
			m.LzTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LzTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualCompletedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualCompletedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnDelegationRecordKeyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnDelegationRecordKeyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnDelegationRecordKeyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyList = append(m.KeyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseInfo == nil {
				m.BaseInfo = &DelegationIncOrDecInfo{}
			}
			if err := m.BaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
