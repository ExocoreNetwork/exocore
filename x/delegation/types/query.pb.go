// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/delegation/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationInfoReq struct {
	StakerID string `protobuf:"bytes,1,opt,name=stakerID,proto3" json:"stakerID,omitempty"`
	AssetID  string `protobuf:"bytes,2,opt,name=assetID,proto3" json:"assetID,omitempty"`
}

func (m *DelegationInfoReq) Reset()         { *m = DelegationInfoReq{} }
func (m *DelegationInfoReq) String() string { return proto.CompactTextString(m) }
func (*DelegationInfoReq) ProtoMessage()    {}
func (*DelegationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{0}
}
func (m *DelegationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationInfoReq.Merge(m, src)
}
func (m *DelegationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *DelegationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationInfoReq proto.InternalMessageInfo

func (m *DelegationInfoReq) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *DelegationInfoReq) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

type DelegationAmounts struct {
	CanUndelegationAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=CanUndelegationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"CanUndelegationAmount"`
	WaitUndelegationAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=WaitUndelegationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"WaitUndelegationAmount"`
}

func (m *DelegationAmounts) Reset()         { *m = DelegationAmounts{} }
func (m *DelegationAmounts) String() string { return proto.CompactTextString(m) }
func (*DelegationAmounts) ProtoMessage()    {}
func (*DelegationAmounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{1}
}
func (m *DelegationAmounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationAmounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationAmounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationAmounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationAmounts.Merge(m, src)
}
func (m *DelegationAmounts) XXX_Size() int {
	return m.Size()
}
func (m *DelegationAmounts) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationAmounts.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationAmounts proto.InternalMessageInfo

type QueryDelegationInfoResponse struct {
	TotalDelegatedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=TotalDelegatedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"TotalDelegatedAmount"`
	DelegationInfos      map[string]*DelegationAmounts          `protobuf:"bytes,2,rep,name=delegationInfos,proto3" json:"delegationInfos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryDelegationInfoResponse) Reset()         { *m = QueryDelegationInfoResponse{} }
func (m *QueryDelegationInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationInfoResponse) ProtoMessage()    {}
func (*QueryDelegationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{2}
}
func (m *QueryDelegationInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationInfoResponse.Merge(m, src)
}
func (m *QueryDelegationInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationInfoResponse proto.InternalMessageInfo

func (m *QueryDelegationInfoResponse) GetDelegationInfos() map[string]*DelegationAmounts {
	if m != nil {
		return m.DelegationInfos
	}
	return nil
}

type SingleDelegationInfoReq struct {
	StakerID     string `protobuf:"bytes,1,opt,name=stakerID,proto3" json:"stakerID,omitempty"`
	OperatorAddr string `protobuf:"bytes,2,opt,name=operatorAddr,proto3" json:"operatorAddr,omitempty"`
	AssetID      string `protobuf:"bytes,3,opt,name=assetID,proto3" json:"assetID,omitempty"`
}

func (m *SingleDelegationInfoReq) Reset()         { *m = SingleDelegationInfoReq{} }
func (m *SingleDelegationInfoReq) String() string { return proto.CompactTextString(m) }
func (*SingleDelegationInfoReq) ProtoMessage()    {}
func (*SingleDelegationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{3}
}
func (m *SingleDelegationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleDelegationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleDelegationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleDelegationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleDelegationInfoReq.Merge(m, src)
}
func (m *SingleDelegationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *SingleDelegationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleDelegationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SingleDelegationInfoReq proto.InternalMessageInfo

func (m *SingleDelegationInfoReq) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *SingleDelegationInfoReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *SingleDelegationInfoReq) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

type QueryOperatorInfoReq struct {
	OperatorAddr string `protobuf:"bytes,1,opt,name=OperatorAddr,proto3" json:"OperatorAddr,omitempty"`
}

func (m *QueryOperatorInfoReq) Reset()         { *m = QueryOperatorInfoReq{} }
func (m *QueryOperatorInfoReq) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorInfoReq) ProtoMessage()    {}
func (*QueryOperatorInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{4}
}
func (m *QueryOperatorInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorInfoReq.Merge(m, src)
}
func (m *QueryOperatorInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorInfoReq proto.InternalMessageInfo

func (m *QueryOperatorInfoReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*DelegationInfoReq)(nil), "exocore.delegation.v1.DelegationInfoReq")
	proto.RegisterType((*DelegationAmounts)(nil), "exocore.delegation.v1.DelegationAmounts")
	proto.RegisterType((*QueryDelegationInfoResponse)(nil), "exocore.delegation.v1.QueryDelegationInfoResponse")
	proto.RegisterMapType((map[string]*DelegationAmounts)(nil), "exocore.delegation.v1.QueryDelegationInfoResponse.DelegationInfosEntry")
	proto.RegisterType((*SingleDelegationInfoReq)(nil), "exocore.delegation.v1.SingleDelegationInfoReq")
	proto.RegisterType((*QueryOperatorInfoReq)(nil), "exocore.delegation.v1.QueryOperatorInfoReq")
}

func init() { proto.RegisterFile("exocore/delegation/v1/query.proto", fileDescriptor_aab345e1cf20490c) }

var fileDescriptor_aab345e1cf20490c = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5f, 0x6b, 0xd3, 0x50,
	0x1c, 0xed, 0x4d, 0x9d, 0x7f, 0xee, 0x06, 0xba, 0x6b, 0xa7, 0x5d, 0x26, 0xd9, 0x8c, 0x30, 0xca,
	0xa4, 0x89, 0xab, 0x0a, 0x22, 0x55, 0xd8, 0xec, 0x18, 0x79, 0xd9, 0x30, 0x9b, 0x08, 0xbe, 0x48,
	0xd6, 0x5c, 0x63, 0x68, 0x7a, 0x6f, 0x9a, 0x7b, 0x5b, 0xdb, 0x57, 0x7d, 0xf1, 0x45, 0x10, 0xc4,
	0x2f, 0xe1, 0x93, 0x0f, 0xfd, 0x10, 0x7b, 0x1c, 0xf3, 0x45, 0x7c, 0x18, 0xd2, 0x0a, 0xbe, 0xfa,
	0x05, 0x04, 0x69, 0x92, 0x76, 0x69, 0x96, 0x6c, 0x0e, 0xf6, 0xd4, 0xdc, 0x9c, 0xd3, 0x73, 0x4e,
	0xee, 0xef, 0xe4, 0x06, 0xde, 0xc4, 0x6d, 0x5a, 0xa5, 0x1e, 0x56, 0x4d, 0xec, 0x60, 0xcb, 0xe0,
	0x36, 0x25, 0x6a, 0x6b, 0x59, 0x6d, 0x34, 0xb1, 0xd7, 0x51, 0x5c, 0x8f, 0x72, 0x8a, 0x66, 0x42,
	0x8a, 0x72, 0x48, 0x51, 0x5a, 0xcb, 0x62, 0xce, 0xa2, 0x16, 0xf5, 0x19, 0xea, 0xe0, 0x2a, 0x20,
	0x8b, 0x37, 0x2c, 0x4a, 0x2d, 0x07, 0xab, 0x86, 0x6b, 0xab, 0x06, 0x21, 0x94, 0xfb, 0x7c, 0x16,
	0xa2, 0x73, 0x55, 0xca, 0xea, 0x94, 0x05, 0xf2, 0x31, 0x1f, 0x71, 0x36, 0x00, 0x5f, 0x06, 0x9a,
	0xc1, 0x22, 0x84, 0xa4, 0xe4, 0x94, 0xbc, 0x1d, 0xe0, 0xb2, 0x06, 0xa7, 0x2b, 0x23, 0x44, 0x23,
	0xaf, 0xa8, 0x8e, 0x1b, 0x48, 0x84, 0x17, 0x19, 0x37, 0x6a, 0xd8, 0xd3, 0x2a, 0x79, 0xb0, 0x00,
	0x0a, 0x97, 0xf4, 0xd1, 0x1a, 0xe5, 0xe1, 0x05, 0x83, 0x31, 0xcc, 0xb5, 0x4a, 0x5e, 0xf0, 0xa1,
	0xe1, 0x52, 0xfe, 0x0b, 0xa2, 0x5a, 0x2b, 0x75, 0xda, 0x24, 0x9c, 0x21, 0x0f, 0xce, 0x3c, 0x31,
	0xc8, 0x33, 0x62, 0xc6, 0x90, 0x40, 0x78, 0xb5, 0xbc, 0x7b, 0x30, 0x9f, 0xf9, 0x71, 0x30, 0xbf,
	0x68, 0xd9, 0xfc, 0x75, 0x73, 0x47, 0xa9, 0xd2, 0x7a, 0xf8, 0x00, 0xe1, 0x4f, 0x91, 0x99, 0x35,
	0x95, 0x77, 0x5c, 0xcc, 0x14, 0x8d, 0xf0, 0xfd, 0x6e, 0x11, 0x86, 0xcf, 0xa7, 0x11, 0xae, 0x27,
	0x4b, 0x23, 0x0e, 0xaf, 0x3d, 0x37, 0x6c, 0x9e, 0x60, 0x2a, 0x9c, 0x81, 0x69, 0x8a, 0xb6, 0xfc,
	0x47, 0x80, 0x73, 0x4f, 0x07, 0x53, 0x89, 0x6f, 0x28, 0x73, 0x29, 0x61, 0x18, 0xb9, 0x30, 0xb7,
	0x4d, 0xb9, 0xe1, 0x84, 0x30, 0x36, 0xcf, 0x70, 0x23, 0x12, 0x95, 0x51, 0x03, 0x5e, 0x36, 0xc7,
	0xb2, 0xb0, 0xbc, 0xb0, 0x90, 0x2d, 0x4c, 0x96, 0xd6, 0x95, 0xc4, 0x66, 0x2a, 0xc7, 0xc4, 0x57,
	0xc6, 0x6f, 0xb3, 0x35, 0xc2, 0xbd, 0x8e, 0x1e, 0xd7, 0x17, 0x1d, 0x98, 0x4b, 0x22, 0xa2, 0x2b,
	0x30, 0x5b, 0xc3, 0x9d, 0xb0, 0x4d, 0x83, 0x4b, 0xf4, 0x18, 0x4e, 0xb4, 0x0c, 0xa7, 0x89, 0xfd,
	0x99, 0x4c, 0x96, 0x0a, 0x29, 0x91, 0x8e, 0x34, 0x4a, 0x0f, 0xfe, 0xf6, 0x50, 0x78, 0x00, 0xe4,
	0x0f, 0x00, 0x5e, 0xdf, 0xb2, 0x89, 0xe5, 0xe0, 0xd3, 0x95, 0xb8, 0x0c, 0xa7, 0xa8, 0x8b, 0x3d,
	0x83, 0x53, 0x6f, 0xc5, 0x34, 0xbd, 0xb0, 0x16, 0xf9, 0xfd, 0x6e, 0x31, 0x17, 0x6e, 0xea, 0xe0,
	0x36, 0x66, 0x6c, 0x8b, 0x7b, 0x36, 0xb1, 0xf4, 0x31, 0x76, 0xf4, 0x15, 0xc8, 0x8e, 0xbf, 0x02,
	0xdb, 0x30, 0xe7, 0x6f, 0xe1, 0x66, 0x48, 0x1f, 0x66, 0x29, 0xc3, 0xa9, 0xcd, 0xa8, 0x1f, 0x38,
	0xc9, 0x2f, 0xca, 0x2e, 0xbd, 0x3b, 0x07, 0x27, 0x7c, 0x59, 0xf4, 0x19, 0xc0, 0xe9, 0x23, 0x06,
	0xe8, 0xf6, 0x71, 0xd3, 0x8c, 0x45, 0x11, 0x6f, 0xa5, 0x90, 0xa3, 0x3c, 0x59, 0x79, 0xfb, 0xed,
	0xd7, 0x27, 0xa1, 0x80, 0x16, 0xd5, 0xe4, 0xe3, 0x63, 0x1d, 0xf3, 0xb1, 0x04, 0x5f, 0x00, 0xbc,
	0x9a, 0xd0, 0x1d, 0x74, 0xf2, 0x50, 0x87, 0xb1, 0x4a, 0xa7, 0x6f, 0xa4, 0x7c, 0xff, 0xfd, 0xef,
	0xaf, 0x4b, 0xc0, 0x8f, 0xba, 0x84, 0x0a, 0xe9, 0x51, 0x63, 0xa1, 0xba, 0x00, 0xce, 0xfa, 0xb2,
	0x49, 0xcd, 0x41, 0x4a, 0x4a, 0x90, 0x94, 0x9a, 0x89, 0xff, 0xdd, 0x5b, 0xf9, 0xd1, 0x61, 0xdc,
	0x12, 0xba, 0x93, 0x12, 0x37, 0x35, 0xd8, 0xea, 0xc6, 0x6e, 0x4f, 0x02, 0x7b, 0x3d, 0x09, 0xfc,
	0xec, 0x49, 0xe0, 0x63, 0x5f, 0xca, 0xec, 0xf5, 0xa5, 0xcc, 0xf7, 0xbe, 0x94, 0x79, 0x71, 0x2f,
	0x72, 0x64, 0xac, 0x05, 0xaa, 0x1b, 0x98, 0xbf, 0xa1, 0x5e, 0x6d, 0x64, 0xd2, 0x8e, 0xda, 0xf8,
	0x87, 0xc8, 0xce, 0x79, 0xff, 0x03, 0x70, 0xf7, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x51,
	0x51, 0x30, 0xc8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	QueryOperatorInfo(ctx context.Context, in *QueryOperatorInfoReq, opts ...grpc.CallOption) (*OperatorInfo, error)
	// Balance queries the balance of a single coin for a single account.
	QueryDelegationInfo(ctx context.Context, in *DelegationInfoReq, opts ...grpc.CallOption) (*QueryDelegationInfoResponse, error)
	QuerySingleDelegationInfo(ctx context.Context, in *SingleDelegationInfoReq, opts ...grpc.CallOption) (*DelegationAmounts, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryOperatorInfo(ctx context.Context, in *QueryOperatorInfoReq, opts ...grpc.CallOption) (*OperatorInfo, error) {
	out := new(OperatorInfo)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryOperatorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDelegationInfo(ctx context.Context, in *DelegationInfoReq, opts ...grpc.CallOption) (*QueryDelegationInfoResponse, error) {
	out := new(QueryDelegationInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryDelegationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySingleDelegationInfo(ctx context.Context, in *SingleDelegationInfoReq, opts ...grpc.CallOption) (*DelegationAmounts, error) {
	out := new(DelegationAmounts)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QuerySingleDelegationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	QueryOperatorInfo(context.Context, *QueryOperatorInfoReq) (*OperatorInfo, error)
	// Balance queries the balance of a single coin for a single account.
	QueryDelegationInfo(context.Context, *DelegationInfoReq) (*QueryDelegationInfoResponse, error)
	QuerySingleDelegationInfo(context.Context, *SingleDelegationInfoReq) (*DelegationAmounts, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryOperatorInfo(ctx context.Context, req *QueryOperatorInfoReq) (*OperatorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorInfo not implemented")
}
func (*UnimplementedQueryServer) QueryDelegationInfo(ctx context.Context, req *DelegationInfoReq) (*QueryDelegationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegationInfo not implemented")
}
func (*UnimplementedQueryServer) QuerySingleDelegationInfo(ctx context.Context, req *SingleDelegationInfoReq) (*DelegationAmounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySingleDelegationInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryOperatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryOperatorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorInfo(ctx, req.(*QueryOperatorInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDelegationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryDelegationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegationInfo(ctx, req.(*DelegationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySingleDelegationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleDelegationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySingleDelegationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QuerySingleDelegationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySingleDelegationInfo(ctx, req.(*SingleDelegationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.delegation.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOperatorInfo",
			Handler:    _Query_QueryOperatorInfo_Handler,
		},
		{
			MethodName: "QueryDelegationInfo",
			Handler:    _Query_QueryDelegationInfo_Handler,
		},
		{
			MethodName: "QuerySingleDelegationInfo",
			Handler:    _Query_QuerySingleDelegationInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/delegation/v1/query.proto",
}

func (m *DelegationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationAmounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationAmounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationAmounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WaitUndelegationAmount.Size()
		i -= size
		if _, err := m.WaitUndelegationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CanUndelegationAmount.Size()
		i -= size
		if _, err := m.CanUndelegationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegationInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationInfos) > 0 {
		for k := range m.DelegationInfos {
			v := m.DelegationInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.TotalDelegatedAmount.Size()
		i -= size
		if _, err := m.TotalDelegatedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SingleDelegationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleDelegationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleDelegationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DelegationAmounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CanUndelegationAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.WaitUndelegationAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegationInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalDelegatedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.DelegationInfos) > 0 {
		for k, v := range m.DelegationInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SingleDelegationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationAmounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationAmounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationAmounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanUndelegationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CanUndelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitUndelegationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitUndelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegatedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDelegatedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationInfos == nil {
				m.DelegationInfos = make(map[string]*DelegationAmounts)
			}
			var mapkey string
			var mapvalue *DelegationAmounts
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DelegationAmounts{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DelegationInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleDelegationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleDelegationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleDelegationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
