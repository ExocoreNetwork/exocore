// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/delegation/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DelegationInfoReq is the request to obtain the delegation information
// by staker id and asset id.
type DelegationInfoReq struct {
	// staker_id is the staker id.
	StakerID string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// asset_id is the asset id.
	AssetID string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *DelegationInfoReq) Reset()         { *m = DelegationInfoReq{} }
func (m *DelegationInfoReq) String() string { return proto.CompactTextString(m) }
func (*DelegationInfoReq) ProtoMessage()    {}
func (*DelegationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{0}
}
func (m *DelegationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationInfoReq.Merge(m, src)
}
func (m *DelegationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *DelegationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationInfoReq proto.InternalMessageInfo

func (m *DelegationInfoReq) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *DelegationInfoReq) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

// StakerMap is a map to save a batch of stakers
type StakerMap struct {
	// stakers is a map, the bool value is useless, just because the protobuf
	// doesn't support the nil value. The key is stakerID
	Stakers map[string]bool `protobuf:"bytes,1,rep,name=stakers,proto3" json:"stakers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *StakerMap) Reset()         { *m = StakerMap{} }
func (m *StakerMap) String() string { return proto.CompactTextString(m) }
func (*StakerMap) ProtoMessage()    {}
func (*StakerMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{1}
}
func (m *StakerMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerMap.Merge(m, src)
}
func (m *StakerMap) XXX_Size() int {
	return m.Size()
}
func (m *StakerMap) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerMap.DiscardUnknown(m)
}

var xxx_messageInfo_StakerMap proto.InternalMessageInfo

func (m *StakerMap) GetStakers() map[string]bool {
	if m != nil {
		return m.Stakers
	}
	return nil
}

// DelegationAmounts is the delegation amount response for a single delegation.
type DelegationAmounts struct {
	// undelegatable_share is the share that can be undelegated.
	// It's to reduce the state updating when slash occurs.
	// S_j = S * T_j / T, `S` and `T` is the current asset share and amount of operator,
	// and the T_j represents the change in staker's asset amount when some external
	// operations occur, such as: delegation, undelegation and non-instantaneous slashing.
	// S_j represents the change in the staker's asset share,
	// so the updated share should be added by it.
	// A special case is the initial delegation, when T = 0 and S = 0, so T_j / T is undefined.
	// For the initial delegation, delegator j who delegates T_j tokens receive S_j = T_j shares.
	UndelegatableShare github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=undelegatable_share,json=undelegatableShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"undelegatable_share"`
	// wait_undelegation_amount is the amount that is waiting to be unbonded.
	WaitUndelegationAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=wait_undelegation_amount,json=waitUndelegationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"wait_undelegation_amount"`
}

func (m *DelegationAmounts) Reset()         { *m = DelegationAmounts{} }
func (m *DelegationAmounts) String() string { return proto.CompactTextString(m) }
func (*DelegationAmounts) ProtoMessage()    {}
func (*DelegationAmounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{2}
}
func (m *DelegationAmounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationAmounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationAmounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationAmounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationAmounts.Merge(m, src)
}
func (m *DelegationAmounts) XXX_Size() int {
	return m.Size()
}
func (m *DelegationAmounts) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationAmounts.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationAmounts proto.InternalMessageInfo

// QueryDelegationInfoResponse is the response for delegations by staker id and
// asset id.
type QueryDelegationInfoResponse struct {
	// delegation_infos is the delegation information for each operator.
	DelegationInfos map[string]*DelegationAmounts `protobuf:"bytes,1,rep,name=delegation_infos,json=delegationInfos,proto3" json:"delegation_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryDelegationInfoResponse) Reset()         { *m = QueryDelegationInfoResponse{} }
func (m *QueryDelegationInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationInfoResponse) ProtoMessage()    {}
func (*QueryDelegationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{3}
}
func (m *QueryDelegationInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationInfoResponse.Merge(m, src)
}
func (m *QueryDelegationInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationInfoResponse proto.InternalMessageInfo

func (m *QueryDelegationInfoResponse) GetDelegationInfos() map[string]*DelegationAmounts {
	if m != nil {
		return m.DelegationInfos
	}
	return nil
}

// SingleDelegationInfoReq is the request to obtain the single delegation information.
type SingleDelegationInfoReq struct {
	// staker_id is the staker id.
	StakerID string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// operator_addr is the operator address.
	OperatorAddr string `protobuf:"bytes,2,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	// asset_id is the asset id.
	AssetID string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *SingleDelegationInfoReq) Reset()         { *m = SingleDelegationInfoReq{} }
func (m *SingleDelegationInfoReq) String() string { return proto.CompactTextString(m) }
func (*SingleDelegationInfoReq) ProtoMessage()    {}
func (*SingleDelegationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{4}
}
func (m *SingleDelegationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleDelegationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleDelegationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleDelegationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleDelegationInfoReq.Merge(m, src)
}
func (m *SingleDelegationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *SingleDelegationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleDelegationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SingleDelegationInfoReq proto.InternalMessageInfo

func (m *SingleDelegationInfoReq) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *SingleDelegationInfoReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *SingleDelegationInfoReq) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

// UndelegationHoldCountReq is the request to obtain the undelegation hold count.
type UndelegationHoldCountReq struct {
	// record_key is the record key of the undelegation record.
	RecordKey string `protobuf:"bytes,1,opt,name=record_key,json=recordKey,proto3" json:"record_key,omitempty"`
}

func (m *UndelegationHoldCountReq) Reset()         { *m = UndelegationHoldCountReq{} }
func (m *UndelegationHoldCountReq) String() string { return proto.CompactTextString(m) }
func (*UndelegationHoldCountReq) ProtoMessage()    {}
func (*UndelegationHoldCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{5}
}
func (m *UndelegationHoldCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationHoldCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationHoldCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationHoldCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationHoldCountReq.Merge(m, src)
}
func (m *UndelegationHoldCountReq) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationHoldCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationHoldCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationHoldCountReq proto.InternalMessageInfo

func (m *UndelegationHoldCountReq) GetRecordKey() string {
	if m != nil {
		return m.RecordKey
	}
	return ""
}

// UndelegationHoldCountResponse is the response for the undelegation hold count.
type UndelegationHoldCountResponse struct {
	// hold_count is the number of undelegations that are on hold.
	HoldCount uint64 `protobuf:"varint,1,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
}

func (m *UndelegationHoldCountResponse) Reset()         { *m = UndelegationHoldCountResponse{} }
func (m *UndelegationHoldCountResponse) String() string { return proto.CompactTextString(m) }
func (*UndelegationHoldCountResponse) ProtoMessage()    {}
func (*UndelegationHoldCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{6}
}
func (m *UndelegationHoldCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationHoldCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationHoldCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationHoldCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationHoldCountResponse.Merge(m, src)
}
func (m *UndelegationHoldCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationHoldCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationHoldCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationHoldCountResponse proto.InternalMessageInfo

func (m *UndelegationHoldCountResponse) GetHoldCount() uint64 {
	if m != nil {
		return m.HoldCount
	}
	return 0
}

func init() {
	proto.RegisterType((*DelegationInfoReq)(nil), "exocore.delegation.v1.DelegationInfoReq")
	proto.RegisterType((*StakerMap)(nil), "exocore.delegation.v1.StakerMap")
	proto.RegisterMapType((map[string]bool)(nil), "exocore.delegation.v1.StakerMap.StakersEntry")
	proto.RegisterType((*DelegationAmounts)(nil), "exocore.delegation.v1.DelegationAmounts")
	proto.RegisterType((*QueryDelegationInfoResponse)(nil), "exocore.delegation.v1.QueryDelegationInfoResponse")
	proto.RegisterMapType((map[string]*DelegationAmounts)(nil), "exocore.delegation.v1.QueryDelegationInfoResponse.DelegationInfosEntry")
	proto.RegisterType((*SingleDelegationInfoReq)(nil), "exocore.delegation.v1.SingleDelegationInfoReq")
	proto.RegisterType((*UndelegationHoldCountReq)(nil), "exocore.delegation.v1.UndelegationHoldCountReq")
	proto.RegisterType((*UndelegationHoldCountResponse)(nil), "exocore.delegation.v1.UndelegationHoldCountResponse")
}

func init() { proto.RegisterFile("exocore/delegation/v1/query.proto", fileDescriptor_aab345e1cf20490c) }

var fileDescriptor_aab345e1cf20490c = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0xcf, 0xf0, 0x67, 0x49, 0x06, 0x56, 0xcb, 0x0e, 0xd9, 0xdd, 0x60, 0x96, 0x84, 0xcd, 0x01,
	0x65, 0x91, 0x62, 0x97, 0x94, 0x4a, 0x2d, 0x2a, 0xa8, 0xd0, 0x20, 0x1a, 0xa1, 0x22, 0xd5, 0x51,
	0x2f, 0xbd, 0x58, 0x26, 0x1e, 0x1c, 0x2b, 0x8e, 0x27, 0xcc, 0x4c, 0x02, 0x51, 0xd5, 0x4b, 0x4f,
	0x3d, 0x22, 0xf5, 0x5b, 0xb4, 0x97, 0x1e, 0x38, 0xf7, 0xcc, 0x11, 0xd1, 0x4b, 0xd5, 0x43, 0x54,
	0x85, 0x4a, 0xfd, 0x0e, 0xbd, 0xb4, 0xb2, 0x3d, 0x49, 0x1c, 0x6a, 0xd3, 0xa2, 0x9e, 0x3c, 0xf3,
	0xfe, 0xfe, 0xde, 0xfb, 0xbd, 0x79, 0x86, 0xff, 0xe1, 0x23, 0x52, 0x21, 0x14, 0x2b, 0x06, 0xb6,
	0xb1, 0xa9, 0x73, 0x8b, 0x38, 0x4a, 0x6b, 0x59, 0x39, 0x68, 0x62, 0xda, 0x96, 0x1b, 0x94, 0x70,
	0x82, 0xfe, 0x12, 0x26, 0xf2, 0xc0, 0x44, 0x6e, 0x2d, 0x4b, 0x73, 0x15, 0xc2, 0xea, 0x84, 0xf9,
	0xa6, 0x97, 0x7c, 0xa4, 0x59, 0x5f, 0xa9, 0x79, 0x37, 0xc5, 0xbf, 0x08, 0x55, 0xd2, 0x24, 0x26,
	0xf1, 0xe5, 0xee, 0x49, 0x48, 0xff, 0x35, 0x09, 0x31, 0x6d, 0xac, 0xe8, 0x0d, 0x4b, 0xd1, 0x1d,
	0x87, 0x70, 0x2f, 0x8f, 0xf0, 0xc9, 0xee, 0xc3, 0x3f, 0x8b, 0xfd, 0xe4, 0x25, 0x67, 0x9f, 0xa8,
	0xf8, 0x00, 0xfd, 0x0f, 0x13, 0x8c, 0xeb, 0x35, 0x4c, 0x35, 0xcb, 0x48, 0x81, 0x05, 0x90, 0x4b,
	0x6c, 0x4e, 0x75, 0x3b, 0x99, 0x78, 0xd9, 0x13, 0x96, 0x8a, 0x6a, 0xdc, 0x57, 0x97, 0x0c, 0xb4,
	0x08, 0xe3, 0x3a, 0x63, 0x98, 0xbb, 0x96, 0x23, 0x9e, 0xe5, 0x64, 0xb7, 0x93, 0x99, 0xd8, 0x70,
	0x65, 0xa5, 0xa2, 0x3a, 0xe1, 0x29, 0x4b, 0x46, 0xf6, 0x18, 0xc0, 0x84, 0xef, 0xfe, 0x50, 0x6f,
	0xa0, 0x6d, 0x38, 0xe1, 0x47, 0x60, 0x29, 0xb0, 0x30, 0x9a, 0x9b, 0x2c, 0xe4, 0xe5, 0xd0, 0x56,
	0xc8, 0x7d, 0x17, 0x71, 0x62, 0x5b, 0x0e, 0xa7, 0x6d, 0xb5, 0xe7, 0x2d, 0xad, 0xc2, 0xa9, 0xa0,
	0x02, 0x4d, 0xc3, 0xd1, 0x1a, 0x6e, 0xfb, 0x98, 0x55, 0xf7, 0x88, 0x92, 0x70, 0xbc, 0xa5, 0xdb,
	0x4d, 0xec, 0xa1, 0x8b, 0xab, 0xfe, 0x65, 0x75, 0xe4, 0x36, 0xc8, 0x7e, 0x01, 0xc1, 0xda, 0x37,
	0xea, 0xa4, 0xe9, 0x70, 0x86, 0xea, 0x70, 0xa6, 0xe9, 0x08, 0x10, 0xfa, 0x9e, 0x8d, 0x35, 0x56,
	0xd5, 0x29, 0x16, 0x5d, 0xb8, 0x7b, 0xda, 0xc9, 0xc4, 0x3e, 0x74, 0x32, 0x8b, 0xa6, 0xc5, 0xab,
	0xcd, 0x3d, 0xb9, 0x42, 0xea, 0x82, 0x02, 0xf1, 0xc9, 0x33, 0xa3, 0xa6, 0xf0, 0x76, 0x03, 0x33,
	0xb9, 0x88, 0x2b, 0xe7, 0x27, 0x79, 0x28, 0x18, 0x2a, 0xe2, 0x8a, 0x8a, 0x86, 0x02, 0x97, 0xdd,
	0xb8, 0xa8, 0x05, 0x53, 0x87, 0xba, 0xc5, 0xb5, 0xbe, 0xca, 0x22, 0x8e, 0xa6, 0x7b, 0x58, 0x44,
	0x3f, 0xaf, 0x93, 0xb3, 0xe4, 0xf0, 0x40, 0xce, 0x92, 0xc3, 0xd5, 0xbf, 0xdd, 0xe8, 0x8f, 0x03,
	0xc1, 0xfd, 0x3a, 0xb3, 0x5f, 0x01, 0x9c, 0x7b, 0xe4, 0x8e, 0xd5, 0x65, 0xf6, 0x59, 0x83, 0x38,
	0x0c, 0x23, 0x0a, 0xa7, 0x03, 0x80, 0x2c, 0x67, 0x9f, 0xf4, 0xa8, 0xda, 0x8e, 0xa0, 0xea, 0x8a,
	0x68, 0xf2, 0xb0, 0x58, 0x90, 0xf8, 0x87, 0x31, 0x2c, 0x95, 0x6c, 0x98, 0x0c, 0x33, 0x0c, 0x21,
	0x75, 0x3d, 0x48, 0xea, 0x64, 0x21, 0x17, 0x01, 0xe9, 0x3b, 0x76, 0x83, 0xf4, 0xbf, 0x06, 0xf0,
	0x9f, 0xb2, 0xe5, 0x98, 0x36, 0xfe, 0xa5, 0x07, 0xb0, 0x06, 0x7f, 0x27, 0x0d, 0x4c, 0x75, 0x4e,
	0xa8, 0xa6, 0x1b, 0x06, 0x15, 0xac, 0xa5, 0xce, 0x4f, 0xf2, 0x49, 0xc1, 0xc3, 0x86, 0x61, 0x50,
	0xcc, 0x58, 0x99, 0x53, 0xcb, 0x31, 0xd5, 0xa9, 0x9e, 0xb9, 0x2b, 0x1e, 0x7a, 0x3f, 0xa3, 0x57,
	0xbc, 0x9f, 0x3b, 0x30, 0x15, 0x64, 0xf1, 0x01, 0xb1, 0x8d, 0xfb, 0x6e, 0x49, 0x2e, 0xda, 0x79,
	0x08, 0x29, 0xae, 0x10, 0x6a, 0x68, 0x83, 0x36, 0x25, 0x7c, 0xc9, 0x0e, 0x6e, 0x67, 0xd7, 0xe1,
	0x7c, 0x84, 0xab, 0xe0, 0x7a, 0x1e, 0xc2, 0x2a, 0xb1, 0x0d, 0xad, 0xe2, 0x4d, 0x9d, 0xeb, 0x3f,
	0xa6, 0x26, 0xaa, 0x3d, 0xb3, 0xc2, 0xdb, 0x31, 0x38, 0xee, 0x91, 0x8b, 0x5e, 0x01, 0x38, 0x13,
	0x42, 0x33, 0xfa, 0x71, 0xff, 0x45, 0x63, 0xa5, 0xc2, 0xf5, 0x87, 0x27, 0x7b, 0xeb, 0xc5, 0xe7,
	0x37, 0x4b, 0xe0, 0xf9, 0xbb, 0x4f, 0x2f, 0x47, 0x96, 0x50, 0x4e, 0x09, 0x5f, 0xab, 0xdb, 0x98,
	0x5f, 0x02, 0x75, 0x02, 0xe0, 0xac, 0x17, 0x36, 0x8c, 0x64, 0x24, 0x47, 0x2d, 0x9c, 0xf0, 0x89,
	0x90, 0x7e, 0x7a, 0xc4, 0xb2, 0x6b, 0x03, 0xb8, 0x05, 0x74, 0x23, 0x02, 0x6e, 0x34, 0xb0, 0x33,
	0x00, 0x25, 0x4f, 0x1b, 0xca, 0x19, 0x52, 0x22, 0x70, 0x44, 0x0d, 0x87, 0xb4, 0x72, 0x3d, 0x07,
	0xd1, 0xf3, 0x9d, 0x41, 0x11, 0xf7, 0xd0, 0xfa, 0x55, 0x45, 0x84, 0xc6, 0x51, 0x9e, 0x0e, 0x06,
	0xf2, 0xd9, 0xe6, 0xee, 0x69, 0x37, 0x0d, 0xce, 0xba, 0x69, 0xf0, 0xb1, 0x9b, 0x06, 0xc7, 0x17,
	0xe9, 0xd8, 0xd9, 0x45, 0x3a, 0xf6, 0xfe, 0x22, 0x1d, 0x7b, 0xb2, 0x12, 0xd8, 0x69, 0x5b, 0x7e,
	0x8e, 0x5d, 0xcc, 0x0f, 0x09, 0xad, 0xf5, 0x53, 0x1e, 0x05, 0x93, 0x7a, 0x5b, 0x6e, 0xef, 0x37,
	0xef, 0xd7, 0x75, 0xf3, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x59, 0x7b, 0x23, 0xff, 0x62, 0x07,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// DelegationInfo queries the delegation information for {stakerID, assetID}.
	QueryDelegationInfo(ctx context.Context, in *DelegationInfoReq, opts ...grpc.CallOption) (*QueryDelegationInfoResponse, error)
	// SingleDelegationInfo queries the single delegation information for
	// {chain, staker, asset, operator}.
	QuerySingleDelegationInfo(ctx context.Context, in *SingleDelegationInfoReq, opts ...grpc.CallOption) (*DelegationAmounts, error)
	// QueryUndelegationHoldCount queries the undelegation hold count.
	QueryUndelegationHoldCount(ctx context.Context, in *UndelegationHoldCountReq, opts ...grpc.CallOption) (*UndelegationHoldCountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryDelegationInfo(ctx context.Context, in *DelegationInfoReq, opts ...grpc.CallOption) (*QueryDelegationInfoResponse, error) {
	out := new(QueryDelegationInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryDelegationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySingleDelegationInfo(ctx context.Context, in *SingleDelegationInfoReq, opts ...grpc.CallOption) (*DelegationAmounts, error) {
	out := new(DelegationAmounts)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QuerySingleDelegationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUndelegationHoldCount(ctx context.Context, in *UndelegationHoldCountReq, opts ...grpc.CallOption) (*UndelegationHoldCountResponse, error) {
	out := new(UndelegationHoldCountResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryUndelegationHoldCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// DelegationInfo queries the delegation information for {stakerID, assetID}.
	QueryDelegationInfo(context.Context, *DelegationInfoReq) (*QueryDelegationInfoResponse, error)
	// SingleDelegationInfo queries the single delegation information for
	// {chain, staker, asset, operator}.
	QuerySingleDelegationInfo(context.Context, *SingleDelegationInfoReq) (*DelegationAmounts, error)
	// QueryUndelegationHoldCount queries the undelegation hold count.
	QueryUndelegationHoldCount(context.Context, *UndelegationHoldCountReq) (*UndelegationHoldCountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryDelegationInfo(ctx context.Context, req *DelegationInfoReq) (*QueryDelegationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegationInfo not implemented")
}
func (*UnimplementedQueryServer) QuerySingleDelegationInfo(ctx context.Context, req *SingleDelegationInfoReq) (*DelegationAmounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySingleDelegationInfo not implemented")
}
func (*UnimplementedQueryServer) QueryUndelegationHoldCount(ctx context.Context, req *UndelegationHoldCountReq) (*UndelegationHoldCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUndelegationHoldCount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryDelegationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryDelegationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegationInfo(ctx, req.(*DelegationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySingleDelegationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleDelegationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySingleDelegationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QuerySingleDelegationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySingleDelegationInfo(ctx, req.(*SingleDelegationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUndelegationHoldCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndelegationHoldCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUndelegationHoldCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryUndelegationHoldCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUndelegationHoldCount(ctx, req.(*UndelegationHoldCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.delegation.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryDelegationInfo",
			Handler:    _Query_QueryDelegationInfo_Handler,
		},
		{
			MethodName: "QuerySingleDelegationInfo",
			Handler:    _Query_QuerySingleDelegationInfo_Handler,
		},
		{
			MethodName: "QueryUndelegationHoldCount",
			Handler:    _Query_QueryUndelegationHoldCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/delegation/v1/query.proto",
}

func (m *DelegationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for k := range m.Stakers {
			v := m.Stakers[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationAmounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationAmounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationAmounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WaitUndelegationAmount.Size()
		i -= size
		if _, err := m.WaitUndelegationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.UndelegatableShare.Size()
		i -= size
		if _, err := m.UndelegatableShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegationInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationInfos) > 0 {
		for k := range m.DelegationInfos {
			v := m.DelegationInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SingleDelegationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleDelegationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleDelegationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetID) > 0 {
		i -= len(m.AssetID)
		copy(dAtA[i:], m.AssetID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationHoldCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationHoldCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationHoldCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordKey) > 0 {
		i -= len(m.RecordKey)
		copy(dAtA[i:], m.RecordKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecordKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationHoldCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationHoldCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationHoldCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoldCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HoldCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StakerMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for k, v := range m.Stakers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DelegationAmounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UndelegatableShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.WaitUndelegationAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegationInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationInfos) > 0 {
		for k, v := range m.DelegationInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SingleDelegationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UndelegationHoldCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UndelegationHoldCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoldCount != 0 {
		n += 1 + sovQuery(uint64(m.HoldCount))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stakers == nil {
				m.Stakers = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stakers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationAmounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationAmounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationAmounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegatableShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UndelegatableShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitUndelegationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitUndelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationInfos == nil {
				m.DelegationInfos = make(map[string]*DelegationAmounts)
			}
			var mapkey string
			var mapvalue *DelegationAmounts
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DelegationAmounts{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DelegationInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleDelegationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleDelegationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleDelegationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationHoldCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationHoldCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationHoldCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationHoldCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationHoldCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationHoldCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldCount", wireType)
			}
			m.HoldCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
