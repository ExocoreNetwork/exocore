// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/assets/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValueField is a field that holds a value of sdk.Int type.
type ValueField struct {
	// amount is the amount of the asset, as an sdk.Int.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *ValueField) Reset()         { *m = ValueField{} }
func (m *ValueField) String() string { return proto.CompactTextString(m) }
func (*ValueField) ProtoMessage()    {}
func (*ValueField) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{0}
}
func (m *ValueField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueField.Merge(m, src)
}
func (m *ValueField) XXX_Size() int {
	return m.Size()
}
func (m *ValueField) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueField.DiscardUnknown(m)
}

var xxx_messageInfo_ValueField proto.InternalMessageInfo

// ClientChainInfo defines the client chain information.
type ClientChainInfo struct {
	// name of the client chain, like "Ethereum".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// meta_info about the client chain, like "Ethereum blockchain".
	MetaInfo string `protobuf:"bytes,2,opt,name=meta_info,json=metaInfo,proto3" json:"meta_info,omitempty"`
	// chain_id of the client chain. Not necessarily the EVM chain id.
	ChainId uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// exocore_chain_index is the index of the client chain within the exosystem.
	ExocoreChainIndex uint64 `protobuf:"varint,4,opt,name=exocore_chain_index,json=exocoreChainIndex,proto3" json:"exocore_chain_index,omitempty"`
	// finalization_blocks is the number of blocks to wait for finalization.
	FinalizationBlocks uint64 `protobuf:"varint,5,opt,name=finalization_blocks,json=finalizationBlocks,proto3" json:"finalization_blocks,omitempty"`
	// layer_zero_chain_id is the chain id of the client chain, according to L0.
	// https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids
	LayerZeroChainID uint64 `protobuf:"varint,6,opt,name=layer_zero_chain_id,json=layerZeroChainId,proto3" json:"layer_zero_chain_id,omitempty"`
	// signature_type is the type of signature used to sign the client chain address.
	SignatureType string `protobuf:"bytes,7,opt,name=signature_type,json=signatureType,proto3" json:"signature_type,omitempty"`
	// client_chain_addr is the length of addresses on the client chain.
	AddressLength uint32 `protobuf:"varint,8,opt,name=address_length,json=addressLength,proto3" json:"address_length,omitempty"`
}

func (m *ClientChainInfo) Reset()         { *m = ClientChainInfo{} }
func (m *ClientChainInfo) String() string { return proto.CompactTextString(m) }
func (*ClientChainInfo) ProtoMessage()    {}
func (*ClientChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{1}
}
func (m *ClientChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientChainInfo.Merge(m, src)
}
func (m *ClientChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientChainInfo proto.InternalMessageInfo

func (m *ClientChainInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientChainInfo) GetMetaInfo() string {
	if m != nil {
		return m.MetaInfo
	}
	return ""
}

func (m *ClientChainInfo) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ClientChainInfo) GetExocoreChainIndex() uint64 {
	if m != nil {
		return m.ExocoreChainIndex
	}
	return 0
}

func (m *ClientChainInfo) GetFinalizationBlocks() uint64 {
	if m != nil {
		return m.FinalizationBlocks
	}
	return 0
}

func (m *ClientChainInfo) GetLayerZeroChainID() uint64 {
	if m != nil {
		return m.LayerZeroChainID
	}
	return 0
}

func (m *ClientChainInfo) GetSignatureType() string {
	if m != nil {
		return m.SignatureType
	}
	return ""
}

func (m *ClientChainInfo) GetAddressLength() uint32 {
	if m != nil {
		return m.AddressLength
	}
	return 0
}

// AssetInfo defines the information for an asset to be used in staking.
type AssetInfo struct {
	// name of the asset, like "Tether USD"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// symbol of the asset, like "USDT"
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// address of the asset on the client chain
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// decimals used in the asset, typically 6 or 18.
	Decimals uint32 `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// layer_zero_chain_id is the chain id of the asset, according to L0.
	LayerZeroChainID uint64 `protobuf:"varint,5,opt,name=layer_zero_chain_id,json=layerZeroChainId,proto3" json:"layer_zero_chain_id,omitempty"`
	// exocore_chain_index is the index of the client chain within the exosystem.
	ExocoreChainIndex uint64 `protobuf:"varint,6,opt,name=exocore_chain_index,json=exocoreChainIndex,proto3" json:"exocore_chain_index,omitempty"`
	// meta_info about the asset, like "Tether USD on Ethereum blockchain".
	MetaInfo string `protobuf:"bytes,7,opt,name=meta_info,json=metaInfo,proto3" json:"meta_info,omitempty"`
}

func (m *AssetInfo) Reset()         { *m = AssetInfo{} }
func (m *AssetInfo) String() string { return proto.CompactTextString(m) }
func (*AssetInfo) ProtoMessage()    {}
func (*AssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{2}
}
func (m *AssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetInfo.Merge(m, src)
}
func (m *AssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *AssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AssetInfo proto.InternalMessageInfo

func (m *AssetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AssetInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *AssetInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AssetInfo) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *AssetInfo) GetLayerZeroChainID() uint64 {
	if m != nil {
		return m.LayerZeroChainID
	}
	return 0
}

func (m *AssetInfo) GetExocoreChainIndex() uint64 {
	if m != nil {
		return m.ExocoreChainIndex
	}
	return 0
}

func (m *AssetInfo) GetMetaInfo() string {
	if m != nil {
		return m.MetaInfo
	}
	return ""
}

// StakingAssetInfo defines the information for an asset to be used in staking.
type StakingAssetInfo struct {
	// asset_basic_info is the basic information of the asset.
	AssetBasicInfo AssetInfo `protobuf:"bytes,1,opt,name=asset_basic_info,json=assetBasicInfo,proto3" json:"asset_basic_info"`
	// staking_total_amount is the total amount of the asset staked.
	StakingTotalAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=staking_total_amount,json=stakingTotalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staking_total_amount"`
}

func (m *StakingAssetInfo) Reset()         { *m = StakingAssetInfo{} }
func (m *StakingAssetInfo) String() string { return proto.CompactTextString(m) }
func (*StakingAssetInfo) ProtoMessage()    {}
func (*StakingAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{3}
}
func (m *StakingAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingAssetInfo.Merge(m, src)
}
func (m *StakingAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakingAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakingAssetInfo proto.InternalMessageInfo

func (m *StakingAssetInfo) GetAssetBasicInfo() AssetInfo {
	if m != nil {
		return m.AssetBasicInfo
	}
	return AssetInfo{}
}

// StakerAssetInfo defines the information for a single asset.
// The type include three states:
// staker's deposited, withdrawable, and currently unbonding amount.
type StakerAssetInfo struct {
	// total_deposit_amount is the total amount of the asset deposited.
	TotalDepositAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_deposit_amount,json=totalDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_deposit_amount"`
	// withdrawable_amount is the amount that can be withdrawn.
	WithdrawableAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=withdrawable_amount,json=withdrawableAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"withdrawable_amount"`
	// pending_undelegation_amount is the amount that is waiting for undelegation.
	PendingUndelegationAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=pending_undelegation_amount,json=pendingUndelegationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"pending_undelegation_amount"`
}

func (m *StakerAssetInfo) Reset()         { *m = StakerAssetInfo{} }
func (m *StakerAssetInfo) String() string { return proto.CompactTextString(m) }
func (*StakerAssetInfo) ProtoMessage()    {}
func (*StakerAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{4}
}
func (m *StakerAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerAssetInfo.Merge(m, src)
}
func (m *StakerAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerAssetInfo proto.InternalMessageInfo

// StakerAllAssetsInfo defines the information for all assets of a staker.
// It is indexed by the asset_id.
type StakerAllAssetsInfo struct {
	// all_assets_state is the state of all assets of the staker.
	AllAssetsState map[string]*StakerAssetInfo `protobuf:"bytes,1,rep,name=all_assets_state,json=allAssetsState,proto3" json:"all_assets_state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StakerAllAssetsInfo) Reset()         { *m = StakerAllAssetsInfo{} }
func (m *StakerAllAssetsInfo) String() string { return proto.CompactTextString(m) }
func (*StakerAllAssetsInfo) ProtoMessage()    {}
func (*StakerAllAssetsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{5}
}
func (m *StakerAllAssetsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerAllAssetsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerAllAssetsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerAllAssetsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerAllAssetsInfo.Merge(m, src)
}
func (m *StakerAllAssetsInfo) XXX_Size() int {
	return m.Size()
}
func (m *StakerAllAssetsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerAllAssetsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StakerAllAssetsInfo proto.InternalMessageInfo

func (m *StakerAllAssetsInfo) GetAllAssetsState() map[string]*StakerAssetInfo {
	if m != nil {
		return m.AllAssetsState
	}
	return nil
}

// OperatorAssetInfo defines the information for a single asset,
// for an operator.
type OperatorAssetInfo struct {
	// total_amount is the total amount of the asset deposited, which excludes the
	// pending_undelegation_amount. It represent the total delegated amount of asset pool,
	// it will be used to calculate the asset amount of a specified staker from its
	// delegated share.
	TotalAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_amount,json=totalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_amount"`
	// pending_undelegation_amount is the amount that is waiting for unbonding.
	PendingUndelegationAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=pending_undelegation_amount,json=pendingUndelegationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"pending_undelegation_amount"`
	// total_share is the total share of an asset, in the formula to update the staker's share
	// S_j = S * T_j / T, `S` represent it.
	// So when the shares of staker and operator change, it also needs to add `S_j` to update.
	TotalShare github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=total_share,json=totalShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_share"`
	// operator_share is similar to the share of the staker, the calculation and update should
	// be same, the difference is that it represents the share of the operator itself.
	// the field is used to mark operator's own asset share.
	OperatorShare github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=operator_share,json=operatorShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"operator_share"`
}

func (m *OperatorAssetInfo) Reset()         { *m = OperatorAssetInfo{} }
func (m *OperatorAssetInfo) String() string { return proto.CompactTextString(m) }
func (*OperatorAssetInfo) ProtoMessage()    {}
func (*OperatorAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{6}
}
func (m *OperatorAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorAssetInfo.Merge(m, src)
}
func (m *OperatorAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *OperatorAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorAssetInfo proto.InternalMessageInfo

// MsgSetExoCoreAddr defines the MsgSetExoCoreAddr message used to set the
// exocore address of the staker.
type MsgSetExoCoreAddr struct {
	// from_address is the address of the staker.
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// set_address is the address to be set.
	SetAddress string `protobuf:"bytes,2,opt,name=set_address,json=setAddress,proto3" json:"set_address,omitempty"`
	// client_chain_addr is the address of the client chain.
	ClientChainAddr string `protobuf:"bytes,3,opt,name=client_chain_addr,json=clientChainAddr,proto3" json:"client_chain_addr,omitempty"`
	// client_chain_index is the index of the client chain within the exosystem.
	ClientChainIndex uint64 `protobuf:"varint,4,opt,name=client_chain_index,json=clientChainIndex,proto3" json:"client_chain_index,omitempty"`
	// staker_client_chain_signature is the signature of the staker's address
	// on the client chain.
	StakerClientChainSignature string `protobuf:"bytes,5,opt,name=staker_client_chain_signature,json=stakerClientChainSignature,proto3" json:"staker_client_chain_signature,omitempty"`
}

func (m *MsgSetExoCoreAddr) Reset()         { *m = MsgSetExoCoreAddr{} }
func (m *MsgSetExoCoreAddr) String() string { return proto.CompactTextString(m) }
func (*MsgSetExoCoreAddr) ProtoMessage()    {}
func (*MsgSetExoCoreAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{7}
}
func (m *MsgSetExoCoreAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetExoCoreAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetExoCoreAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetExoCoreAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetExoCoreAddr.Merge(m, src)
}
func (m *MsgSetExoCoreAddr) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetExoCoreAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetExoCoreAddr.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetExoCoreAddr proto.InternalMessageInfo

// MsgSetExoCoreAddrResponse defines the MsgSetExoCoreAddrResponse message used to return the
// response of the MsgSetExoCoreAddr message.
type MsgSetExoCoreAddrResponse struct {
}

func (m *MsgSetExoCoreAddrResponse) Reset()         { *m = MsgSetExoCoreAddrResponse{} }
func (m *MsgSetExoCoreAddrResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetExoCoreAddrResponse) ProtoMessage()    {}
func (*MsgSetExoCoreAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{8}
}
func (m *MsgSetExoCoreAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetExoCoreAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetExoCoreAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetExoCoreAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetExoCoreAddrResponse.Merge(m, src)
}
func (m *MsgSetExoCoreAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetExoCoreAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetExoCoreAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetExoCoreAddrResponse proto.InternalMessageInfo

// RegisterClientChainReq is a request to register a client chain.
type RegisterClientChainReq struct {
	// from_address is the address of the message sender.
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// info is the information of the client chain.
	Info *ClientChainInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RegisterClientChainReq) Reset()         { *m = RegisterClientChainReq{} }
func (m *RegisterClientChainReq) String() string { return proto.CompactTextString(m) }
func (*RegisterClientChainReq) ProtoMessage()    {}
func (*RegisterClientChainReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{9}
}
func (m *RegisterClientChainReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterClientChainReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterClientChainReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterClientChainReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientChainReq.Merge(m, src)
}
func (m *RegisterClientChainReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterClientChainReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientChainReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientChainReq proto.InternalMessageInfo

// RegisterClientChainResponse is the response to the RegisterClientChainReq message.
type RegisterClientChainResponse struct {
}

func (m *RegisterClientChainResponse) Reset()         { *m = RegisterClientChainResponse{} }
func (m *RegisterClientChainResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterClientChainResponse) ProtoMessage()    {}
func (*RegisterClientChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{10}
}
func (m *RegisterClientChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterClientChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterClientChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterClientChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientChainResponse.Merge(m, src)
}
func (m *RegisterClientChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterClientChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientChainResponse proto.InternalMessageInfo

// RegisterAssetReq is a request to register an asset on the client chain within
// Exocore.
type RegisterAssetReq struct {
	// from_address is the address of the message sender.
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	// info is the information of the asset.
	Info *AssetInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *RegisterAssetReq) Reset()         { *m = RegisterAssetReq{} }
func (m *RegisterAssetReq) String() string { return proto.CompactTextString(m) }
func (*RegisterAssetReq) ProtoMessage()    {}
func (*RegisterAssetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{11}
}
func (m *RegisterAssetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAssetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAssetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAssetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAssetReq.Merge(m, src)
}
func (m *RegisterAssetReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAssetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAssetReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAssetReq proto.InternalMessageInfo

// RegisterAssetResponse is the response to the RegisterAssetReq message.
type RegisterAssetResponse struct {
}

func (m *RegisterAssetResponse) Reset()         { *m = RegisterAssetResponse{} }
func (m *RegisterAssetResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterAssetResponse) ProtoMessage()    {}
func (*RegisterAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{12}
}
func (m *RegisterAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAssetResponse.Merge(m, src)
}
func (m *RegisterAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAssetResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type for Erc20 parameters.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/assets parameters to update.
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{13}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_adb6ebd423a2c426, []int{14}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValueField)(nil), "exocore.assets.v1.ValueField")
	proto.RegisterType((*ClientChainInfo)(nil), "exocore.assets.v1.ClientChainInfo")
	proto.RegisterType((*AssetInfo)(nil), "exocore.assets.v1.AssetInfo")
	proto.RegisterType((*StakingAssetInfo)(nil), "exocore.assets.v1.StakingAssetInfo")
	proto.RegisterType((*StakerAssetInfo)(nil), "exocore.assets.v1.StakerAssetInfo")
	proto.RegisterType((*StakerAllAssetsInfo)(nil), "exocore.assets.v1.StakerAllAssetsInfo")
	proto.RegisterMapType((map[string]*StakerAssetInfo)(nil), "exocore.assets.v1.StakerAllAssetsInfo.AllAssetsStateEntry")
	proto.RegisterType((*OperatorAssetInfo)(nil), "exocore.assets.v1.OperatorAssetInfo")
	proto.RegisterType((*MsgSetExoCoreAddr)(nil), "exocore.assets.v1.MsgSetExoCoreAddr")
	proto.RegisterType((*MsgSetExoCoreAddrResponse)(nil), "exocore.assets.v1.MsgSetExoCoreAddrResponse")
	proto.RegisterType((*RegisterClientChainReq)(nil), "exocore.assets.v1.RegisterClientChainReq")
	proto.RegisterType((*RegisterClientChainResponse)(nil), "exocore.assets.v1.RegisterClientChainResponse")
	proto.RegisterType((*RegisterAssetReq)(nil), "exocore.assets.v1.RegisterAssetReq")
	proto.RegisterType((*RegisterAssetResponse)(nil), "exocore.assets.v1.RegisterAssetResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "exocore.assets.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "exocore.assets.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("exocore/assets/v1/tx.proto", fileDescriptor_adb6ebd423a2c426) }

var fileDescriptor_adb6ebd423a2c426 = []byte{
	// 1234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x3a, 0xff, 0x5f, 0x9a, 0xc4, 0x99, 0x84, 0xd6, 0x76, 0x5a, 0xa7, 0x5a, 0xa9, 0x10,
	0x45, 0xc4, 0xdb, 0x06, 0x51, 0x4a, 0xca, 0x25, 0x7f, 0x5a, 0x29, 0xa8, 0x05, 0xb4, 0x6e, 0x39,
	0x54, 0x42, 0xab, 0xf1, 0xee, 0x64, 0xbd, 0xca, 0xee, 0x8c, 0xd9, 0x19, 0xb7, 0x76, 0xc5, 0x01,
	0xf5, 0x84, 0x90, 0x90, 0x10, 0x5c, 0x39, 0xf4, 0x23, 0xf4, 0x50, 0x21, 0x3e, 0x42, 0xc5, 0xa9,
	0x94, 0x0b, 0xe2, 0x50, 0x55, 0x29, 0x52, 0x38, 0xf1, 0x15, 0x40, 0x33, 0x3b, 0x6b, 0x7b, 0x13,
	0xa7, 0x11, 0xd4, 0x5c, 0x92, 0x9d, 0x79, 0xef, 0xfd, 0xde, 0xfb, 0xfd, 0xe6, 0xcd, 0x1f, 0x43,
	0x89, 0xb4, 0x98, 0xcb, 0x62, 0x62, 0x61, 0xce, 0x89, 0xe0, 0xd6, 0xdd, 0x4b, 0x96, 0x68, 0x55,
	0x1a, 0x31, 0x13, 0x0c, 0xcd, 0x69, 0x5b, 0x25, 0xb1, 0x55, 0xee, 0x5e, 0x2a, 0xcd, 0xe1, 0x28,
	0xa0, 0xcc, 0x52, 0x7f, 0x13, 0xaf, 0xd2, 0x19, 0x97, 0xf1, 0x88, 0x71, 0x2b, 0xe2, 0xbe, 0x8c,
	0x8e, 0xb8, 0xaf, 0x0d, 0xc5, 0xc4, 0xe0, 0xa8, 0x91, 0x95, 0x0c, 0xb4, 0xa9, 0x7c, 0x34, 0x6b,
	0x03, 0xc7, 0x38, 0x4a, 0xed, 0x0b, 0x3e, 0xf3, 0x59, 0x12, 0x27, 0xbf, 0xf4, 0xec, 0x59, 0x9f,
	0x31, 0x3f, 0x24, 0x16, 0x6e, 0x04, 0x16, 0xa6, 0x94, 0x09, 0x2c, 0x02, 0x46, 0x75, 0x8c, 0x59,
	0x03, 0xf8, 0x14, 0x87, 0x4d, 0x72, 0x3d, 0x20, 0xa1, 0x87, 0x6e, 0xc1, 0x18, 0x8e, 0x58, 0x93,
	0x8a, 0x82, 0x71, 0xde, 0x58, 0x9e, 0xdc, 0xfc, 0xe0, 0xc9, 0xf3, 0xa5, 0xa1, 0xdf, 0x9f, 0x2f,
	0xbd, 0xe9, 0x07, 0xa2, 0xde, 0xac, 0x55, 0x5c, 0x16, 0xe9, 0x92, 0xf4, 0xbf, 0x55, 0xee, 0xed,
	0x59, 0xa2, 0xdd, 0x20, 0xbc, 0xb2, 0x43, 0xc5, 0xb3, 0xc7, 0xab, 0xa0, 0x2b, 0xde, 0xa1, 0xc2,
	0xd6, 0x58, 0xe6, 0x2f, 0x39, 0x98, 0xdd, 0x0a, 0x03, 0x42, 0xc5, 0x56, 0x1d, 0x07, 0x74, 0x87,
	0xee, 0x32, 0x84, 0x60, 0x84, 0xe2, 0x88, 0x24, 0x79, 0x6c, 0xf5, 0x8d, 0x16, 0x61, 0x32, 0x22,
	0x02, 0x3b, 0x01, 0xdd, 0x65, 0x85, 0x9c, 0x32, 0x4c, 0xc8, 0x09, 0x15, 0x50, 0x84, 0x09, 0x57,
	0x46, 0x3b, 0x81, 0x57, 0x18, 0x3e, 0x6f, 0x2c, 0x8f, 0xd8, 0xe3, 0x6a, 0xbc, 0xe3, 0xa1, 0x0a,
	0xcc, 0x6b, 0x65, 0x1c, 0xed, 0x42, 0x3d, 0xd2, 0x2a, 0x8c, 0x28, 0xaf, 0x74, 0x39, 0x74, 0x6a,
	0x8f, 0xb4, 0x90, 0x05, 0xf3, 0xbb, 0x01, 0xc5, 0x61, 0x70, 0x5f, 0x49, 0xe1, 0xd4, 0x42, 0xe6,
	0xee, 0xf1, 0xc2, 0xa8, 0xf2, 0x47, 0xbd, 0xa6, 0x4d, 0x65, 0x41, 0x5b, 0x30, 0x1f, 0xe2, 0x36,
	0x89, 0x9d, 0xfb, 0x24, 0x66, 0x4e, 0xa7, 0x8c, 0x31, 0x19, 0xb0, 0xb9, 0xb0, 0xff, 0x7c, 0x29,
	0x7f, 0x43, 0x9a, 0xef, 0x90, 0x98, 0x25, 0x69, 0xb6, 0xed, 0x7c, 0x98, 0x9d, 0xf1, 0xd0, 0x05,
	0x98, 0xe1, 0x81, 0x4f, 0xb1, 0x68, 0xc6, 0xc4, 0x91, 0x92, 0x15, 0xc6, 0x15, 0xc5, 0xe9, 0xce,
	0xec, 0xad, 0x76, 0x83, 0x48, 0x37, 0xec, 0x79, 0x31, 0xe1, 0xdc, 0x09, 0x09, 0xf5, 0x45, 0xbd,
	0x30, 0x71, 0xde, 0x58, 0x9e, 0xb6, 0xa7, 0xf5, 0xec, 0x0d, 0x35, 0x69, 0xfe, 0x6d, 0xc0, 0xe4,
	0x86, 0x6c, 0x83, 0x63, 0xd5, 0x3c, 0x0d, 0x63, 0xbc, 0x1d, 0xd5, 0x58, 0xa8, 0xa5, 0xd4, 0x23,
	0x54, 0x80, 0x71, 0x0d, 0xa5, 0x74, 0x9c, 0xb4, 0xd3, 0x21, 0x2a, 0xc1, 0x84, 0x47, 0xdc, 0x20,
	0xc2, 0x21, 0x57, 0xe2, 0x4d, 0xdb, 0x9d, 0xf1, 0x71, 0x12, 0x8c, 0xfe, 0x2b, 0x09, 0x8e, 0x59,
	0xa8, 0xb1, 0xe3, 0x16, 0x2a, 0xd3, 0x10, 0xe3, 0xd9, 0x86, 0x30, 0x9f, 0x1a, 0x90, 0xaf, 0x0a,
	0xbc, 0x17, 0x50, 0xbf, 0x2b, 0xc4, 0x0d, 0xc8, 0xab, 0xcd, 0xe1, 0xd4, 0x30, 0x0f, 0xdc, 0x24,
	0x50, 0x8a, 0x32, 0xb5, 0x76, 0xb6, 0x72, 0x64, 0x5f, 0x56, 0x3a, 0x71, 0x9b, 0x23, 0xb2, 0xd1,
	0xed, 0x19, 0x65, 0xda, 0x94, 0xa1, 0x0a, 0x8d, 0xc2, 0x02, 0x4f, 0x32, 0x38, 0x82, 0x09, 0x1c,
	0x3a, 0x7a, 0x73, 0xe4, 0x06, 0xb0, 0x39, 0x90, 0x46, 0xbe, 0x25, 0x81, 0x37, 0x92, 0x8d, 0xf2,
	0x57, 0x0e, 0x66, 0x25, 0x25, 0x12, 0x77, 0x19, 0x51, 0x58, 0x48, 0x72, 0x7b, 0xa4, 0xc1, 0x78,
	0x20, 0x9c, 0x01, 0x6e, 0x50, 0xa4, 0x90, 0xb7, 0x13, 0xe0, 0xa4, 0x06, 0x14, 0xc1, 0xfc, 0xbd,
	0x40, 0xd4, 0xbd, 0x18, 0xdf, 0xc3, 0xb5, 0x90, 0x0c, 0x94, 0x72, 0x2f, 0xb0, 0x4e, 0xf7, 0x05,
	0x2c, 0x36, 0x08, 0xf5, 0xa4, 0xc4, 0x4d, 0xea, 0x91, 0x90, 0xf8, 0xc9, 0x9e, 0xd4, 0x69, 0x87,
	0x07, 0x90, 0xb6, 0xa8, 0x13, 0xdc, 0xee, 0xc1, 0xd7, 0x82, 0xef, 0x1b, 0x30, 0xaf, 0x05, 0x0f,
	0x43, 0xa5, 0x39, 0x57, 0xa2, 0x7b, 0x90, 0xc7, 0x61, 0xe8, 0x24, 0x9d, 0xe2, 0x70, 0x81, 0x85,
	0xdc, 0x5b, 0xc3, 0xcb, 0x53, 0x6b, 0xeb, 0x7d, 0xda, 0xa8, 0x0f, 0x42, 0xa5, 0x33, 0xaa, 0xca,
	0xe0, 0x6b, 0x54, 0xc4, 0x6d, 0x7b, 0x06, 0x67, 0x26, 0x4b, 0x04, 0xe6, 0xfb, 0xb8, 0xa1, 0x3c,
	0x0c, 0xef, 0x91, 0xb6, 0xde, 0xcb, 0xf2, 0x13, 0x5d, 0x81, 0xd1, 0xbb, 0xf2, 0x90, 0x56, 0xab,
	0x30, 0xb5, 0x66, 0x1e, 0x5f, 0x43, 0xda, 0x36, 0x76, 0x12, 0xb0, 0x9e, 0xbb, 0x62, 0x98, 0x3f,
	0x0e, 0xc3, 0xdc, 0xc7, 0x0d, 0x12, 0x63, 0xc1, 0x7a, 0xfa, 0xca, 0x81, 0x53, 0x99, 0x9e, 0x1e,
	0x44, 0x3f, 0x4d, 0x89, 0x6e, 0x33, 0x9f, 0xb4, 0xb2, 0xb9, 0xff, 0x75, 0x65, 0xd1, 0x67, 0x90,
	0x14, 0xe3, 0xf0, 0x3a, 0x8e, 0xc9, 0x7f, 0xe8, 0xa3, 0x6d, 0xe2, 0xf6, 0x64, 0xdb, 0x26, 0xae,
	0x0d, 0x0a, 0xb0, 0x2a, 0xf1, 0x90, 0x0b, 0x33, 0x4c, 0x4b, 0xaa, 0x33, 0x8c, 0x0c, 0x20, 0xc3,
	0x74, 0x8a, 0xa9, 0x92, 0x98, 0x2f, 0x72, 0x30, 0x77, 0x93, 0xfb, 0x55, 0x22, 0xae, 0xb5, 0xd8,
	0x16, 0x8b, 0xc9, 0x86, 0xe7, 0xc5, 0xe8, 0x2a, 0x9c, 0xda, 0x8d, 0x59, 0xe4, 0xa4, 0x87, 0x78,
	0xb2, 0x70, 0x85, 0x67, 0x8f, 0x57, 0x17, 0x34, 0xd4, 0x46, 0x62, 0xa9, 0x8a, 0x38, 0xa0, 0xbe,
	0x3d, 0x25, 0xbd, 0xf5, 0x14, 0x7a, 0x1f, 0xa6, 0xe4, 0xe9, 0x98, 0xc6, 0xe6, 0x4e, 0x88, 0x05,
	0x4e, 0x44, 0x1a, 0xba, 0x02, 0x73, 0xae, 0xba, 0xc4, 0xf5, 0xd9, 0x2d, 0x31, 0xf4, 0x0d, 0x32,
	0xeb, 0x76, 0x6f, 0x77, 0x55, 0xe3, 0xdb, 0x80, 0x32, 0xbe, 0xbd, 0x17, 0x72, 0xde, 0xed, 0x7d,
	0x0a, 0xc8, 0x63, 0x7e, 0x03, 0xce, 0x71, 0xd5, 0xbe, 0x4e, 0x26, 0xa8, 0x73, 0x2f, 0xaa, 0x5b,
	0x66, 0xd2, 0x2e, 0x25, 0x4e, 0x3d, 0x2f, 0x89, 0x6a, 0xea, 0xb1, 0x7e, 0xf9, 0xab, 0x87, 0x4b,
	0x43, 0x7f, 0x3e, 0x5c, 0x1a, 0x7a, 0x70, 0xf0, 0x68, 0xa5, 0x97, 0xf1, 0xd7, 0x07, 0x8f, 0x56,
	0x8a, 0xe9, 0xbb, 0xe9, 0x88, 0x98, 0xe6, 0x22, 0x14, 0x8f, 0x4c, 0xda, 0x84, 0x37, 0x18, 0xe5,
	0xc4, 0xfc, 0xd9, 0x80, 0xd3, 0x36, 0xf1, 0x03, 0x2e, 0x32, 0x59, 0x6d, 0xf2, 0xf9, 0xeb, 0x2d,
	0xc2, 0x65, 0x18, 0xe9, 0x3c, 0x71, 0xfa, 0xef, 0xe6, 0x43, 0xaf, 0x25, 0x5b, 0xf9, 0xaf, 0x5f,
	0xcd, 0x90, 0xbc, 0x9e, 0x25, 0x59, 0xee, 0xe9, 0xaf, 0x3e, 0x45, 0x9b, 0xe7, 0x60, 0xb1, 0x2f,
	0x17, 0xcd, 0xf5, 0x27, 0x03, 0xf2, 0xa9, 0x5d, 0x1d, 0x12, 0xaf, 0xcd, 0xf2, 0x62, 0x86, 0xe5,
	0x2b, 0xaf, 0x5f, 0xcd, 0xef, 0xdd, 0x57, 0xf1, 0x2b, 0xf4, 0xe1, 0xa7, 0x00, 0xcc, 0x33, 0xf0,
	0xc6, 0xa1, 0xca, 0x35, 0xa7, 0xef, 0x0c, 0x98, 0xbd, 0xc9, 0xfd, 0xdb, 0x0d, 0x0f, 0x0b, 0xf2,
	0x89, 0x7a, 0x29, 0xa3, 0xcb, 0x30, 0x89, 0x9b, 0xa2, 0xce, 0xe2, 0x40, 0xb4, 0x4f, 0xe4, 0xd3,
	0x75, 0x45, 0xef, 0xc1, 0x58, 0xf2, 0xd6, 0xd6, 0x7c, 0x8a, 0x7d, 0xf8, 0x24, 0x29, 0xf4, 0x5b,
	0x42, 0xbb, 0xaf, 0xcf, 0x48, 0x32, 0x5d, 0x20, 0xb3, 0x08, 0x67, 0x0e, 0xd5, 0x94, 0xd6, 0xbb,
	0xf6, 0x83, 0x01, 0xc3, 0x37, 0xb9, 0x8f, 0xbe, 0x31, 0xe0, 0x54, 0xa6, 0xe8, 0x7e, 0x2d, 0x72,
	0x08, 0xa4, 0xb4, 0x72, 0xb2, 0x4f, 0x47, 0x98, 0xd5, 0x07, 0xbf, 0xfe, 0xf1, 0x7d, 0xee, 0x2d,
	0xf3, 0x82, 0xd5, 0xef, 0x77, 0x8c, 0x75, 0x18, 0x7a, 0xf4, 0xcb, 0x83, 0x47, 0x2b, 0xc6, 0xe6,
	0x87, 0x4f, 0xf6, 0xcb, 0xc6, 0xd3, 0xfd, 0xb2, 0xf1, 0x62, 0xbf, 0x6c, 0x7c, 0xfb, 0xb2, 0x3c,
	0xf4, 0xf4, 0x65, 0x79, 0xe8, 0xb7, 0x97, 0xe5, 0xa1, 0x3b, 0x17, 0x7b, 0x4e, 0xbb, 0x6b, 0x09,
	0xe2, 0x47, 0x44, 0xdc, 0x63, 0xf1, 0x5e, 0x27, 0x41, 0x2b, 0x4d, 0xa1, 0xce, 0xbe, 0xda, 0x98,
	0xfa, 0xf5, 0xf1, 0xce, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x24, 0xc2, 0xb0, 0x49, 0x0d,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams updates the parameters of the assets module.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams updates the parameters of the assets module.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.assets.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/assets/v1/tx.proto",
}

func (m *ValueField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressLength != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AddressLength))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SignatureType) > 0 {
		i -= len(m.SignatureType)
		copy(dAtA[i:], m.SignatureType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignatureType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LayerZeroChainID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LayerZeroChainID))
		i--
		dAtA[i] = 0x30
	}
	if m.FinalizationBlocks != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FinalizationBlocks))
		i--
		dAtA[i] = 0x28
	}
	if m.ExocoreChainIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExocoreChainIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MetaInfo) > 0 {
		i -= len(m.MetaInfo)
		copy(dAtA[i:], m.MetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetaInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetaInfo) > 0 {
		i -= len(m.MetaInfo)
		copy(dAtA[i:], m.MetaInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetaInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExocoreChainIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExocoreChainIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.LayerZeroChainID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LayerZeroChainID))
		i--
		dAtA[i] = 0x28
	}
	if m.Decimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.StakingTotalAmount.Size()
		i -= size
		if _, err := m.StakingTotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.AssetBasicInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StakerAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PendingUndelegationAmount.Size()
		i -= size
		if _, err := m.PendingUndelegationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.WithdrawableAmount.Size()
		i -= size
		if _, err := m.WithdrawableAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalDepositAmount.Size()
		i -= size
		if _, err := m.TotalDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StakerAllAssetsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerAllAssetsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerAllAssetsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllAssetsState) > 0 {
		for k := range m.AllAssetsState {
			v := m.AllAssetsState[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTx(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OperatorShare.Size()
		i -= size
		if _, err := m.OperatorShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalShare.Size()
		i -= size
		if _, err := m.TotalShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PendingUndelegationAmount.Size()
		i -= size
		if _, err := m.PendingUndelegationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalAmount.Size()
		i -= size
		if _, err := m.TotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetExoCoreAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetExoCoreAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetExoCoreAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerClientChainSignature) > 0 {
		i -= len(m.StakerClientChainSignature)
		copy(dAtA[i:], m.StakerClientChainSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakerClientChainSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ClientChainIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClientChainIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClientChainAddr) > 0 {
		i -= len(m.ClientChainAddr)
		copy(dAtA[i:], m.ClientChainAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientChainAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SetAddress) > 0 {
		i -= len(m.SetAddress)
		copy(dAtA[i:], m.SetAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SetAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetExoCoreAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetExoCoreAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetExoCoreAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RegisterClientChainReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterClientChainReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterClientChainReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterClientChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterClientChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterClientChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RegisterAssetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAssetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAssetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValueField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *ClientChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.ExocoreChainIndex != 0 {
		n += 1 + sovTx(uint64(m.ExocoreChainIndex))
	}
	if m.FinalizationBlocks != 0 {
		n += 1 + sovTx(uint64(m.FinalizationBlocks))
	}
	if m.LayerZeroChainID != 0 {
		n += 1 + sovTx(uint64(m.LayerZeroChainID))
	}
	l = len(m.SignatureType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AddressLength != 0 {
		n += 1 + sovTx(uint64(m.AddressLength))
	}
	return n
}

func (m *AssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovTx(uint64(m.Decimals))
	}
	if m.LayerZeroChainID != 0 {
		n += 1 + sovTx(uint64(m.LayerZeroChainID))
	}
	if m.ExocoreChainIndex != 0 {
		n += 1 + sovTx(uint64(m.ExocoreChainIndex))
	}
	l = len(m.MetaInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *StakingAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetBasicInfo.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.StakingTotalAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *StakerAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalDepositAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.WithdrawableAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PendingUndelegationAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *StakerAllAssetsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllAssetsState) > 0 {
		for k, v := range m.AllAssetsState {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTx(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OperatorAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PendingUndelegationAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TotalShare.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.OperatorShare.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetExoCoreAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SetAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientChainAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ClientChainIndex != 0 {
		n += 1 + sovTx(uint64(m.ClientChainIndex))
	}
	l = len(m.StakerClientChainSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetExoCoreAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RegisterClientChainReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterClientChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RegisterAssetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *RegisterAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValueField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExocoreChainIndex", wireType)
			}
			m.ExocoreChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExocoreChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizationBlocks", wireType)
			}
			m.FinalizationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizationBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerZeroChainID", wireType)
			}
			m.LayerZeroChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LayerZeroChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLength", wireType)
			}
			m.AddressLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerZeroChainID", wireType)
			}
			m.LayerZeroChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LayerZeroChainID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExocoreChainIndex", wireType)
			}
			m.ExocoreChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExocoreChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetBasicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetBasicInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingTotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingTotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawableAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawableAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingUndelegationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingUndelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerAllAssetsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerAllAssetsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerAllAssetsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllAssetsState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllAssetsState == nil {
				m.AllAssetsState = make(map[string]*StakerAssetInfo)
			}
			var mapkey string
			var mapvalue *StakerAssetInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StakerAssetInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllAssetsState[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingUndelegationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingUndelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetExoCoreAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetExoCoreAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetExoCoreAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientChainAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientChainIndex", wireType)
			}
			m.ClientChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerClientChainSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerClientChainSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetExoCoreAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetExoCoreAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetExoCoreAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterClientChainReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterClientChainReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterClientChainReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ClientChainInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterClientChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterClientChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterClientChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAssetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAssetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAssetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &AssetInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
