
syntax = "proto3";
package exocore.delegation.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/delegation/types";

message ValueField {
  string amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message DelegatedSingleAssetInfo {
  string asset_id = 1 [(gogoproto.customname) = "AssetID"];
  string total_delegated_amount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  map<string, ValueField> per_operator_amounts = 3;
}

message ClientChainEarningAddrList {
  repeated ClientChainEarningAddrInfo earning_info_list = 1;
}

message ClientChainEarningAddrInfo {
  uint64 lz_client_chain_id = 1  [(gogoproto.customname) = "LzClientChainID"];
  string client_chain_earning_addr = 2;
}

message OperatorInfo {
  string earnings_addr = 1;
  string approve_addr = 2;
  string operator_meta_info = 3;
  ClientChainEarningAddrList client_chain_earnings_addr = 4;
}

message RegisterOperatorReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/OperatorInfo";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  OperatorInfo info = 2;
}

message DelegationApproveInfo {
  string signature = 1;
  string salt = 2;
}

message RegisterOperatorResponse{}

message DelegationIncOrDecInfo {
  option (cosmos.msg.v1.signer) = "fromAddress";
  option (amino.name) = "cosmos-sdk/MsgAddOrDecreaseDelegation";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  map<string, ValueField> per_operator_amounts = 2;
}

message MsgDelegation {
  DelegationIncOrDecInfo base_info = 1;
  DelegationApproveInfo approved_info = 2;
}

message UndelegationRecord {
  string staker_id = 1 [(gogoproto.customname) = "StakerID"];
  string asset_id = 2 [(gogoproto.customname) = "AssetID"];
  string operator_addr = 3
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string tx_hash = 4;
  bool is_pending = 5;
  uint64 block_number = 6;
  uint64 complete_block_number = 7;
  uint64 lz_tx_nonce = 8;
  string amount = 9
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string actual_completed_amount =10
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message UndelegationRecordKeyList {
  repeated string key_list = 1;
}

message DelegationResponse {}

message MsgUndelegation {
  DelegationIncOrDecInfo base_info = 1;
}
message UndelegationResponse{}

// Msg defines the delegation Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // RegisterOperator registers a new operator.
  rpc RegisterOperator(RegisterOperatorReq) returns (RegisterOperatorResponse);
  // DelegateAssetToOperator delegates asset to operator.
  rpc DelegateAssetToOperator(MsgDelegation) returns (DelegationResponse);
  // UndelegateAssetFromOperator undelegates asset from operator.
  rpc UndelegateAssetFromOperator(MsgUndelegation) returns (UndelegationResponse);
}




