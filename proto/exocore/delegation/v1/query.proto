syntax = "proto3";
package exocore.delegation.v1;

import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";
import "exocore/delegation/v1/tx.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/delegation/types";

message DelegationInfoReq {
  string staker_id = 1 [(gogoproto.customname) = "StakerID"];
  string asset_id = 2 [(gogoproto.customname) = "AssetID"];
}

message DelegationAmounts {
  string can_undelegation_amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string wait_undelegation_amount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryDelegationInfoResponse {
  string total_delegated_amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  map<string, DelegationAmounts > delegation_infos = 2;
}

message SingleDelegationInfoReq {
  string staker_id = 1 [(gogoproto.customname) = "StakerID"];
  string operator_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string asset_id = 3 [(gogoproto.customname) = "AssetID"];
}

message QueryOperatorInfoReq {
  string operator_addr = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Query is the service API for the delegation module.
service Query {
  // OperatorInfo queries the operator information.
  rpc QueryOperatorInfo(QueryOperatorInfoReq) returns(OperatorInfo){
    option (google.api.http).get = "/exocore/delegation/v1/GetOperatorInfo";
  }
  // DelegationInfo queries the delegation information for {stakerID, assetID}.
  rpc QueryDelegationInfo(DelegationInfoReq) returns (QueryDelegationInfoResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/exocore/delegation/v1/GetDelegationInfo";
  }
  // SingleDelegationInfo queries the single delegation information for 
  // {chain, staker, asset, operator}.
  rpc QuerySingleDelegationInfo(SingleDelegationInfoReq) returns(DelegationAmounts){
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/exocore/delegation/v1/QuerySingleDelegationInfo";
  }
}

