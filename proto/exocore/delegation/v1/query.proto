syntax = "proto3";
package exocore.delegation.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";
import "exocore/delegation/v1/tx.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/delegation/types";

message DelegationInfoReq {
  string stakerId = 1;
  string assetId = 2;
}

message DelegationAmounts{
  string CanUndelegationAmount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string WaitUndelegationAmount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message QueryDelegationInfoResponse{
  string TotalDelegatedAmount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  map<string, DelegationAmounts > delegationInfos = 2;
}

message SingleDelegationInfoReq {
  string stakerId = 1;
  string operatorAddr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string assetId = 3;
}


service Query {
  // Balance queries the balance of a single coin for a single account.
  rpc QueryDelegationInfo(DelegationInfoReq) returns (QueryDelegationInfoResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/exocore/delegation/v1/GetDelegationInfo";
  }

  rpc QuerySingleDelegationInfo(SingleDelegationInfoReq) returns(DelegationAmounts){
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/exocore/delegation/v1/QuerySingleDelegationInfo";
  }
}

