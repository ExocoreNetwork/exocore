syntax = "proto3";
package exocore.avs.v1;

import "cosmos_proto/cosmos.proto";
import "exocore/avs/v1/tx.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/avs/types";

// QueryAVSInfoReq is the request to query avs related information
message QueryAVSInfoReq {
  // avs_address is the address of avs
  string avs_address = 1 [(gogoproto.customname) = "AVSAddress"];
}

// QueryAVSInfoResponse is the response of avs related information
message QueryAVSInfoResponse {
  // basic information of avs
  AVSInfo info = 1;
}

// QueryAVSAddrByChainID is the request to query avs address by chain id
message QueryAVSAddrByChainIDReq {
  // chain_id is the chain id of the chain
  string chain_id = 1 [(gogoproto.customname) = "ChainID"];
}

// QueryAVSAddrByChainIDResponse is the response of avs address by chain id
message QueryAVSAddrByChainIDResponse {
  // avs_address is the hex address of avs
  string avs_address = 1 [(gogoproto.customname) = "AVSAddress"];
}

// QueryAVSTaskInfoReq is the request to obtain the task information.
message QueryAVSTaskInfoReq {
  // task_addr is the task contract address,its type should be a sdk.AccAddress
  string task_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // task_id is the task identifier
  string task_id = 2 ;
}

// QuerySubmitTaskResultReq is the request to obtain the task information.
message QuerySubmitTaskResultReq {
  // task_addr is the task contract address,its type should be a sdk.AccAddress
  string task_addr = 1 [(gogoproto.customname) = "TaskAddress"];
  // task_id is the task identifier
  string task_id = 2 ;
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 3
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryChallengeInfoReq is the request to obtain the task information.
message QueryChallengeInfoReq {
  // task_addr is the task contract address,its type should be a sdk.AccAddress
  string task_addr = 1 [(gogoproto.customname) = "TaskAddress"];
  // task_id is the task identifier
  string task_id = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 3
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
}


// QuerySubmitTaskResultResponse is the response of avs related information
message QuerySubmitTaskResultResponse {
  // info is the taskResult.
  TaskResultInfo info = 1;
}

// QueryChallengeInfoResponse is the response of avs related information
message QueryChallengeInfoResponse {
  // challenge_addr is the challenge address,its type should be a common.HexAddress.
  string challenge_addr = 1;
}
// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc QueryAVSInfo(QueryAVSInfoReq) returns (QueryAVSInfoResponse) {
    option (google.api.http).get = "/exocore/avs/QueryAVSInfo";
  }
  // TaskInfo queries the task information.
  rpc QueryAVSTaskInfo(QueryAVSTaskInfoReq) returns (TaskInfo) {
    option (google.api.http).get = "/exocore/avstask/v1/GetAVSTaskInfoReq";
  }
  // QueryAVSAddrByChainID queries the avs address by chain id
  rpc QueryAVSAddrByChainID(QueryAVSAddrByChainIDReq) returns (QueryAVSAddrByChainIDResponse) {
    option (google.api.http).get = "/exocore/avs/QueryAVSAddrByChainID";
  }
  // Parameters queries the parameters of the module.
  rpc QuerySubmitTaskResult(QuerySubmitTaskResultReq) returns (QuerySubmitTaskResultResponse) {
    option (google.api.http).get = "/exocore/avs/QuerySubmitTaskResult";
  }
  // Parameters queries the parameters of the module.
  rpc QueryChallengeInfo(QueryChallengeInfoReq) returns (QueryChallengeInfoResponse) {
    option (google.api.http).get = "/exocore/avs/QueryChallengeInfo";
  }
}