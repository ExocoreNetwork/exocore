syntax = "proto3";
package exocore.avs;
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/avs/types";

// AVSinfo represent the information of avs
message AVSInfo {
  // name of avs
  string name = 1;
  // address of avs
  string avs_address = 2;
  //  slash address of avs
  string slash_addr = 3;
  // the owner who has permission for avs
  repeated string avs_owner_address = 4;
  // asset_basic_info is all the basic asset information of the avs.
  repeated string asset_id = 5;
  // unbonding duration of avs.
  uint32 avs_unbonding_epochs = 6;
  // the operator minimum delegation amount.
  string minimum_delegation = 7
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  //avs epoch ,Subsequently  will be handled by the epochs module.
  EpochInfo avs_epoch = 8;
  // registered operator of avs
  repeated string operator_address = 9;
}
//  The information of OperatorBindingAVSInfo in opt-in avs
message OperatorBindingAVSInfo {
  // name of Operator
  string name = 1;
  // address of Operator
  string operator_address = 2;
  // publicKey of Operator
  string bls_public_key =3 ;
  // reg flag
  bool is_registered =4;
  // status of operator
  string status = 5;
}

// EpochInfo defines the message interface containing the relevant informations aboutt
// an epoch.
message EpochInfo {
  // identifier of the epoch
  string identifier = 1;
  // start_time of the epoch
  google.protobuf.Timestamp start_time = 2
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""];
  // duration of the epoch
  google.protobuf.Duration duration = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "duration,omitempty",
    (gogoproto.moretags) = "yaml:\"duration\""
  ];
  // current_epoch is the integer identifier of the epoch
  int64 current_epoch = 4;
  // current_epoch_start_time defines the timestamp of the start of the epoch
  google.protobuf.Timestamp current_epoch_start_time = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"current_epoch_start_time\""
  ];
  // epoch_counting_started reflects if the counting for the epoch has started
  bool epoch_counting_started = 6;
  // current_epoch_start_height of the epoch
  int64 current_epoch_start_height = 7;
}
// RegisterAVSReq is requst to register avs
message RegisterAVSReq {
  // from_address is the source
  option (cosmos.msg.v1.signer) = "FromAddress";
  // from_address is the source
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs information
  AVSInfo info = 2;
}

// RegisterAVSResponse is the response for register avs
message RegisterAVSResponse {
  // from_address is the source
  option (cosmos.msg.v1.signer) = "FromAddress";
  // from_address is the source
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs information
  AVSInfo info = 2;
}

// DeRegisterAVSReq is requst to deregister avs
message DeRegisterAVSReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  // from_address is the source address
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs information
  AVSInfo info = 2;
}

// DeRegisterAVSResponse is requst to register avs
message DeRegisterAVSResponse {
  // from_address is the source address
  option (cosmos.msg.v1.signer) = "FromAddress";
  // from_address is the source address
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs information
  AVSInfo info = 2;
}

// Msg defines the AVS related Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // RegisterAVS registers a new AVS with corresponding operator.
  rpc RegisterAVS (RegisterAVSReq) returns (RegisterAVSResponse);
  // DelegateAssetToOperator delegates asset to operator.
  rpc DeRegisterAVS (DeRegisterAVSReq) returns (DeRegisterAVSResponse);
}