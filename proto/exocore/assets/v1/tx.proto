syntax = "proto3";
package exocore.assets.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/assets/types";

// ValueField is a field that holds a value of sdk.Int type.
message ValueField {
  // amount is the amount of the asset, as an sdk.Int.
  string amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// ClientChainInfo defines the client chain information.
message ClientChainInfo {
  // name of the client chain, like "Ethereum".
  string name = 1;
  // meta_info about the client chain, like "Ethereum blockchain".
  string meta_info = 2;
  // chain_id of the client chain. Not necessarily the EVM chain id.
  uint64 chain_id = 3;
  // exocore_chain_index is the index of the client chain within the exosystem.
  uint64 exocore_chain_index = 4;
  // finalization_blocks is the number of blocks to wait for finalization.
  uint64 finalization_blocks = 5;
  // layer_zero_chain_id is the chain id of the client chain, according to L0.
  // https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids
  uint64 layer_zero_chain_id = 6 [(gogoproto.customname) = "LayerZeroChainID"];
  // signature_type is the type of signature used to sign the client chain address.
  string signature_type = 7;
  // client_chain_addr is the length of addresses on the client chain.
  uint32 address_length = 8;
}

// AppChainInfo is used to store information related to the subscriber app chains we validate.
// The information stored within this module consists only of the chain's identifiers.
// The validation-related information is stored in the coordinator module.
message AppChainInfo {
  // name of the chain, for example "ethereum"
  string name = 1;
  // meta_info is at Exocore's discretion to deter,ome
  string meta_info = 2;
  // chain_id is used as the primary key
  string chain_id = 3;
  // exocore_chain_index is the index of the chain in exocore, so far unused
  uint64 exocore_chain_index = 4;
}

// AssetInfo defines the information for an asset to be used in staking.
message AssetInfo {
  // name of the asset, like "Tether USD"
  string name = 1;
  // symbol of the asset, like "USDT"
  string symbol = 2;
  // address of the asset on the client chain
  string address = 3;
  // decimals used in the asset, typically 6 or 18.
  uint32 decimals = 4;
  // total_supply of the asset, to be used in checks.
  string total_supply = 5
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // layer_zero_chain_id is the chain id of the asset, according to L0.
  uint64 layer_zero_chain_id = 6 [(gogoproto.customname) = "LayerZeroChainID"];
  // exocore_chain_index is the index of the client chain within the exosystem.
  uint64 exocore_chain_index = 7;
  // meta_info about the asset, like "Tether USD on Ethereum blockchain".
  string meta_info = 8;
}

// StakingAssetInfo defines the information for an asset to be used in staking.
message StakingAssetInfo {
  // asset_basic_info is the basic information of the asset.
  AssetInfo asset_basic_info = 1;
  // staking_total_amount is the total amount of the asset staked.
  string staking_total_amount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// StakerSingleAssetInfo defines the information for a single asset.
// The type include three states:
// staker's deposited, withdrawable, and currently unbonding amount.
message StakerSingleAssetInfo {
  // total_deposit_amount is the total amount of the asset deposited.
  string total_deposit_amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // withdrawable_amount is the amount that can be withdrawn.
  string withdrawable_amount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // wait_unbonding_amount is the amount that is waiting for undelegation.
  string wait_unbonding_amount = 3
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// StakerAllAssetsInfo defines the information for all assets of a staker.
// It is indexed by the asset_id.
message StakerAllAssetsInfo {
  // all_assets_state is the state of all assets of the staker.
  map<string, StakerSingleAssetInfo> all_assets_state = 1;
}

// OperatorSingleAssetInfo defines the information for a single asset,
// for an operator. It is also overloaded like StakerSingleAssetInfo.
message OperatorSingleAssetInfo {
  // total_amount is the total amount of the asset deposited.
  string total_amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // operator_own_amount is the amount that the operator owns.
  //todo: the field is used to mark operator's own assets and is not temporarily used now
  string operator_own_amount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // wait_unbonding_amount is the amount that is waiting for unbonding.
  string wait_unbonding_amount = 3
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // operator_unbonding_amount is the amount that is owned by operator itself and waiting for unbonding.
  string operator_unbonding_amount = 4
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  // operator_unbondable_amount_after_slash is the amount that is owned by operator itself
  // and can be unbonded after slash.
  string operator_unbondable_amount_after_slash = 5
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// OperatorAllAssetsInfo defines the information for all assets of an operator,
// indexed by the asset_id.
message OperatorAllAssetsInfo {
  // all_assets_state is the state of all assets of the operator.
  map<string, OperatorSingleAssetInfo> all_assets_state = 1;
}

// MsgSetExoCoreAddr defines the MsgSetExoCoreAddr message used to set the
// exocore address of the staker.
message MsgSetExoCoreAddr {
  option (cosmos.msg.v1.signer) = "fromAddress";
  option (amino.name) = "exocore/MsgSetExoCoreAddr";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the staker.
  string   from_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // set_address is the address to be set.
  string   set_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // client_chain_addr is the address of the client chain.
  string   client_chain_addr = 3;
  // client_chain_index is the index of the client chain within the exosystem.
  uint64   client_chain_index = 4;
  // staker_client_chain_signature is the signature of the staker's address
  // on the client chain.
  string   staker_client_chain_signature = 5;
}

// MsgSetExoCoreAddrResponse defines the MsgSetExoCoreAddrResponse message used to return the
// response of the MsgSetExoCoreAddr message.
message MsgSetExoCoreAddrResponse {}

// RegisterClientChainReq is a request to register a client chain.
message RegisterClientChainReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/RegisterClientChain";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the message sender.
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // info is the information of the client chain.
  ClientChainInfo info = 2;
}

// RegisterClientChainResponse is the response to the RegisterClientChainReq message.
message RegisterClientChainResponse {}

// RegisterAssetReq is a request to register an asset on the client chain within
// Exocore.
message RegisterAssetReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/RegisterAsset";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the message sender.
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // info is the information of the asset.
  AssetInfo info = 2;
}

// RegisterAssetResponse is the response to the RegisterAssetReq message.
message RegisterAssetResponse {}

// Msg defines the assets Msg service
service Msg {
  option (cosmos.msg.v1.service) = true;
  // SetStakerExoCoreAddr sets the exocore address of the staker
  rpc SetStakerExoCoreAddr(MsgSetExoCoreAddr) returns (MsgSetExoCoreAddrResponse);
  // RegisterClientChain registers the client chain
  rpc RegisterClientChain(RegisterClientChainReq) returns (RegisterClientChainResponse);
  // RegisterAsset registers the asset on the client chain
  rpc RegisterAsset(RegisterAssetReq) returns (RegisterAssetResponse);
}
