syntax = "proto3";
package exocore.restaking_assets_manage.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/restaking_assets_manage/types";

message ValueField {
  string Amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message ClientChainInfo {
  string ChainName = 1;
  string ChainMetaInfo = 2;
  uint64 OriginChainId = 3;
  uint64 ExoCoreChainIndex = 4;
  uint64 FinalityNeedBlockDelay = 5;
  uint64 LayerZeroChainId = 6;
  string SignatureType = 7;
  uint32 AddressLength = 8;
}

// AppChainInfo is used to store information related to the subscriber app chains we validate.
// The information stored within this module consists only of the chain's identifiers.
// The validation-related information is stored in the coordinator module.
message AppChainInfo {
  // the chain name, for example "ethereum"
  string ChainName = 1;
  // any other meta info that is at Exocore's discretion to deter,ome
  string ChainMetaInfo = 2;
  // the chain id which is used as the primary key
  string ChainId = 3;
  // the index of the chain in exocore, so far unused
  uint64 ExocoreChainIndex = 4;
}

message ClientChainTokenInfo {
  string Name = 1;
  string Symbol = 2;
  string Address = 3;
  uint32 Decimals = 4;
  string TotalSupply = 5
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  uint64 LayerZeroChainId = 6;
  uint64 ExoCoreChainIndex = 7;
  string AssetMetaInfo = 8;
}

message StakingAssetInfo {
  ClientChainTokenInfo AssetBasicInfo = 1;
  string StakingTotalAmount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message StakerSingleAssetOrChangeInfo {
  string TotalDepositAmountOrWantChangeValue = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string CanWithdrawAmountOrWantChangeValue = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string WaitUnbondingAmountOrWantChangeValue = 3
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message StakerAllAssetsInfo {
  map<string, StakerSingleAssetOrChangeInfo> allAssetsState = 1;
}

message OperatorSingleAssetOrChangeInfo{
  string TotalAmountOrWantChangeValue = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  //todo: the field is used to mark operator's own assets and is not temporarily used now
  string OperatorOwnAmountOrWantChangeValue = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string WaitUnbondingAmountOrWantChangeValue = 3
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string OperatorOwnWaitUnbondingAmount =4
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  string OperatorUnbondableAmountAfterSlash =5
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message OperatorAllAssetsInfo {
  map<string, OperatorSingleAssetOrChangeInfo> allAssetsState = 1;
}

message MsgSetExoCoreAddr {
  option (cosmos.msg.v1.signer) = "fromAddress";
  option (amino.name) = "exocore/MsgSetExoCoreAddr";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string   fromAddress = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   setAddress = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   clientChainAddr = 3;
  uint64   clientChainIndex = 4;
  string   StakerClientChainSignature = 5;
}
message MsgSetExoCoreAddrResponse {}

service Msg {

  option (cosmos.msg.v1.service) = true;

  rpc SetStakerExoCoreAddr(MsgSetExoCoreAddr) returns (MsgSetExoCoreAddrResponse);

}