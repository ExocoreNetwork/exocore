syntax = "proto3";
package exocore.restaking_assets_manage.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/restaking_assets_manage/types";

message ClientChainInfo {
  string name = 1;
  string meta_info = 2;
  uint64 chain_id = 3;
  uint64 exo_core_chain_index = 4;
  uint64 finalization_blocks = 5;
  uint64 layer_zero_chain_id = 6 [(gogoproto.customname) = "LayerZeroChainID"];
  string signature_type = 7;
  uint32 address_length = 8;
}

message AssetInfo {
  string name = 1;
  string symbol = 2;
  string address = 3;
  uint32 decimals = 4;
  string total_supply = 5
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  uint64 layer_zero_chain_id = 6 [(gogoproto.customname) = "LayerZeroChainID"];
  uint64 exo_core_chain_index = 7;
  string meta_info = 8;
}

message StakingAssetInfo {
  AssetInfo asset_basic_info = 1;
  string staking_total_amount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message StakerSingleAssetOrChangeInfo {
  string total_deposit_amount_or_want_change_value = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string can_withdraw_amount_or_want_change_value = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string wait_undelegation_amount_or_want_change_value = 3
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message StakerAllAssetsInfo {
  map<string, StakerSingleAssetOrChangeInfo> all_assets_state = 1;
}

message OperatorSingleAssetOrChangeInfo{
  string total_amount_or_want_change_value = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  //todo: the field is used to mark operator's own assets and is not temporarily used now
  string operator_own_amount_or_want_change_value = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string wait_undelegation_amount_or_want_change_value = 3
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message OperatorAllAssetsInfo {
  map<string, OperatorSingleAssetOrChangeInfo> all_assets_state = 1;
}

message MsgSetExoCoreAddr {
  option (cosmos.msg.v1.signer) = "fromAddress";
  option (amino.name) = "exocore/MsgSetExoCoreAddr";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string   from_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   set_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string   client_chain_addr = 3;
  uint64   client_chain_index = 4;
  string   staker_client_chain_signature = 5;
}
message MsgSetExoCoreAddrResponse {}

message RegisterClientChainReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/RegisterClientChain";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  ClientChainInfo info = 2;
}
message RegisterClientChainResponse {}

message RegisterAssetReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/RegisterAsset";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  AssetInfo info = 2;
}
message RegisterAssetResponse {}

// Msg defines the restaking_assets_manage Msg service
service Msg {

  option (cosmos.msg.v1.service) = true;

  // SetStakerExoCoreAddr sets the exocore address of the staker
  rpc SetStakerExoCoreAddr(MsgSetExoCoreAddr) returns (MsgSetExoCoreAddrResponse);
  // RegisterClientChain registers the client chain
  rpc RegisterClientChain(RegisterClientChainReq) returns (RegisterClientChainResponse);
  // RegisterAsset registers the asset on the client chain
  rpc RegisterAsset(RegisterAssetReq) returns (RegisterAssetResponse);
}
