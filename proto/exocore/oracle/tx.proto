syntax = "proto3";

package exocore.oracle;

import "exocore/oracle/price.proto";
import "exocore/oracle/params.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
option go_package = "github.com/ExocoreNetwork/exocore/x/oracle/types";

// Msg defines the Msg service.
service Msg {
// CreatePrice creates price for a new oracle round
  rpc CreatePrice (MsgCreatePrice) returns (MsgCreatePriceResponse);
// UpdateParams update params value
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}
message MsgCreatePrice {
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.ValidatorAddressString"];
  //refer to id from Params.TokenFeeders, 0 is reserved, invalid to use
  uint64 feeder_id = 2 [(gogoproto.customname) = "FeederID"];
  repeated PriceWithSource prices = 3;
  //on which block commit does this message be built on
  uint64 based_block = 4;
  int32 nonce = 5;
}

message MsgCreatePriceResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "cosmos-sdk/x/oracle/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // params defines the x/staking parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
};

message MsgUpdateParamsResponse {};
