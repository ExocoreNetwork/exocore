syntax = "proto3";
package exocore.avstask.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/avstask/types";

// TaskContractInfo is the task info.
message TaskContractInfo {
  // contract address of avstask
  string task_contract_address = 1;
  // name of task
  string name = 2;
  // meta_info of task
  string meta_info = 3;
  // status of task
  string status = 4;
  // source_code of task
  string source_code = 5;
}

// RegisterAVSTaskReq is the request to register a new task for avs.
message RegisterAVSTaskReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/TaskContractInfo";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the avs (sdk.AccAddress).
  string from_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // info is the task info.
  TaskContractInfo task = 2;
}

// RegisterAVSTaskResponse is the response for register avs task
message RegisterAVSTaskResponse {}

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // RegisterAVSTask registers a new task.
  rpc RegisterAVSTask(RegisterAVSTaskReq) returns (RegisterAVSTaskResponse);
}