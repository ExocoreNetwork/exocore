syntax = "proto3";

package exocore.appchain.common.v1;

import "cosmos/staking/v1beta1/staking.proto";
import "gogoproto/gogo.proto";
import "tendermint/abci/types.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/appchain/common/types";

// This file containts all of the information that is sent over the wire by either
// the coordinator or each of the subcribers.

message HandshakeMetadata {
  // This address is where the subscriber chain will send the fees proportionally
  string coordinator_fee_pool_addr = 1;
  string version = 2;
}

// // This packet is sent from the subscriber chain to the coordinator chain
// // to request the slashing of a validator as a result of an infraction
// // committed on the subscriber chain.
// message SlashPacketData {
//   tendermint.abci.Validator validator = 1 [
//     (gogoproto.nullable) = false,
//     (gogoproto.moretags) = "yaml:\"validator\""
//   ];
//   // map to the infraction block height on the coordinator
//   uint64 valset_update_id = 2;
//   // tell if the slashing is for a downtime or a double-signing infraction
//   cosmos.staking.v1beta1.Infraction infraction = 3;
// }

// // This packet is sent from subsciber to coordinator to indicate that the validator set change
// // with the specified id has matured on the subscriber chain. This is used to know when to
// // prune some information on the coordinator.
// message VscMaturedPacketData {
//   uint64 valset_update_id = 1;
// }

// // Type of SubscriberPacketData
// enum SubscriberPacketDataType {
//   option (gogoproto.goproto_enum_prefix) = false;

//   SUBSCRIBER_PACKET_TYPE_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "UnspecifiedPacket" ];
//   SUBSCRIBER_PACKET_TYPE_SLASH = 1 [ (gogoproto.enumvalue_customname) = "SlashPacket" ];
//   SUBSCRIBER_PACKET_TYPE_VSC_MATURED = 2 [ (gogoproto.enumvalue_customname) = "VscMaturedPacket" ];;
// }

// // Overall packet
// message SubscriberPacketData {
//   SubscriberPacketDataType type = 1;

//   oneof data {
//     SlashPacketData slashPacketData = 2;
//     VscMaturedPacketData vscMaturedPacketData = 3;
//   }
// }

// ValidatorSetChangePacketData is sent from the coordinator chain to the subscriber chain
// containing the new validator set and the id of the validator set change.
message ValidatorSetChangePacketData {
  // validator_updates is the edits to the existing validator set
  repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"validator_updates\""
  ];
  // valset_update_id is the id of the validator set change
  uint64 valset_update_id = 2 [(gogoproto.customname) = "ValsetUpdateID"];
  // slash_acks is the list of consensus addresses slashed on the coordinator chain,
  // in response to such requests from the subscriber chain.
  repeated string slash_acks = 3;
}