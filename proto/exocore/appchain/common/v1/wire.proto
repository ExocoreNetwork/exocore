syntax = "proto3";

package exocore.appchain.common.v1;

import "cosmos/staking/v1beta1/staking.proto";
import "gogoproto/gogo.proto";
import "tendermint/abci/types.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/appchain/common/types";

// This file containts all of the information that is sent over the wire by either
// the coordinator or each of the subcribers.

message HandshakeMetadata {
  // This address is where the subscriber chain will send the fees proportionally
  string coordinator_fee_pool_addr = 1;
  string version = 2;
}

// SlashPacketData  is sent from the subscriber chain to the coordinator chain
// to request the slashing of a validator as a result of an infraction committed 
// on the subscriber chain.
message SlashPacketData {
  // validator is the validator to be slashed
  tendermint.abci.Validator validator = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"validator\""
  ];
  // valset_update_id is the id of the validator set change during which
  // the infraction was committed
  uint64 valset_update_id = 2 [ (gogoproto.customname) = "ValsetUpdateID" ];
  // infraction refers to the type of infraction committed
  cosmos.staking.v1beta1.Infraction infraction = 3;
}

// VscMaturedPacketData is sent from the subscriber chain to the coordinator chain
// to indicate that a VSC has matured and unbondings associated with that VSC
// can now be released.
message VscMaturedPacketData {
  // valset_update_id is the id of the validator set change to mature.
  uint64 valset_update_id = 1 [ (gogoproto.customname) = "ValsetUpdateID" ];
}

// SubscriberPacketData is the enum to identify the type of packet sent.
enum SubscriberPacketDataType {
  option (gogoproto.goproto_enum_prefix) = false;
  // SUBSCRIBER_PACKET_TYPE_UNSPECIFIED is the default value
  SUBSCRIBER_PACKET_TYPE_UNSPECIFIED = 0 [ (gogoproto.enumvalue_customname) = "UnspecifiedPacket" ];
  // SUBSCRIBER_PACKET_TYPE_SLASH is the type of packet sent when a subscriber
  // chain wants to request the slashing of a validator on the coordinator chain.
  SUBSCRIBER_PACKET_TYPE_SLASH = 1 [ (gogoproto.enumvalue_customname) = "SlashPacket" ];
  // SUBSCRIBER_PACKET_TYPE_VSC_MATURED is the type of packet sent when a subscriber
  // chain wants to indicate that a VSC has matured and unbondings associated with
  // that VSC can now be released.
  SUBSCRIBER_PACKET_TYPE_VSC_MATURED = 2 [ (gogoproto.enumvalue_customname) = "VscMaturedPacket" ];;
}

// SubscriberPacketData is a wrapped message that contains the type of packet
// and the data associated with that packet.
message SubscriberPacketData {
  // type is the type of packet sent
  SubscriberPacketDataType type = 1;
  // data is the data associated with the packet
  oneof data {
    // slash_packet_data is the data associated with a SlashPacket
    SlashPacketData slash_packet_data = 2;
    // vsc_matured_packet_data is the data associated with a VscMaturedPacket
    VscMaturedPacketData vsc_matured_packet_data = 3;
  }
}

// ValidatorSetChangePacketData is sent from the coordinator chain to the subscriber chain
// containing the new validator set and the id of the validator set change.
message ValidatorSetChangePacketData {
  // validator_updates is the edits to the existing validator set
  repeated .tendermint.abci.ValidatorUpdate validator_updates = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"validator_updates\""
  ];
  // valset_update_id is the id of the validator set change
  uint64 valset_update_id = 2 [(gogoproto.customname) = "ValsetUpdateID"];
  // slash_acks is the list of consensus addresses slashed on the coordinator chain,
  // in response to such requests from the subscriber chain.
  repeated string slash_acks = 3;
}