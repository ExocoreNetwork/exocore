syntax = "proto3";

package exocore.appchain.common.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "ibc/lightclients/tendermint/v1/tendermint.proto";
import "tendermint/abci/types.proto";
import "amino/amino.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/appchain/common/types";

// This file contains all of the types shared within the coordinator module
// and each of the subscriber modules. These types (or parts thereof) are stored
// within the module states but not sent over the wire.

// Params defines the parameters for the subscriber module. TODO(mm): These must be deny listed
// for edits via governance on the subscriber chain to prevent the subcriber participants
// from unilaterally alterting parameters (like reward %) for their own benefit.
message SubscriberParams {
    // Reward related params

    // coordinator_fee_pool_addr_str is the address of the fee pool on the coordinator.
    string coordinator_fee_pool_addr_str = 1;
    // distribution_transmission_channel is the channel name used to transmit
    // the rewards from the subscriber to the coordinator. It is used in the event
    // that a channel between coordinator and subscriber exists prior to the
    // provision of security from Exocore to the appchain. Until a changeover
    // process is implemented, it is currently unused. (TODO)
    string distribution_transmission_channel = 2;
    // blocks_per_distribution_transmission is the number of blocks after which the minted
    // reward is sent to the coordinator.
    int64 blocks_per_distribution_transmission = 3;
    // subscriber_redistribution_fraction is the %age of the rewards that the subscriber 
    // should send out. For example, "0.75" means 75% of the rewards are sent out.
    string subscriber_redistribution_fraction = 4;
    // reward_denom is the denomination of the reward. For now, this is not
    // distributed but rather simply tracked.
    string reward_denom = 5;

    // IBC related params

    // ibc_timeout_period is the timeout period used for IBC packets (excluding transfers)
    // Such a timeout is enforced by IBC itself and not by either of the chains.
    google.protobuf.Duration ibc_timeout_period = 6
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true, 
        (gogoproto.customname) = "IBCTimeoutPeriod" ];
    // transfer_timeout_period is the timeout period used for IBC transfers.
    google.protobuf.Duration transfer_timeout_period = 7
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];

    // Params relevant to chain operation
    // unbonding_duration is the subscriber chain's unbonding duration. it should be less
    // than the coordinator chain's unbonding duration.
    // for now, we don't support the subscriber chain using x/epochs as a unit of time; however,
    // when we do, this duration should be the best approximation of that mechanism, with
    // 1 epoch added to account for the current epoch. (TODO)
    google.protobuf.Duration unbonding_period = 8
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];
    // HistoricalEntries is the number of historical entries to persist in the
    // historical stats module. It is the same as that defined in the staking module,
    // however, we use the signed version so that negative values can be caught.
    int64 historical_entries = 9;

    // These are params related to the slashing module. Requests are received
    // from the subscriber and slashed according to these params. Since signing
    // can only be tracked by the subscriber chain, we do not have any parameters
    // here that can be used to configure the signing window and the number of
    // blocks that should be signed in it. Conversely, the subscriber chain
    // does not do anything with these parameters (even though they are shared)
    // since slashing is done by the coordinator chain.
    // Operators should refer to the genesis file of the subscriber chain to
    // check their comfort with these values before onboarding the chain.

    // slash_fraction_downtime is the fraction of the stake that is slashed when a validator is found to be offline.
    string slash_fraction_downtime = 15;
    // downtime_jail_duration is the duration of the jail period for a validator
    // after they have been found to be offline for too long.
    google.protobuf.Duration downtime_jail_duration = 16
      [(gogoproto.nullable) = false, (amino.dont_omitempty) = true, (gogoproto.stdduration) = true];
    // slash_fraction_double_sign is the fraction of the stake that is slashed when a validator is found to have double signed.
    string slash_fraction_double_sign = 17;
}

// SubscriberGenesisState is the genesis state of a subscriber at the time of
// it being provisioned by Exocore, as stored in the coordinator module.
message SubscriberGenesisState {
  // params is the parameters of the subscriber module, as generated.
  SubscriberParams params = 1 [(gogoproto.nullable) = false];
  // coordinator is the coordinator information for the subscriber.
  CoordinatorInfo coordinator = 2 [ (gogoproto.nullable) = false ];
}

// CoordinatorInfo is the information about the coordinator chain that is stored within the subscriber chain's subscriber module.
message CoordinatorInfo {
  // client_state is the client state of the coordinator chain.
  ibc.lightclients.tendermint.v1.ClientState client_state = 1;
  // consensus_state is the consensus state of the coordinator chain.
  ibc.lightclients.tendermint.v1.ConsensusState consensus_state = 2;
  // initial_val_set is the initial validator set of the coordinator chain.
  repeated .tendermint.abci.ValidatorUpdate initial_val_set = 3
      [ (gogoproto.nullable) = false ];
}