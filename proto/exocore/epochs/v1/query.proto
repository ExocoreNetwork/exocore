syntax = "proto3";

package exocore.epochs.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "exocore/epochs/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/epochs/types";

// Query defines the gRPC querier service.
service Query {
  // EpochInfos provide a list of currently running epochs.
  rpc EpochInfos(QueryEpochsInfoRequest) returns (QueryEpochsInfoResponse) {
    option (google.api.http).get = "/exocore/dogfood/v1/epochs";
  }
  // CurrentEpoch provide the current epoch for the specified identifier.
  rpc CurrentEpoch(QueryCurrentEpochRequest) returns (QueryCurrentEpochResponse) {
    option (google.api.http).get = "/exocore/dogfood/v1/current_epoch";
  }
}

// QueryEpochsInfoRequest is the request type for the Query/EpochInfos RPC
// method.
message QueryEpochsInfoRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryEpochsInfoResponse is the response type for the Query/EpochInfos RPC
// method.
message QueryEpochsInfoResponse {
  // epochs is a slice of all EpochInfos returned by the query.
  repeated EpochInfo epochs = 1 [(gogoproto.nullable) = false];
  // block_time is the block time of the query block ctx.
  google.protobuf.Timestamp block_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  // pagination defines the pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// QueryCurrentEpochRequest is the request type for the Query/EpochInfos RPC
// method.
message QueryCurrentEpochRequest {
  // identifier of the epoch for which the current number is requested.
  string identifier = 1;
}

// QueryCurrentEpochResponse is the response type for the Query/EpochInfos RPC
// method.
message QueryCurrentEpochResponse {
  // current_epoch is the number of the current epoch
  int64 current_epoch = 1;
}
