syntax = "proto3";
package exocore.operator.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "exocore/operator/v1/tx.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "tendermint/crypto/keys.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/operator/types";

// QueryOperatorInfoReq is the request to obtain the operator information.
message GetOperatorInfoReq {
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryAllOperatorsRequest is the request to obtain all operators.
message QueryAllOperatorsRequest {
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllOperatorsResponse is the response containing all operator account addresses.
message QueryAllOperatorsResponse {
  // operators is a list of all operators.
  repeated string operator_acc_addrs = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOperatorConsKeyRequest is a request to obtain the consensus public key of the operator.
message QueryOperatorConsKeyRequest {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // chain is the id of the chain served by the operator. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 2;
}

// QueryOperatorConsKeyResponse is the response for QueryOperatorConsKeyRequest.
message QueryOperatorConsKeyResponse {
  // public_key is the consensus public key of the operator.
  tendermint.crypto.PublicKey public_key = 1 [ (gogoproto.nullable) = false ];
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 2;
}

// QueryOperatorConsAddressRequest is the request to obtain the consensus address of the operator
// for a specific chain ID.
message QueryOperatorConsAddressRequest {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // chain is the id of the chain served by the operator. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 2;
}

// QueryOperatorConsAddressResponse is the response for QueryOperatorConsAddressRequest.
message QueryOperatorConsAddressResponse {
  // cons_addr is the consensus address corresponding to the consensus public key
  // currently in use by the operator.
  string cons_addr = 1;
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 2;
}

// QueryAllOperatorConsKeysByChainIDRequest is the request to obtain all operator addresses
// and consensus keys for a specific chain ID, with pagination.
message QueryAllOperatorConsKeysByChainIDRequest {
  // chain for which the cons keys are being queried. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 1;
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllOperatorConsKeysByChainIDResponse is the response that includes a list of all operators
// and their consensus keys for a specified chain ID.
message QueryAllOperatorConsKeysByChainIDResponse {
  // operator_cons_keys is a list of operator addresses and their consensus public keys.
  repeated OperatorConsKeyPair operator_cons_keys = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// OperatorConsKeyPair holds the operator address and the consensus public key currently in
// use by the operator.
message OperatorConsKeyPair {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // public_key is the consensus public key of the operator.
  tendermint.crypto.PublicKey public_key = 2;
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 3;
}

// QueryAllOperatorConsAddrsByChainIDRequest is the request to obtain all operator addresses
// and consensus addresses for a specific chain ID, with pagination.
message QueryAllOperatorConsAddrsByChainIDRequest {
  // chain for which the cons addrs are being queried. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 1;
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllOperatorConsAddrsByChainIDResponse is the response that includes a list of all operators
// and their consensus addresses for a specified chain ID.
message QueryAllOperatorConsAddrsByChainIDResponse {
  // operator_cons_addrs is a list of operator account addresses and the consensus addresses.
  repeated OperatorConsAddrPair operator_cons_addrs = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// OperatorConsAddrPair holds the operator address and the corresponding consensus address.
message OperatorConsAddrPair {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // cons_addr is the consensus address corresponding to the consensus public key
  // currently in use by the operator.
  string cons_addr = 2;
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 3;
}

// Query defines the gRPC querier service.
service Query {
  // QueryOperatorInfo queries the operator information.
  rpc QueryOperatorInfo(GetOperatorInfoReq) returns (OperatorInfo) {
    option (google.api.http).get = "/exocore/operator/v1/operator_info/{operator_addr}";
  }

  // QueryAllOperators queries all operators.
  rpc QueryAllOperators(QueryAllOperatorsRequest) returns (QueryAllOperatorsResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operators"
    };
  }

  // QueryOperatorConsKeyForChainID queries the consensus public key for the operator
  rpc QueryOperatorConsKeyForChainID(QueryOperatorConsKeyRequest) returns (
    QueryOperatorConsKeyResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/operator_cons_key/{operator_acc_addr}/{chain}"
    };
  }

  // QueryOperatorConsAddressForChainID queries the consensus address for the operator.
  rpc QueryOperatorConsAddressForChainID(QueryOperatorConsAddressRequest) returns (
    QueryOperatorConsAddressResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/operator_cons_addr/{operator_acc_addr}/{chain}"
    };
  }

  // QueryAllOperatorConsKeysByChainID queries all operators and their consensus public keys
  // for a specific chain ID
  rpc QueryAllOperatorConsKeysByChainID(QueryAllOperatorConsKeysByChainIDRequest) returns (
    QueryAllOperatorConsKeysByChainIDResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operator_cons_keys/{chain}"
    };
  }

  // QueryAllOperatorConsAddrsByChainID queries all operators and their consensus addresses
  // for a specific chain ID
  rpc QueryAllOperatorConsAddrsByChainID(QueryAllOperatorConsAddrsByChainIDRequest) returns (
    QueryAllOperatorConsAddrsByChainIDResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operator_cons_addrs/{chain}"
    };
  }
}