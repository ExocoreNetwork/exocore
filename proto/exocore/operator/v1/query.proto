syntax = "proto3";
package exocore.operator.v1;

import "cosmos_proto/cosmos.proto";
import "exocore/operator/v1/tx.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "tendermint/crypto/keys.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/operator/types";

// QueryOperatorInfoReq is the request to obtain the operator information.
message GetOperatorInfoReq {
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryOperatorUSDValueRequest is the request to obtain the USD value for operator.
message QueryOperatorUSDValueRequest {
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs_address is the AVS address opted-in by the operator
  string avs_address = 2
  [(gogoproto.customname) = "AVSAddress"];
}

// QueryAVSUSDValueRequest is the request to obtain the USD value for AVS.
message QueryAVSUSDValueRequest {
  // avs_address is the AVS address opted-in by the operator
  string avs_address = 1
  [(gogoproto.customname) = "AVSAddress"];
}

// QueryOperatorSlashInfoRequest is the request to obtain the slash information for the specified
// operator and AVS
message QueryOperatorSlashInfoRequest {
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs_address is the AVS address opted-in by the operator
  string avs_address = 2
  [(gogoproto.customname) = "AVSAddress"];
}

// QueryOperatorSlashInfoResponse is the response for GetOperatorSlashInfoRequest
message QueryOperatorSlashInfoResponse{
  // AllSlashInfo the key is slashID, the value is the specified slash information
  // It's okay to use a map here, because it won't be used to store state, only in
  // the response to an RPC call
  map<string, OperatorSlashInfo> all_slash_info = 1;
}

// QueryOperatorConsKeyRequest is the request to obtain the consensus public key of the operator
message QueryOperatorConsKeyRequest {
  // addr is the ACC address of operator
  string addr = 1;
  // chain_id is the id of the chain served by the operator
  string chain_id = 2;
}

// QueryOperatorConsKeyResponse is the response for QueryOperatorConsKeyRequest
message QueryOperatorConsKeyResponse {
  // public_key is the consensus public key of the operator
  tendermint.crypto.PublicKey public_key = 1 [(gogoproto.nullable) = false];
}

// Query defines the gRPC querier service.
service Query {
  // OperatorInfo queries the operator information.
  rpc GetOperatorInfo(GetOperatorInfoReq) returns(OperatorInfo){
    option (google.api.http).get = "/exocore/operator/v1/GetOperatorInfo";
  }

  // QueryOperatorConsKeyForChainID queries the consensus public key for the operator
  rpc QueryOperatorConsKeyForChainID(QueryOperatorConsKeyRequest) returns (QueryOperatorConsKeyResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/GetOperatorConsKey/{addr}/{chain_id}"
    };
  }

  // QueryOperatorUSDValue queries the opted-in USD value for the operator
  rpc QueryOperatorUSDValue(QueryOperatorUSDValueRequest) returns(DecValueField){
    option (google.api.http).get = "/exocore/operator/v1/QueryOperatorUSDValue";
  }

  // QueryAVSUSDValue queries the USD value for the AVS
  rpc QueryAVSUSDValue(QueryAVSUSDValueRequest) returns(DecValueField){
    option (google.api.http).get = "/exocore/operator/v1/QueryAVSUSDValue";
  }

  // QueryOperatorSlashInfo queries the slash information for the specified operator and AVS
  rpc QueryOperatorSlashInfo(QueryOperatorSlashInfoRequest) returns(QueryOperatorSlashInfoResponse){
    option (google.api.http).get = "/exocore/operator/v1/QueryOperatorSlashInfo";
  }
}

