syntax = "proto3";
package exocore.operator.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "exocore/operator/v1/tx.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "tendermint/crypto/keys.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/operator/types";

// QueryOperatorInfoReq is the request to obtain the operator information.
message GetOperatorInfoReq {
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryOperatorConsKeyRequest is the request to obtain the consensus public key of the operator
message QueryOperatorConsKeyRequest {
  // addr is the ACC address of operator
  string addr = 1;
  // chain is the id of the chain served by the operator
  string chain = 2;
}

// QueryOperatorConsKeyResponse is the response for QueryOperatorConsKeyRequest
message QueryOperatorConsKeyResponse {
  // public_key is the consensus public key of the operator
  tendermint.crypto.PublicKey public_key = 1 [ (gogoproto.nullable) = false ];
}

// QueryOperatorConsAddressRequest is the request to obtain the consensus address of the operator
// for a specific chain ID.
message QueryOperatorConsAddressRequest {
  // addr is the ACC address of operator
  string addr = 1;
  // chain is the id of the chain served by the operator
  string chain = 2;
}

// QueryOperatorConsAddressResponse is the response for QueryOperatorConsAddressRequest.
message QueryOperatorConsAddressResponse {
  // address is the consensus address of the operator
  string address = 1;
}

// QueryAllOperatorKeysByChainIDRequest is the request to obtain all operator addresses
// and consensus keys for a specific chain ID, with pagination.
message QueryAllOperatorKeysByChainIDRequest {
  // chain to query for operator info.
  string chain = 1;
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllOperatorKeysByChainIDResponse is the response that includes a list of all operators
// and their consensus keys for a specified chain ID.
message QueryAllOperatorKeysByChainIDResponse {
  // operator_cons_keys is a list of operator addresses and their consensus public key.
  repeated OperatorConsKeyPair operator_cons_keys = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// OperatorConsKeyPair holds the operator address and the corresponding consensus public key.
message OperatorConsKeyPair {
  // operator_addr is the operator address.
  string operator_addr = 1;
  // public_key is the consensus public key of the operator.
  tendermint.crypto.PublicKey public_key = 2;
}

// QueryAllOperatorConsAddrsByChainIDRequest is the request to obtain all operator addresses
// and consensus addresses for a specific chain ID, with pagination.
message QueryAllOperatorConsAddrsByChainIDRequest {
  // chain to query for operator info.
  string chain = 1;
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllOperatorConsAddrsByChainIDResponse is the response that includes a list of all operators
// and their consensus addresses for a specified chain ID.
message QueryAllOperatorConsAddrsByChainIDResponse {
  // operator_cons_addrs is a list of operator account addresses and their consensus addresses.
  repeated OperatorConsAddrPair operator_cons_addrs = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// OperatorConsAddrPair holds the operator address and the corresponding consensus address.
message OperatorConsAddrPair {
  // operator_addr is the operator address.
  string operator_addr = 1;
  // cons_address is the consensus address of the operator.
  string cons_address = 2;
}

// Query defines the gRPC querier service.
service Query {
  // QueryOperatorInfo queries the operator information.
  rpc QueryOperatorInfo(GetOperatorInfoReq) returns (OperatorInfo) {
    option (google.api.http).get = "/exocore/operator/v1/operator_info/{operator_addr}";
  }

  // QueryOperatorConsKeyForChainID queries the consensus public key for the operator
  rpc QueryOperatorConsKeyForChainID(QueryOperatorConsKeyRequest) returns (
    QueryOperatorConsKeyResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/operator_cons_key/{addr}/{chain}"
    };
  }

  // QueryOperatorConsAddressForChainID queries the consensus address for the operator.
  rpc QueryOperatorConsAddressForChainID(QueryOperatorConsAddressRequest) returns (
    QueryOperatorConsAddressResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/operator_cons_address/{addr}/{chain}"
    };
  }

  // QueryAllOperatorKeysByChainID queries all operators and their consensus public keys
  // for a specific chain ID
  rpc QueryAllOperatorKeysByChainID(QueryAllOperatorKeysByChainIDRequest) returns (
    QueryAllOperatorKeysByChainIDResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operator_keys/{chain}"
    };
  }

  // QueryAllOperatorConsAddrsByChainID queries all operators and their consensus addresses
  // for a specific chain ID
  rpc QueryAllOperatorConsAddrsByChainID(QueryAllOperatorConsAddrsByChainIDRequest) returns (
    QueryAllOperatorConsAddrsByChainIDResponse
  ) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operator_addrs/{chain}"
    };
  }
}