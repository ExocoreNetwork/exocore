syntax = "proto3";
package exocore.operator.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/operator/types";

message clientChainEarningAddrList {
  repeated clientChainEarningAddrInfo EarningInfoList = 1;
}

message clientChainEarningAddrInfo {
  uint64 lzClientChainId = 1;
  string clientChainEarningAddr = 2;
}

message OperatorInfo{
  string EarningsAddr = 1;
  string ApproveAddr = 2;
  string OperatorMetaInfo = 3;
  clientChainEarningAddrList ClientChainEarningsAddr = 4;
}

message OptedInfo {
  string SlashContract = 1;
  uint64 OptedInHeight = 2;
  uint64 OptedOutHeight = 3;
}

message AssetOptedInState{
  string Amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  string Value = 2
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message ValueField {
  string Amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message OperatorSlashInfo {
  string SlashContract = 1;
  int64 SlashHeight = 2;
  int64 OccurredHeight = 3;
  int64 ExecuteHeight = 4;
  bool IsVeto = 5;
  string SlashProportion = 6
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message RegisterOperatorReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/OperatorInfo";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string FromAddress = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  OperatorInfo info = 2;
}

message RegisterOperatorResponse{}

// OptInToChainIdRequest defines the OptInToChainId request.
message OptInToChainIdRequest {
  option (cosmos.msg.v1.signer) = "address";
  string address = 1;
  string chain_id = 2;
  // `{"@type":"/cosmos.crypto.ed25519.PubKey","key":"Ui5Gf1+mtWUdH8u3xlmzdKID+F3PK0sfXZ73GZ6q6is="}`
  // there is no need to check for knowledge of the corresponding private key since this is ED25519
  // and not BLS key, where a rogue key attack can take place. however, we should still check for
  // overlap with another operator's key.
  string public_key = 3;
}

// OptInToChainIdResponse defines the OptInToChainId response.
message OptInToChainIdResponse {
}

// InitiateOptOutFromChainIdRequest defines the InitiateOptOutFromChainId request.
message InitiateOptOutFromChainIdRequest {
  option (cosmos.msg.v1.signer) = "address";
  string address = 1;
  string chain_id = 2;
}

// InitiateOptOutFromChainIdResponse defines the InitiateOptOutFromChainId response.
message InitiateOptOutFromChainIdResponse {
}

// Msg defines the delegation Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // CreateClawbackVestingAccount creats a vesting account that is subject to clawback.
  rpc RegisterOperator(RegisterOperatorReq) returns (RegisterOperatorResponse);

  // add services for dogfood
  // OptInToChainId acts as opt in method for an operator to
  // start validatring on a chain. The operator must sign the request with
  // the key with which they registered in the system.
  rpc OptInToChainId(OptInToChainIdRequest) returns (OptInToChainIdResponse) {};
  // InitiateOptOutFromChainId is a method with which an operator can initiate
  // the opt out process from a chain. The operator must sign the request with
  // the key with which they registered in the system. The opt-out process takes
  // as long as the chain's unbonding period to complete, plus some loose change
  // for message relaying across chains.
  rpc InitiateOptOutFromChainId(InitiateOptOutFromChainIdRequest) returns (InitiateOptOutFromChainIdResponse) {};
}




