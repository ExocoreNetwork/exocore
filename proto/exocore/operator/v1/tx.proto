syntax = "proto3";
package exocore.operator.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/operator/types";

// DecValueField is a field that holds a value of sdk.LegacyDec type.
message DecValueField {
  // amount is the USD value of the asset, as an sdk.LegacyDec.
  string amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// OperatorOptedUSDValue records the self and total opted-in USD value for the specified operator and AVS
message OperatorOptedUSDValue {
  // self_usd_value is the USD value owned by the operator itself.
  string self_usd_value = 1
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "SelfUSDValue"
  ];
  // total_usd_value is the total opted-in USD value for the specified operator and AVS
  string total_usd_value = 2
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "TotalUSDValue"
  ];
  // active_usd_value is the active opted-in USD value for the specified operator and AVS
  // this field will be zero if the operator's self staking isn't sufficient. Of course, it will
  // be equal to total_usd_value if the operator's self staking meets the AVS requirement.
  string active_usd_value = 3
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "ActiveUSDValue"
  ];
}

// ClientChainEarningAddrList is the list of client chain earning addresses.
// Because the reward token provide by the AVS might be located at different client chain, the operator need to
// provide the different client chain address to receive the token rewards.
message ClientChainEarningAddrList {
  // earning_info_list is the contents of ClientChainEarningAddrList.
  repeated ClientChainEarningAddrInfo earning_info_list = 1;
}

// ClientChainEarningAddrInfo is the client chain earning address info.
message ClientChainEarningAddrInfo {
  // lz_client_chain_id is the layer0 client chain id.
  uint64 lz_client_chain_id = 1  [(gogoproto.customname) = "LzClientChainID"];
  // client_chain_earning_addr is the client chain earning address.
  string client_chain_earning_addr = 2;
}

// OperatorInfo is the operator info.
message OperatorInfo {
  // earnings_addr is the earnings address.
  string earnings_addr = 1;
  // approve_addr is the approve address.
  string approve_addr = 2;
  // operator_meta_info is the operator meta info.
  string operator_meta_info = 3;
  // client_chain_earning_addr_list is the client chain earning address list.
  ClientChainEarningAddrList client_chain_earnings_addr = 4;
  // commission defines the commission parameters. it includes the time at which the commission
  // was last updated.
  cosmos.staking.v1beta1.Commission commission = 5 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// OptedInfo is the opted information about operator
message OptedInfo {
  // slash_contract is the slash contract address of AVS opted-in by the operator
  string slash_contract = 1;
  // opted_in_height is the exocore block height at which the operator opted in
  uint64 opted_in_height = 2;
  // opted_out_height is the exocore block height at which the operator opted out
  uint64 opted_out_height = 3;
  // jailed defined whether the operator has been jailed from bonded status or not.
  bool jailed = 4;
}

// OptedInAssetState is the state of opted-in asset
message OptedInAssetState {
  // amount of the opted-in asset
  string amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // value is the USD value of the opted-in asset
  string value = 2
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// SlashType represents different slash type
enum SlashType {
  // SLASH_TYPE__UNSPECIFIED represents the unspecified slash type
  SLASH_TYPE_UNSPECIFIED = 0;
  // SLASH_TYPE_INSTANT_SLASH represents the slash events that will be handled instantly after occurring
  // so the slash will reduce the amount of related operator's assets pool.
  SLASH_TYPE_INSTANT_SLASH = 1;
  // NoInstantaneousSlash indicates that the slash event will be processed after a certain
  // period of time, thus requiring a reduction in the share of the corresponding staker.
  SLASH_TYPE_NO_INSTANTANEOUS_SLASH = 2;
}

// SlashFromUndelegation records the slash detail from the undelegation
message SlashFromUndelegation {
  // staker_id is the staker id.
  string staker_id = 1 [(gogoproto.customname) = "StakerID"];
  // asset_id is the asset id.
  string asset_id = 2 [(gogoproto.customname) = "AssetID"];
  // amount is the slashed amount from the undelegation.
  string amount = 3
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
// SlashFromAssetsPool records the slash detail from the operator assets pool
message SlashFromAssetsPool {
  // asset_id is the asset id.
  string asset_id = 1 [(gogoproto.customname) = "AssetID"];
  // amount is the slashed amount from the assets pool.
  string amount = 2
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}


// SlashExecutionInfo is the actual execution state for a slash event
message SlashExecutionInfo {
  // slash_proportion is the new calculated proportion when execute the slash
  string slash_proportion = 1
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // slash_value is the usd value of all slashed assets
  string slash_value = 2
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // SlashUndelegations records all slash info related to the undelegation
  repeated SlashFromUndelegation slash_undelegations = 3 [(gogoproto.nullable) = false] ;
  // SlashFromAssetsPool records all slash info related to the assets pool
  repeated SlashFromAssetsPool slash_assets_pool = 4 [(gogoproto.nullable) = false] ;
}

// OperatorSlashInfo is the slash info of operator
message OperatorSlashInfo {
  // slash_contract is the address of slash contract
  string slash_contract = 1;
  // submitted_height is the exocore block height at which the slash event is submitted
  int64 submitted_height = 2;
  // event_height is the exocore block height at which the slash event occurs
  int64 event_height = 3;
  // is_vetoed is a flag to indicate if this slash is vetoed
  bool is_vetoed = 4;
  // slash_proportion is the proportion of assets that need to be slashed
  string slash_proportion = 5
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // slash_type indicates the slash type of specified AVS.
  uint32 slash_type = 6;
  // SlashExecutionInfo stores the slashed execution information
  SlashExecutionInfo execution_info = 7;
}

// RegisterOperatorReq is the request to register a new operator.
message RegisterOperatorReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/OperatorInfo";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the operator (sdk.AccAddress).
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // info is the operator info.
  OperatorInfo info = 2;
}

// RegisterOperatorResponse is the response to a register operator request.
message RegisterOperatorResponse {}

// OptIntoAVSReq is the request to opt into an AVS.
message OptIntoAVSReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/OptIntoAVSReq";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the operator (sdk.AccAddress).
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs_address is the address of the AVS.
  string avs_address = 2;
  // public_key_json is an optional parameter to provide the consensus key.
  // the key is provided in the JSON format and not the hex format.
  // TODO: allow providing a BLS key here, depending on the AVS.
  string public_key_json = 3 [(gogoproto.customname) = "PublicKeyJSON"];
}

// OptIntoAVSResponse is the response to a opt into an AVS request.
message OptIntoAVSResponse {}

// OptOutOfAVSReq is the request to opt out from an AVS.
message OptOutOfAVSReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/OptOutOfAVSReq";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the operator (sdk.AccAddress).
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs_address is the address of the AVS.
  string avs_address = 2;
}

// OptOutOfAVSResponse is the response to a opt out of an AVS request.
message OptOutOfAVSResponse {}

// SetConsKeyReq is the request to set the operator's consensus key for an AVS.
message SetConsKeyReq {
  option (cosmos.msg.v1.signer) = "address";
  option (amino.name) = "cosmos-sdk/SetConsKeyReq";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  // address is the operator address
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs_address is the address of the AVS.
  string avs_address = 2;
  // public_key_json is the consensus public key of the operator in the JSON format, for example:
  // `{"@type":"/cosmos.crypto.ed25519.PubKey","key":"Ui5Gf1+mtWUdH8u3xlmzdKID+F3PK0sfXZ73GZ6q6is="}`
  // there is no need to check for knowledge of the corresponding private key since this is ED25519
  // and not BLS key, where a rogue key attack can take place. however, we should still check for
  // overlap with another operator's key.
  string public_key_json = 3 [(gogoproto.customname) = "PublicKeyJSON"];
}

// SetConsKeyResponse is the response to SetConsKeyReq.
message SetConsKeyResponse {}

// Msg defines the operator Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // RegisterOperator registers a new operator.
  rpc RegisterOperator(RegisterOperatorReq) returns (RegisterOperatorResponse) {
    option (google.api.http).post = "/exocore/operator/v1/tx/RegisterOperatorReq";
  };

  // SetConsKey sets the operator's consensus key for an AVS. To do this, the operator
  // must have previously opted into the AVS.
  rpc SetConsKey(SetConsKeyReq) returns (SetConsKeyResponse) {
    option (google.api.http).post = "/exocore/operator/v1/tx/SetConsKeyReq";
  };

  // OptIntoAVS opts an operator into an AVS.
  rpc OptIntoAVS(OptIntoAVSReq) returns (OptIntoAVSResponse) {
    option (google.api.http).post = "/exocore/operator/v1/tx/OptIntoAVSReq";
  };
  // OptOutOfAVS opts an operator out of an AVS.
  rpc OptOutOfAVS(OptOutOfAVSReq) returns (OptOutOfAVSResponse) {
    option (google.api.http).post = "/exocore/operator/v1/tx/OptOutOfAVSReq";
  };
}