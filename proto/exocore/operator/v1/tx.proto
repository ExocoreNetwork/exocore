syntax = "proto3";
package exocore.operator.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/operator/types";

// DecValueField is a field that holds a value of sdk.LegacyDec type.
message DecValueField {
  // amount is the USD value of the asset, as an sdk.LegacyDec.
  string amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// ClientChainEarningAddrList is the list of client chain earning addresses.
// Because the reward token provide by the AVS might be located at different client chain, the operator need to
// provide the different client chain address to receive the token rewards.
message ClientChainEarningAddrList {
  // earning_info_list is the contents of ClientChainEarningAddrList.
  repeated ClientChainEarningAddrInfo earning_info_list = 1;
}

// ClientChainEarningAddrInfo is the client chain earning address info.
message ClientChainEarningAddrInfo {
  // lz_client_chain_id is the layer0 client chain id.
  uint64 lz_client_chain_id = 1  [(gogoproto.customname) = "LzClientChainID"];
  // client_chain_earning_addr is the client chain earning address.
  string client_chain_earning_addr = 2;
}

// OperatorInfo is the operator info.
message OperatorInfo {
  // earnings_addr is the earnings address.
  string earnings_addr = 1;
  // approve_addr is the approve address.
  string approve_addr = 2;
  // operator_meta_info is the operator meta info.
  string operator_meta_info = 3;
  // client_chain_earning_addr_list is the client chain earning address list.
  ClientChainEarningAddrList client_chain_earnings_addr = 4;
  // commission defines the commission parameters. it includes the time at which the commission
  // was last updated.
  cosmos.staking.v1beta1.Commission commission = 5 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// OptedInfo is the opted information about operator
message OptedInfo {
  // slash_contract is the slash contract address of AVS opted-in by the operator
  string slash_contract = 1;
  // opted_in_height is the exocore block height at which the operator opted in
  uint64 opted_in_height = 2;
  // opted_out_height is the exocore block height at which the operator opted out
  uint64 opted_out_height = 3;
  // jailed defined whether the operator has been jailed from bonded status or not.
  bool jailed = 4;
}

// OptedInAssetState is the state of opted-in asset
message OptedInAssetState {
  // amount of the opted-in asset
  string amount = 1
  [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // value is the USD value of the opted-in asset
  string value = 2
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// OperatorSlashInfo is the slash info of operator
message OperatorSlashInfo {
  // slash_contract is the address of slash contract
  string slash_contract = 1;
  // submitted_height is the exocore block height at which the slash event is submitted
  int64 submitted_height = 2;
  // event_height is the exocore block height at which the slash event occurs
  int64 event_height = 3;
  // processed_height is the exocore block height at which the slash event is processed
  int64 processed_height = 4;
  // is_vetoed is a flag to indicate if this slash is vetoed
  bool is_vetoed = 5;
  // slash_proportion is the proportion of assets that need to be slashed
  string slash_proportion = 6
  [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// RegisterOperatorReq is the request to register a new operator.
message RegisterOperatorReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/OperatorInfo";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the operator (sdk.AccAddress).
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // info is the operator info.
  OperatorInfo info = 2;
}

// RegisterOperatorResponse is the response to a register operator request.
message RegisterOperatorResponse{}

// OptIntoAVSReq is the request to opt into an AVS.
message OptIntoAVSReq {
  option (cosmos.msg.v1.signer) = "FromAddress";
  option (amino.name) = "cosmos-sdk/OptIntoAVSReq";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // from_address is the address of the operator (sdk.AccAddress).
  string from_address = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs_address is the address of the AVS - either an 0x address or a chainID.
  string avs_address = 2;
}

// OptIntoAVSResponse is the response to a opt into an AVS request.
message OptIntoAVSResponse{}

// OptInToCosmosChainRequest defines the OptInToCosmosChain request.
message OptInToCosmosChainRequest {
  option (cosmos.msg.v1.signer) = "address";
  // address is the operator address
  string address = 1;
  // chain_id is the identifier for the chain that wants to opt in.
  string chain_id = 2;
  // `{"@type":"/cosmos.crypto.ed25519.PubKey","key":"Ui5Gf1+mtWUdH8u3xlmzdKID+F3PK0sfXZ73GZ6q6is="}`
  // there is no need to check for knowledge of the corresponding private key since this is ED25519
  // and not BLS key, where a rogue key attack can take place. however, we should still check for
  // overlap with another operator's key.
  string public_key = 3;
}

// OptInToCosmosChainResponse defines the OptInToCosmosChain response.
message OptInToCosmosChainResponse {
}

// InitOptOutFromCosmosChainRequest defines the InitOptOutFromCosmosChain request.
message InitOptOutFromCosmosChainRequest {
  option (cosmos.msg.v1.signer) = "address";
  // address is the operator address
  string address = 1;
  // chain_id is the identifier for the chain that wants to opt out.
  string chain_id = 2;
}

// InitOptOutFromCosmosChainResponse defines the InitOptOutFromCosmosChain response.
message InitOptOutFromCosmosChainResponse {
}

// Msg defines the operator Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // RegisterOperator registers a new operator.
  rpc RegisterOperator(RegisterOperatorReq) returns (RegisterOperatorResponse);

  // add services for dogfood
  // OptInToCosmosChain acts as opt in method for an operator to
  // start validatring on a chain. The operator must sign the request with
  // the key with which they registered in the system.
  rpc OptInToCosmosChain(OptInToCosmosChainRequest) returns (OptInToCosmosChainResponse) {};
  // InitOptOutFromCosmosChain is a method with which an operator can initiate
  // the opt out process from a chain. The operator must sign the request with
  // the key with which they registered in the system. The opt-out process takes
  // as long as the chain's unbonding period to complete, plus some loose change
  // for message relaying across chains.
  rpc InitOptOutFromCosmosChain(InitOptOutFromCosmosChainRequest) returns (InitOptOutFromCosmosChainResponse) {};
}